
LCD_Bluetooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c64  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08006e10  08006e10  00016e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800726c  0800726c  00032c10  2**0
                  CONTENTS
  4 .ARM          00000008  0800726c  0800726c  0001726c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007274  08007274  00032c10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007274  08007274  00017274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007278  08007278  00017278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00012c10  20000000  0800727c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000be4  20012c10  08019e8c  00032c10  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200137f4  08019e8c  000337f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032c10  2**0
                  CONTENTS, READONLY
 12 .debug_info   000173df  00000000  00000000  00032c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f5d  00000000  00000000  0004a01f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014a0  00000000  00000000  0004cf80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001318  00000000  00000000  0004e420  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000046cd  00000000  00000000  0004f738  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000129cd  00000000  00000000  00053e05  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e4946  00000000  00000000  000667d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014b118  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005650  00000000  00000000  0014b194  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20012c10 	.word	0x20012c10
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006df8 	.word	0x08006df8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20012c14 	.word	0x20012c14
 80001e8:	08006df8 	.word	0x08006df8

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b972 	b.w	80004f8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	4688      	mov	r8, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14b      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023a:	428a      	cmp	r2, r1
 800023c:	4615      	mov	r5, r2
 800023e:	d967      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0720 	rsb	r7, r2, #32
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	fa20 f707 	lsr.w	r7, r0, r7
 8000252:	4095      	lsls	r5, r2
 8000254:	ea47 0803 	orr.w	r8, r7, r3
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbb8 f7fe 	udiv	r7, r8, lr
 8000264:	fa1f fc85 	uxth.w	ip, r5
 8000268:	fb0e 8817 	mls	r8, lr, r7, r8
 800026c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000270:	fb07 f10c 	mul.w	r1, r7, ip
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18eb      	adds	r3, r5, r3
 800027a:	f107 30ff 	add.w	r0, r7, #4294967295
 800027e:	f080 811b 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8118 	bls.w	80004b8 <__udivmoddi4+0x28c>
 8000288:	3f02      	subs	r7, #2
 800028a:	442b      	add	r3, r5
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0fe 	udiv	r0, r3, lr
 8000294:	fb0e 3310 	mls	r3, lr, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a0:	45a4      	cmp	ip, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	192c      	adds	r4, r5, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8107 	bcs.w	80004bc <__udivmoddi4+0x290>
 80002ae:	45a4      	cmp	ip, r4
 80002b0:	f240 8104 	bls.w	80004bc <__udivmoddi4+0x290>
 80002b4:	3802      	subs	r0, #2
 80002b6:	442c      	add	r4, r5
 80002b8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002bc:	eba4 040c 	sub.w	r4, r4, ip
 80002c0:	2700      	movs	r7, #0
 80002c2:	b11e      	cbz	r6, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c6 4300 	strd	r4, r3, [r6]
 80002cc:	4639      	mov	r1, r7
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xbe>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80eb 	beq.w	80004b2 <__udivmoddi4+0x286>
 80002dc:	2700      	movs	r7, #0
 80002de:	e9c6 0100 	strd	r0, r1, [r6]
 80002e2:	4638      	mov	r0, r7
 80002e4:	4639      	mov	r1, r7
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f783 	clz	r7, r3
 80002ee:	2f00      	cmp	r7, #0
 80002f0:	d147      	bne.n	8000382 <__udivmoddi4+0x156>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd0>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80fa 	bhi.w	80004f0 <__udivmoddi4+0x2c4>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4698      	mov	r8, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa0>
 800030a:	e9c6 4800 	strd	r4, r8, [r6]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa0>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xe8>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 808f 	bne.w	800043c <__udivmoddi4+0x210>
 800031e:	1b49      	subs	r1, r1, r5
 8000320:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000324:	fa1f f885 	uxth.w	r8, r5
 8000328:	2701      	movs	r7, #1
 800032a:	fbb1 fcfe 	udiv	ip, r1, lr
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	fb0e 111c 	mls	r1, lr, ip, r1
 8000334:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000338:	fb08 f10c 	mul.w	r1, r8, ip
 800033c:	4299      	cmp	r1, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x124>
 8000340:	18eb      	adds	r3, r5, r3
 8000342:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4299      	cmp	r1, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 800034e:	4684      	mov	ip, r0
 8000350:	1a59      	subs	r1, r3, r1
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fb0e 1410 	mls	r4, lr, r0, r1
 800035c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000360:	fb08 f800 	mul.w	r8, r8, r0
 8000364:	45a0      	cmp	r8, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x14c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x14a>
 8000370:	45a0      	cmp	r8, r4
 8000372:	f200 80b6 	bhi.w	80004e2 <__udivmoddi4+0x2b6>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 0408 	sub.w	r4, r4, r8
 800037c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000380:	e79f      	b.n	80002c2 <__udivmoddi4+0x96>
 8000382:	f1c7 0c20 	rsb	ip, r7, #32
 8000386:	40bb      	lsls	r3, r7
 8000388:	fa22 fe0c 	lsr.w	lr, r2, ip
 800038c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000390:	fa01 f407 	lsl.w	r4, r1, r7
 8000394:	fa20 f50c 	lsr.w	r5, r0, ip
 8000398:	fa21 f30c 	lsr.w	r3, r1, ip
 800039c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a0:	4325      	orrs	r5, r4
 80003a2:	fbb3 f9f8 	udiv	r9, r3, r8
 80003a6:	0c2c      	lsrs	r4, r5, #16
 80003a8:	fb08 3319 	mls	r3, r8, r9, r3
 80003ac:	fa1f fa8e 	uxth.w	sl, lr
 80003b0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b4:	fb09 f40a 	mul.w	r4, r9, sl
 80003b8:	429c      	cmp	r4, r3
 80003ba:	fa02 f207 	lsl.w	r2, r2, r7
 80003be:	fa00 f107 	lsl.w	r1, r0, r7
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1e 0303 	adds.w	r3, lr, r3
 80003c8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003cc:	f080 8087 	bcs.w	80004de <__udivmoddi4+0x2b2>
 80003d0:	429c      	cmp	r4, r3
 80003d2:	f240 8084 	bls.w	80004de <__udivmoddi4+0x2b2>
 80003d6:	f1a9 0902 	sub.w	r9, r9, #2
 80003da:	4473      	add	r3, lr
 80003dc:	1b1b      	subs	r3, r3, r4
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e4:	fb08 3310 	mls	r3, r8, r0, r3
 80003e8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003ec:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1e 0404 	adds.w	r4, lr, r4
 80003f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003fc:	d26b      	bcs.n	80004d6 <__udivmoddi4+0x2aa>
 80003fe:	45a2      	cmp	sl, r4
 8000400:	d969      	bls.n	80004d6 <__udivmoddi4+0x2aa>
 8000402:	3802      	subs	r0, #2
 8000404:	4474      	add	r4, lr
 8000406:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040a:	fba0 8902 	umull	r8, r9, r0, r2
 800040e:	eba4 040a 	sub.w	r4, r4, sl
 8000412:	454c      	cmp	r4, r9
 8000414:	46c2      	mov	sl, r8
 8000416:	464b      	mov	r3, r9
 8000418:	d354      	bcc.n	80004c4 <__udivmoddi4+0x298>
 800041a:	d051      	beq.n	80004c0 <__udivmoddi4+0x294>
 800041c:	2e00      	cmp	r6, #0
 800041e:	d069      	beq.n	80004f4 <__udivmoddi4+0x2c8>
 8000420:	ebb1 050a 	subs.w	r5, r1, sl
 8000424:	eb64 0403 	sbc.w	r4, r4, r3
 8000428:	fa04 fc0c 	lsl.w	ip, r4, ip
 800042c:	40fd      	lsrs	r5, r7
 800042e:	40fc      	lsrs	r4, r7
 8000430:	ea4c 0505 	orr.w	r5, ip, r5
 8000434:	e9c6 5400 	strd	r5, r4, [r6]
 8000438:	2700      	movs	r7, #0
 800043a:	e747      	b.n	80002cc <__udivmoddi4+0xa0>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f703 	lsr.w	r7, r0, r3
 8000444:	4095      	lsls	r5, r2
 8000446:	fa01 f002 	lsl.w	r0, r1, r2
 800044a:	fa21 f303 	lsr.w	r3, r1, r3
 800044e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000452:	4338      	orrs	r0, r7
 8000454:	0c01      	lsrs	r1, r0, #16
 8000456:	fbb3 f7fe 	udiv	r7, r3, lr
 800045a:	fa1f f885 	uxth.w	r8, r5
 800045e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb07 f308 	mul.w	r3, r7, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x256>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f107 3cff 	add.w	ip, r7, #4294967295
 8000478:	d22f      	bcs.n	80004da <__udivmoddi4+0x2ae>
 800047a:	428b      	cmp	r3, r1
 800047c:	d92d      	bls.n	80004da <__udivmoddi4+0x2ae>
 800047e:	3f02      	subs	r7, #2
 8000480:	4429      	add	r1, r5
 8000482:	1acb      	subs	r3, r1, r3
 8000484:	b281      	uxth	r1, r0
 8000486:	fbb3 f0fe 	udiv	r0, r3, lr
 800048a:	fb0e 3310 	mls	r3, lr, r0, r3
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb00 f308 	mul.w	r3, r0, r8
 8000496:	428b      	cmp	r3, r1
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x27e>
 800049a:	1869      	adds	r1, r5, r1
 800049c:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a0:	d217      	bcs.n	80004d2 <__udivmoddi4+0x2a6>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d915      	bls.n	80004d2 <__udivmoddi4+0x2a6>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4429      	add	r1, r5
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b0:	e73b      	b.n	800032a <__udivmoddi4+0xfe>
 80004b2:	4637      	mov	r7, r6
 80004b4:	4630      	mov	r0, r6
 80004b6:	e709      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b8:	4607      	mov	r7, r0
 80004ba:	e6e7      	b.n	800028c <__udivmoddi4+0x60>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6fb      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004c0:	4541      	cmp	r1, r8
 80004c2:	d2ab      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004c8:	eb69 020e 	sbc.w	r2, r9, lr
 80004cc:	3801      	subs	r0, #1
 80004ce:	4613      	mov	r3, r2
 80004d0:	e7a4      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d2:	4660      	mov	r0, ip
 80004d4:	e7e9      	b.n	80004aa <__udivmoddi4+0x27e>
 80004d6:	4618      	mov	r0, r3
 80004d8:	e795      	b.n	8000406 <__udivmoddi4+0x1da>
 80004da:	4667      	mov	r7, ip
 80004dc:	e7d1      	b.n	8000482 <__udivmoddi4+0x256>
 80004de:	4681      	mov	r9, r0
 80004e0:	e77c      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e2:	3802      	subs	r0, #2
 80004e4:	442c      	add	r4, r5
 80004e6:	e747      	b.n	8000378 <__udivmoddi4+0x14c>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	442b      	add	r3, r5
 80004ee:	e72f      	b.n	8000350 <__udivmoddi4+0x124>
 80004f0:	4638      	mov	r0, r7
 80004f2:	e708      	b.n	8000306 <__udivmoddi4+0xda>
 80004f4:	4637      	mov	r7, r6
 80004f6:	e6e9      	b.n	80002cc <__udivmoddi4+0xa0>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <LCD_DrawABig>:
		}
}


//Matthew's Addition
void LCD_DrawABig(uint16_t x0, uint16_t y0) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	460a      	mov	r2, r1
 8000506:	80fb      	strh	r3, [r7, #6]
 8000508:	4613      	mov	r3, r2
 800050a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 800050c:	230f      	movs	r3, #15
 800050e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000510:	2300      	movs	r3, #0
 8000512:	61fb      	str	r3, [r7, #28]
 8000514:	e030      	b.n	8000578 <LCD_DrawABig+0x7c>
		for(int dx = 0; dx <=width; dx++){
 8000516:	2300      	movs	r3, #0
 8000518:	61bb      	str	r3, [r7, #24]
 800051a:	e026      	b.n	800056a <LCD_DrawABig+0x6e>
			if ((dx <= 3 || dx >= 12) || (dy <= 3 || (dy >= 6 && dy <= 9))) {
 800051c:	69bb      	ldr	r3, [r7, #24]
 800051e:	2b03      	cmp	r3, #3
 8000520:	dd0b      	ble.n	800053a <LCD_DrawABig+0x3e>
 8000522:	69bb      	ldr	r3, [r7, #24]
 8000524:	2b0b      	cmp	r3, #11
 8000526:	dc08      	bgt.n	800053a <LCD_DrawABig+0x3e>
 8000528:	69fb      	ldr	r3, [r7, #28]
 800052a:	2b03      	cmp	r3, #3
 800052c:	dd05      	ble.n	800053a <LCD_DrawABig+0x3e>
 800052e:	69fb      	ldr	r3, [r7, #28]
 8000530:	2b05      	cmp	r3, #5
 8000532:	dd17      	ble.n	8000564 <LCD_DrawABig+0x68>
 8000534:	69fb      	ldr	r3, [r7, #28]
 8000536:	2b09      	cmp	r3, #9
 8000538:	dc14      	bgt.n	8000564 <LCD_DrawABig+0x68>
				int y = y0 + dy;
 800053a:	88bb      	ldrh	r3, [r7, #4]
 800053c:	69fa      	ldr	r2, [r7, #28]
 800053e:	4413      	add	r3, r2
 8000540:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000542:	88fb      	ldrh	r3, [r7, #6]
 8000544:	69ba      	ldr	r2, [r7, #24]
 8000546:	4413      	add	r3, r2
 8000548:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <LCD_DrawABig+0x8c>)
 800054c:	7818      	ldrb	r0, [r3, #0]
 800054e:	693a      	ldr	r2, [r7, #16]
 8000550:	4613      	mov	r3, r2
 8000552:	011b      	lsls	r3, r3, #4
 8000554:	1a9b      	subs	r3, r3, r2
 8000556:	011b      	lsls	r3, r3, #4
 8000558:	461a      	mov	r2, r3
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	4413      	add	r3, r2
 800055e:	4619      	mov	r1, r3
 8000560:	f001 febc 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000564:	69bb      	ldr	r3, [r7, #24]
 8000566:	3301      	adds	r3, #1
 8000568:	61bb      	str	r3, [r7, #24]
 800056a:	7dfb      	ldrb	r3, [r7, #23]
 800056c:	69ba      	ldr	r2, [r7, #24]
 800056e:	429a      	cmp	r2, r3
 8000570:	ddd4      	ble.n	800051c <LCD_DrawABig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000572:	69fb      	ldr	r3, [r7, #28]
 8000574:	3301      	adds	r3, #1
 8000576:	61fb      	str	r3, [r7, #28]
 8000578:	7dfb      	ldrb	r3, [r7, #23]
 800057a:	69fa      	ldr	r2, [r7, #28]
 800057c:	429a      	cmp	r2, r3
 800057e:	ddca      	ble.n	8000516 <LCD_DrawABig+0x1a>
			}
		}
	}
}
 8000580:	bf00      	nop
 8000582:	3720      	adds	r7, #32
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000000 	.word	0x20000000

0800058c <LCD_DrawBBig>:

void LCD_DrawBBig(uint16_t x0, uint16_t y0) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	460a      	mov	r2, r1
 8000596:	80fb      	strh	r3, [r7, #6]
 8000598:	4613      	mov	r3, r2
 800059a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 800059c:	230f      	movs	r3, #15
 800059e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
 80005a4:	e04b      	b.n	800063e <LCD_DrawBBig+0xb2>
		for(int dx = 0; dx <=width; dx++){
 80005a6:	2300      	movs	r3, #0
 80005a8:	61bb      	str	r3, [r7, #24]
 80005aa:	e041      	b.n	8000630 <LCD_DrawBBig+0xa4>
			if ((dx <= 3) || (dy >= 6 && dy <= 9 && dx <= 11) || (dy <= 3 && dx <= 11) || (dy >= 12 && dx <= 11)|| (dx >= 12 && (dy >= 3 && dy <= 6)) || ((dx >= 12) && (dy >= 9 && dy <= 12))) {
 80005ac:	69bb      	ldr	r3, [r7, #24]
 80005ae:	2b03      	cmp	r3, #3
 80005b0:	dd26      	ble.n	8000600 <LCD_DrawBBig+0x74>
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	2b05      	cmp	r3, #5
 80005b6:	dd05      	ble.n	80005c4 <LCD_DrawBBig+0x38>
 80005b8:	69fb      	ldr	r3, [r7, #28]
 80005ba:	2b09      	cmp	r3, #9
 80005bc:	dc02      	bgt.n	80005c4 <LCD_DrawBBig+0x38>
 80005be:	69bb      	ldr	r3, [r7, #24]
 80005c0:	2b0b      	cmp	r3, #11
 80005c2:	dd1d      	ble.n	8000600 <LCD_DrawBBig+0x74>
 80005c4:	69fb      	ldr	r3, [r7, #28]
 80005c6:	2b03      	cmp	r3, #3
 80005c8:	dc02      	bgt.n	80005d0 <LCD_DrawBBig+0x44>
 80005ca:	69bb      	ldr	r3, [r7, #24]
 80005cc:	2b0b      	cmp	r3, #11
 80005ce:	dd17      	ble.n	8000600 <LCD_DrawBBig+0x74>
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	2b0b      	cmp	r3, #11
 80005d4:	dd02      	ble.n	80005dc <LCD_DrawBBig+0x50>
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	2b0b      	cmp	r3, #11
 80005da:	dd11      	ble.n	8000600 <LCD_DrawBBig+0x74>
 80005dc:	69bb      	ldr	r3, [r7, #24]
 80005de:	2b0b      	cmp	r3, #11
 80005e0:	dd05      	ble.n	80005ee <LCD_DrawBBig+0x62>
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	2b02      	cmp	r3, #2
 80005e6:	dd02      	ble.n	80005ee <LCD_DrawBBig+0x62>
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	2b06      	cmp	r3, #6
 80005ec:	dd08      	ble.n	8000600 <LCD_DrawBBig+0x74>
 80005ee:	69bb      	ldr	r3, [r7, #24]
 80005f0:	2b0b      	cmp	r3, #11
 80005f2:	dd1a      	ble.n	800062a <LCD_DrawBBig+0x9e>
 80005f4:	69fb      	ldr	r3, [r7, #28]
 80005f6:	2b08      	cmp	r3, #8
 80005f8:	dd17      	ble.n	800062a <LCD_DrawBBig+0x9e>
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	2b0c      	cmp	r3, #12
 80005fe:	dc14      	bgt.n	800062a <LCD_DrawBBig+0x9e>
				int y = y0 + dy;
 8000600:	88bb      	ldrh	r3, [r7, #4]
 8000602:	69fa      	ldr	r2, [r7, #28]
 8000604:	4413      	add	r3, r2
 8000606:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000608:	88fb      	ldrh	r3, [r7, #6]
 800060a:	69ba      	ldr	r2, [r7, #24]
 800060c:	4413      	add	r3, r2
 800060e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <LCD_DrawBBig+0xc4>)
 8000612:	7818      	ldrb	r0, [r3, #0]
 8000614:	693a      	ldr	r2, [r7, #16]
 8000616:	4613      	mov	r3, r2
 8000618:	011b      	lsls	r3, r3, #4
 800061a:	1a9b      	subs	r3, r3, r2
 800061c:	011b      	lsls	r3, r3, #4
 800061e:	461a      	mov	r2, r3
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4413      	add	r3, r2
 8000624:	4619      	mov	r1, r3
 8000626:	f001 fe59 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	3301      	adds	r3, #1
 800062e:	61bb      	str	r3, [r7, #24]
 8000630:	7dfb      	ldrb	r3, [r7, #23]
 8000632:	69ba      	ldr	r2, [r7, #24]
 8000634:	429a      	cmp	r2, r3
 8000636:	ddb9      	ble.n	80005ac <LCD_DrawBBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000638:	69fb      	ldr	r3, [r7, #28]
 800063a:	3301      	adds	r3, #1
 800063c:	61fb      	str	r3, [r7, #28]
 800063e:	7dfb      	ldrb	r3, [r7, #23]
 8000640:	69fa      	ldr	r2, [r7, #28]
 8000642:	429a      	cmp	r2, r3
 8000644:	ddaf      	ble.n	80005a6 <LCD_DrawBBig+0x1a>
			}
		}
	}
}
 8000646:	bf00      	nop
 8000648:	3720      	adds	r7, #32
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000000 	.word	0x20000000

08000654 <LCD_DrawCBig>:

void LCD_DrawCBig(uint16_t x0, uint16_t y0) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	460a      	mov	r2, r1
 800065e:	80fb      	strh	r3, [r7, #6]
 8000660:	4613      	mov	r3, r2
 8000662:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000664:	230f      	movs	r3, #15
 8000666:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
 800066c:	e02a      	b.n	80006c4 <LCD_DrawCBig+0x70>
		for(int dx = 0; dx <=width; dx++){
 800066e:	2300      	movs	r3, #0
 8000670:	61bb      	str	r3, [r7, #24]
 8000672:	e020      	b.n	80006b6 <LCD_DrawCBig+0x62>
			if ((dx <= 3) || (dy <= 3) || (dy >= 12)) {
 8000674:	69bb      	ldr	r3, [r7, #24]
 8000676:	2b03      	cmp	r3, #3
 8000678:	dd05      	ble.n	8000686 <LCD_DrawCBig+0x32>
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	2b03      	cmp	r3, #3
 800067e:	dd02      	ble.n	8000686 <LCD_DrawCBig+0x32>
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	2b0b      	cmp	r3, #11
 8000684:	dd14      	ble.n	80006b0 <LCD_DrawCBig+0x5c>
				int y = y0 + dy;
 8000686:	88bb      	ldrh	r3, [r7, #4]
 8000688:	69fa      	ldr	r2, [r7, #28]
 800068a:	4413      	add	r3, r2
 800068c:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800068e:	88fb      	ldrh	r3, [r7, #6]
 8000690:	69ba      	ldr	r2, [r7, #24]
 8000692:	4413      	add	r3, r2
 8000694:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <LCD_DrawCBig+0x80>)
 8000698:	7818      	ldrb	r0, [r3, #0]
 800069a:	693a      	ldr	r2, [r7, #16]
 800069c:	4613      	mov	r3, r2
 800069e:	011b      	lsls	r3, r3, #4
 80006a0:	1a9b      	subs	r3, r3, r2
 80006a2:	011b      	lsls	r3, r3, #4
 80006a4:	461a      	mov	r2, r3
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	4413      	add	r3, r2
 80006aa:	4619      	mov	r1, r3
 80006ac:	f001 fe16 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80006b0:	69bb      	ldr	r3, [r7, #24]
 80006b2:	3301      	adds	r3, #1
 80006b4:	61bb      	str	r3, [r7, #24]
 80006b6:	7dfb      	ldrb	r3, [r7, #23]
 80006b8:	69ba      	ldr	r2, [r7, #24]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	ddda      	ble.n	8000674 <LCD_DrawCBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	3301      	adds	r3, #1
 80006c2:	61fb      	str	r3, [r7, #28]
 80006c4:	7dfb      	ldrb	r3, [r7, #23]
 80006c6:	69fa      	ldr	r2, [r7, #28]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	ddd0      	ble.n	800066e <LCD_DrawCBig+0x1a>
			}
		}
	}
}
 80006cc:	bf00      	nop
 80006ce:	3720      	adds	r7, #32
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000000 	.word	0x20000000

080006d8 <LCD_DrawDBig>:

void LCD_DrawDBig(uint16_t x0, uint16_t y0) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	460a      	mov	r2, r1
 80006e2:	80fb      	strh	r3, [r7, #6]
 80006e4:	4613      	mov	r3, r2
 80006e6:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80006e8:	230f      	movs	r3, #15
 80006ea:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]
 80006f0:	e039      	b.n	8000766 <LCD_DrawDBig+0x8e>
		for(int dx = 0; dx <=width; dx++){
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
 80006f6:	e02f      	b.n	8000758 <LCD_DrawDBig+0x80>
			if ((dx <= 3) || (dy <= 3 && dx <= 11) || (dy >= 12 && dx <= 11) || (dx >= 12 && (dy >= 4 && dy <= 11))) {
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	2b03      	cmp	r3, #3
 80006fc:	dd14      	ble.n	8000728 <LCD_DrawDBig+0x50>
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	2b03      	cmp	r3, #3
 8000702:	dc02      	bgt.n	800070a <LCD_DrawDBig+0x32>
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	2b0b      	cmp	r3, #11
 8000708:	dd0e      	ble.n	8000728 <LCD_DrawDBig+0x50>
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	2b0b      	cmp	r3, #11
 800070e:	dd02      	ble.n	8000716 <LCD_DrawDBig+0x3e>
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	2b0b      	cmp	r3, #11
 8000714:	dd08      	ble.n	8000728 <LCD_DrawDBig+0x50>
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	2b0b      	cmp	r3, #11
 800071a:	dd1a      	ble.n	8000752 <LCD_DrawDBig+0x7a>
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	2b03      	cmp	r3, #3
 8000720:	dd17      	ble.n	8000752 <LCD_DrawDBig+0x7a>
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	2b0b      	cmp	r3, #11
 8000726:	dc14      	bgt.n	8000752 <LCD_DrawDBig+0x7a>
				int y = y0 + dy;
 8000728:	88bb      	ldrh	r3, [r7, #4]
 800072a:	69fa      	ldr	r2, [r7, #28]
 800072c:	4413      	add	r3, r2
 800072e:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000730:	88fb      	ldrh	r3, [r7, #6]
 8000732:	69ba      	ldr	r2, [r7, #24]
 8000734:	4413      	add	r3, r2
 8000736:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <LCD_DrawDBig+0xa0>)
 800073a:	7818      	ldrb	r0, [r3, #0]
 800073c:	693a      	ldr	r2, [r7, #16]
 800073e:	4613      	mov	r3, r2
 8000740:	011b      	lsls	r3, r3, #4
 8000742:	1a9b      	subs	r3, r3, r2
 8000744:	011b      	lsls	r3, r3, #4
 8000746:	461a      	mov	r2, r3
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4413      	add	r3, r2
 800074c:	4619      	mov	r1, r3
 800074e:	f001 fdc5 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000752:	69bb      	ldr	r3, [r7, #24]
 8000754:	3301      	adds	r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
 8000758:	7dfb      	ldrb	r3, [r7, #23]
 800075a:	69ba      	ldr	r2, [r7, #24]
 800075c:	429a      	cmp	r2, r3
 800075e:	ddcb      	ble.n	80006f8 <LCD_DrawDBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	3301      	adds	r3, #1
 8000764:	61fb      	str	r3, [r7, #28]
 8000766:	7dfb      	ldrb	r3, [r7, #23]
 8000768:	69fa      	ldr	r2, [r7, #28]
 800076a:	429a      	cmp	r2, r3
 800076c:	ddc1      	ble.n	80006f2 <LCD_DrawDBig+0x1a>
			}
		}
	}
}
 800076e:	bf00      	nop
 8000770:	3720      	adds	r7, #32
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000000 	.word	0x20000000

0800077c <LCD_DrawEBig>:

void LCD_DrawEBig(uint16_t x0, uint16_t y0) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	460a      	mov	r2, r1
 8000786:	80fb      	strh	r3, [r7, #6]
 8000788:	4613      	mov	r3, r2
 800078a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 800078c:	230f      	movs	r3, #15
 800078e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
 8000794:	e036      	b.n	8000804 <LCD_DrawEBig+0x88>
		for(int dx = 0; dx <=width; dx++){
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	e02c      	b.n	80007f6 <LCD_DrawEBig+0x7a>
			if ((dx < 4) || (dy <= 3 || dy == 6 || dy == 7 || dy == 8 || dy == 9|| dy >= 12)) {
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	2b03      	cmp	r3, #3
 80007a0:	dd11      	ble.n	80007c6 <LCD_DrawEBig+0x4a>
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	2b03      	cmp	r3, #3
 80007a6:	dd0e      	ble.n	80007c6 <LCD_DrawEBig+0x4a>
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	2b06      	cmp	r3, #6
 80007ac:	d00b      	beq.n	80007c6 <LCD_DrawEBig+0x4a>
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	2b07      	cmp	r3, #7
 80007b2:	d008      	beq.n	80007c6 <LCD_DrawEBig+0x4a>
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	2b08      	cmp	r3, #8
 80007b8:	d005      	beq.n	80007c6 <LCD_DrawEBig+0x4a>
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	2b09      	cmp	r3, #9
 80007be:	d002      	beq.n	80007c6 <LCD_DrawEBig+0x4a>
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	2b0b      	cmp	r3, #11
 80007c4:	dd14      	ble.n	80007f0 <LCD_DrawEBig+0x74>
				int y = y0 + dy;
 80007c6:	88bb      	ldrh	r3, [r7, #4]
 80007c8:	69fa      	ldr	r2, [r7, #28]
 80007ca:	4413      	add	r3, r2
 80007cc:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	69ba      	ldr	r2, [r7, #24]
 80007d2:	4413      	add	r3, r2
 80007d4:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <LCD_DrawEBig+0x98>)
 80007d8:	7818      	ldrb	r0, [r3, #0]
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	4613      	mov	r3, r2
 80007de:	011b      	lsls	r3, r3, #4
 80007e0:	1a9b      	subs	r3, r3, r2
 80007e2:	011b      	lsls	r3, r3, #4
 80007e4:	461a      	mov	r2, r3
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	4413      	add	r3, r2
 80007ea:	4619      	mov	r1, r3
 80007ec:	f001 fd76 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	3301      	adds	r3, #1
 80007f4:	61bb      	str	r3, [r7, #24]
 80007f6:	7dfb      	ldrb	r3, [r7, #23]
 80007f8:	69ba      	ldr	r2, [r7, #24]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	ddce      	ble.n	800079c <LCD_DrawEBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3301      	adds	r3, #1
 8000802:	61fb      	str	r3, [r7, #28]
 8000804:	7dfb      	ldrb	r3, [r7, #23]
 8000806:	69fa      	ldr	r2, [r7, #28]
 8000808:	429a      	cmp	r2, r3
 800080a:	ddc4      	ble.n	8000796 <LCD_DrawEBig+0x1a>
			}
		}
	}
}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000000 	.word	0x20000000

08000818 <LCD_DrawFBig>:

void LCD_DrawFBig(uint16_t x0, uint16_t y0) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b088      	sub	sp, #32
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	460a      	mov	r2, r1
 8000822:	80fb      	strh	r3, [r7, #6]
 8000824:	4613      	mov	r3, r2
 8000826:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000828:	230f      	movs	r3, #15
 800082a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 800082c:	2300      	movs	r3, #0
 800082e:	61fb      	str	r3, [r7, #28]
 8000830:	e030      	b.n	8000894 <LCD_DrawFBig+0x7c>
		for(int dx = 0; dx <=width; dx++){
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
 8000836:	e026      	b.n	8000886 <LCD_DrawFBig+0x6e>
			if ((dx <= 3) || (dy <= 3) || (dy >= 6 && dy <= 9 && dx <= 11)) {
 8000838:	69bb      	ldr	r3, [r7, #24]
 800083a:	2b03      	cmp	r3, #3
 800083c:	dd0b      	ble.n	8000856 <LCD_DrawFBig+0x3e>
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	2b03      	cmp	r3, #3
 8000842:	dd08      	ble.n	8000856 <LCD_DrawFBig+0x3e>
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	2b05      	cmp	r3, #5
 8000848:	dd1a      	ble.n	8000880 <LCD_DrawFBig+0x68>
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	2b09      	cmp	r3, #9
 800084e:	dc17      	bgt.n	8000880 <LCD_DrawFBig+0x68>
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	2b0b      	cmp	r3, #11
 8000854:	dc14      	bgt.n	8000880 <LCD_DrawFBig+0x68>
				int y = y0 + dy;
 8000856:	88bb      	ldrh	r3, [r7, #4]
 8000858:	69fa      	ldr	r2, [r7, #28]
 800085a:	4413      	add	r3, r2
 800085c:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800085e:	88fb      	ldrh	r3, [r7, #6]
 8000860:	69ba      	ldr	r2, [r7, #24]
 8000862:	4413      	add	r3, r2
 8000864:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <LCD_DrawFBig+0x8c>)
 8000868:	7818      	ldrb	r0, [r3, #0]
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	4613      	mov	r3, r2
 800086e:	011b      	lsls	r3, r3, #4
 8000870:	1a9b      	subs	r3, r3, r2
 8000872:	011b      	lsls	r3, r3, #4
 8000874:	461a      	mov	r2, r3
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	4413      	add	r3, r2
 800087a:	4619      	mov	r1, r3
 800087c:	f001 fd2e 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000880:	69bb      	ldr	r3, [r7, #24]
 8000882:	3301      	adds	r3, #1
 8000884:	61bb      	str	r3, [r7, #24]
 8000886:	7dfb      	ldrb	r3, [r7, #23]
 8000888:	69ba      	ldr	r2, [r7, #24]
 800088a:	429a      	cmp	r2, r3
 800088c:	ddd4      	ble.n	8000838 <LCD_DrawFBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	3301      	adds	r3, #1
 8000892:	61fb      	str	r3, [r7, #28]
 8000894:	7dfb      	ldrb	r3, [r7, #23]
 8000896:	69fa      	ldr	r2, [r7, #28]
 8000898:	429a      	cmp	r2, r3
 800089a:	ddca      	ble.n	8000832 <LCD_DrawFBig+0x1a>
			}
		}
	}
}
 800089c:	bf00      	nop
 800089e:	3720      	adds	r7, #32
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000000 	.word	0x20000000

080008a8 <LCD_DrawGBig>:

void LCD_DrawGBig(uint16_t x0, uint16_t y0) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	460a      	mov	r2, r1
 80008b2:	80fb      	strh	r3, [r7, #6]
 80008b4:	4613      	mov	r3, r2
 80008b6:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80008b8:	230f      	movs	r3, #15
 80008ba:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
 80008c0:	e039      	b.n	8000936 <LCD_DrawGBig+0x8e>
		for(int dx = 0; dx <=width; dx++){
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]
 80008c6:	e02f      	b.n	8000928 <LCD_DrawGBig+0x80>
			if ((dx <= 3) || (dy <= 3) || (dy >= 12) || (dy >= 6 && dx >= 12) || (dy >= 6 && dy <= 9 && dx >= 5)) {
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	2b03      	cmp	r3, #3
 80008cc:	dd14      	ble.n	80008f8 <LCD_DrawGBig+0x50>
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	2b03      	cmp	r3, #3
 80008d2:	dd11      	ble.n	80008f8 <LCD_DrawGBig+0x50>
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	2b0b      	cmp	r3, #11
 80008d8:	dc0e      	bgt.n	80008f8 <LCD_DrawGBig+0x50>
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	2b05      	cmp	r3, #5
 80008de:	dd02      	ble.n	80008e6 <LCD_DrawGBig+0x3e>
 80008e0:	69bb      	ldr	r3, [r7, #24]
 80008e2:	2b0b      	cmp	r3, #11
 80008e4:	dc08      	bgt.n	80008f8 <LCD_DrawGBig+0x50>
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	2b05      	cmp	r3, #5
 80008ea:	dd1a      	ble.n	8000922 <LCD_DrawGBig+0x7a>
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	2b09      	cmp	r3, #9
 80008f0:	dc17      	bgt.n	8000922 <LCD_DrawGBig+0x7a>
 80008f2:	69bb      	ldr	r3, [r7, #24]
 80008f4:	2b04      	cmp	r3, #4
 80008f6:	dd14      	ble.n	8000922 <LCD_DrawGBig+0x7a>
				int y = y0 + dy;
 80008f8:	88bb      	ldrh	r3, [r7, #4]
 80008fa:	69fa      	ldr	r2, [r7, #28]
 80008fc:	4413      	add	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	4413      	add	r3, r2
 8000906:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <LCD_DrawGBig+0xa0>)
 800090a:	7818      	ldrb	r0, [r3, #0]
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	4613      	mov	r3, r2
 8000910:	011b      	lsls	r3, r3, #4
 8000912:	1a9b      	subs	r3, r3, r2
 8000914:	011b      	lsls	r3, r3, #4
 8000916:	461a      	mov	r2, r3
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	4413      	add	r3, r2
 800091c:	4619      	mov	r1, r3
 800091e:	f001 fcdd 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000922:	69bb      	ldr	r3, [r7, #24]
 8000924:	3301      	adds	r3, #1
 8000926:	61bb      	str	r3, [r7, #24]
 8000928:	7dfb      	ldrb	r3, [r7, #23]
 800092a:	69ba      	ldr	r2, [r7, #24]
 800092c:	429a      	cmp	r2, r3
 800092e:	ddcb      	ble.n	80008c8 <LCD_DrawGBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	3301      	adds	r3, #1
 8000934:	61fb      	str	r3, [r7, #28]
 8000936:	7dfb      	ldrb	r3, [r7, #23]
 8000938:	69fa      	ldr	r2, [r7, #28]
 800093a:	429a      	cmp	r2, r3
 800093c:	ddc1      	ble.n	80008c2 <LCD_DrawGBig+0x1a>
			}
		}
	}
}
 800093e:	bf00      	nop
 8000940:	3720      	adds	r7, #32
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000000 	.word	0x20000000

0800094c <LCD_DrawHBig>:

void LCD_DrawHBig(uint16_t x0, uint16_t y0) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	460a      	mov	r2, r1
 8000956:	80fb      	strh	r3, [r7, #6]
 8000958:	4613      	mov	r3, r2
 800095a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 800095c:	230f      	movs	r3, #15
 800095e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
 8000964:	e033      	b.n	80009ce <LCD_DrawHBig+0x82>
		for(int dx = 0; dx <=width; dx++){
 8000966:	2300      	movs	r3, #0
 8000968:	61bb      	str	r3, [r7, #24]
 800096a:	e029      	b.n	80009c0 <LCD_DrawHBig+0x74>
			if ((dx <= 3 || dx >= 12) || (dy == 6 || dy == 7 || dy == 8 || dy == 9)) {
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	2b03      	cmp	r3, #3
 8000970:	dd0e      	ble.n	8000990 <LCD_DrawHBig+0x44>
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	2b0b      	cmp	r3, #11
 8000976:	dc0b      	bgt.n	8000990 <LCD_DrawHBig+0x44>
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	2b06      	cmp	r3, #6
 800097c:	d008      	beq.n	8000990 <LCD_DrawHBig+0x44>
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	2b07      	cmp	r3, #7
 8000982:	d005      	beq.n	8000990 <LCD_DrawHBig+0x44>
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	2b08      	cmp	r3, #8
 8000988:	d002      	beq.n	8000990 <LCD_DrawHBig+0x44>
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	2b09      	cmp	r3, #9
 800098e:	d114      	bne.n	80009ba <LCD_DrawHBig+0x6e>
				int y = y0 + dy;
 8000990:	88bb      	ldrh	r3, [r7, #4]
 8000992:	69fa      	ldr	r2, [r7, #28]
 8000994:	4413      	add	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000998:	88fb      	ldrh	r3, [r7, #6]
 800099a:	69ba      	ldr	r2, [r7, #24]
 800099c:	4413      	add	r3, r2
 800099e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <LCD_DrawHBig+0x94>)
 80009a2:	7818      	ldrb	r0, [r3, #0]
 80009a4:	693a      	ldr	r2, [r7, #16]
 80009a6:	4613      	mov	r3, r2
 80009a8:	011b      	lsls	r3, r3, #4
 80009aa:	1a9b      	subs	r3, r3, r2
 80009ac:	011b      	lsls	r3, r3, #4
 80009ae:	461a      	mov	r2, r3
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	4413      	add	r3, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	f001 fc91 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	3301      	adds	r3, #1
 80009be:	61bb      	str	r3, [r7, #24]
 80009c0:	7dfb      	ldrb	r3, [r7, #23]
 80009c2:	69ba      	ldr	r2, [r7, #24]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	ddd1      	ble.n	800096c <LCD_DrawHBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	3301      	adds	r3, #1
 80009cc:	61fb      	str	r3, [r7, #28]
 80009ce:	7dfb      	ldrb	r3, [r7, #23]
 80009d0:	69fa      	ldr	r2, [r7, #28]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	ddc7      	ble.n	8000966 <LCD_DrawHBig+0x1a>
			}
		}
	}
}
 80009d6:	bf00      	nop
 80009d8:	3720      	adds	r7, #32
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000000 	.word	0x20000000

080009e4 <LCD_DrawIBig>:

void LCD_DrawIBig(uint16_t x0, uint16_t y0) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	460a      	mov	r2, r1
 80009ee:	80fb      	strh	r3, [r7, #6]
 80009f0:	4613      	mov	r3, r2
 80009f2:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80009f4:	230f      	movs	r3, #15
 80009f6:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
 80009fc:	e02d      	b.n	8000a5a <LCD_DrawIBig+0x76>
		for(int dx = 0; dx <=width; dx++){
 80009fe:	2300      	movs	r3, #0
 8000a00:	61bb      	str	r3, [r7, #24]
 8000a02:	e023      	b.n	8000a4c <LCD_DrawIBig+0x68>
			if ((dy <= 3) || (dy >= 12) || (dx >= 6 && dx <= 9)) {
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	2b03      	cmp	r3, #3
 8000a08:	dd08      	ble.n	8000a1c <LCD_DrawIBig+0x38>
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	2b0b      	cmp	r3, #11
 8000a0e:	dc05      	bgt.n	8000a1c <LCD_DrawIBig+0x38>
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	2b05      	cmp	r3, #5
 8000a14:	dd17      	ble.n	8000a46 <LCD_DrawIBig+0x62>
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	2b09      	cmp	r3, #9
 8000a1a:	dc14      	bgt.n	8000a46 <LCD_DrawIBig+0x62>
				int y = y0 + dy;
 8000a1c:	88bb      	ldrh	r3, [r7, #4]
 8000a1e:	69fa      	ldr	r2, [r7, #28]
 8000a20:	4413      	add	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000a24:	88fb      	ldrh	r3, [r7, #6]
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	4413      	add	r3, r2
 8000a2a:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <LCD_DrawIBig+0x88>)
 8000a2e:	7818      	ldrb	r0, [r3, #0]
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	4613      	mov	r3, r2
 8000a34:	011b      	lsls	r3, r3, #4
 8000a36:	1a9b      	subs	r3, r3, r2
 8000a38:	011b      	lsls	r3, r3, #4
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4413      	add	r3, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	f001 fc4b 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	61bb      	str	r3, [r7, #24]
 8000a4c:	7dfb      	ldrb	r3, [r7, #23]
 8000a4e:	69ba      	ldr	r2, [r7, #24]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	ddd7      	ble.n	8000a04 <LCD_DrawIBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	3301      	adds	r3, #1
 8000a58:	61fb      	str	r3, [r7, #28]
 8000a5a:	7dfb      	ldrb	r3, [r7, #23]
 8000a5c:	69fa      	ldr	r2, [r7, #28]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	ddcd      	ble.n	80009fe <LCD_DrawIBig+0x1a>
			}
		}
	}
}
 8000a62:	bf00      	nop
 8000a64:	3720      	adds	r7, #32
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000000 	.word	0x20000000

08000a70 <LCD_DrawJBig>:

void LCD_DrawJBig(uint16_t x0, uint16_t y0) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	460a      	mov	r2, r1
 8000a7a:	80fb      	strh	r3, [r7, #6]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000a80:	230f      	movs	r3, #15
 8000a82:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
 8000a88:	e030      	b.n	8000aec <LCD_DrawJBig+0x7c>
		for(int dx = 0; dx <=width; dx++){
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61bb      	str	r3, [r7, #24]
 8000a8e:	e026      	b.n	8000ade <LCD_DrawJBig+0x6e>
			if ((dy <= 3) || (dx >= 6 && dx <= 9) || (dx <= 9 && dy >= 12)) {
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	dd0b      	ble.n	8000aae <LCD_DrawJBig+0x3e>
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	2b05      	cmp	r3, #5
 8000a9a:	dd02      	ble.n	8000aa2 <LCD_DrawJBig+0x32>
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	2b09      	cmp	r3, #9
 8000aa0:	dd05      	ble.n	8000aae <LCD_DrawJBig+0x3e>
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	2b09      	cmp	r3, #9
 8000aa6:	dc17      	bgt.n	8000ad8 <LCD_DrawJBig+0x68>
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	2b0b      	cmp	r3, #11
 8000aac:	dd14      	ble.n	8000ad8 <LCD_DrawJBig+0x68>
				int y = y0 + dy;
 8000aae:	88bb      	ldrh	r3, [r7, #4]
 8000ab0:	69fa      	ldr	r2, [r7, #28]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000ab6:	88fb      	ldrh	r3, [r7, #6]
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	4413      	add	r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <LCD_DrawJBig+0x8c>)
 8000ac0:	7818      	ldrb	r0, [r3, #0]
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	011b      	lsls	r3, r3, #4
 8000ac8:	1a9b      	subs	r3, r3, r2
 8000aca:	011b      	lsls	r3, r3, #4
 8000acc:	461a      	mov	r2, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	f001 fc02 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	3301      	adds	r3, #1
 8000adc:	61bb      	str	r3, [r7, #24]
 8000ade:	7dfb      	ldrb	r3, [r7, #23]
 8000ae0:	69ba      	ldr	r2, [r7, #24]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	ddd4      	ble.n	8000a90 <LCD_DrawJBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	61fb      	str	r3, [r7, #28]
 8000aec:	7dfb      	ldrb	r3, [r7, #23]
 8000aee:	69fa      	ldr	r2, [r7, #28]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	ddca      	ble.n	8000a8a <LCD_DrawJBig+0x1a>
			}
		}
	}
}
 8000af4:	bf00      	nop
 8000af6:	3720      	adds	r7, #32
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000000 	.word	0x20000000

08000b00 <LCD_DrawKBig>:

void LCD_DrawKBig(uint16_t x0, uint16_t y0) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b088      	sub	sp, #32
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	460a      	mov	r2, r1
 8000b0a:	80fb      	strh	r3, [r7, #6]
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000b10:	230f      	movs	r3, #15
 8000b12:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
 8000b18:	e054      	b.n	8000bc4 <LCD_DrawKBig+0xc4>
		for(int dx = 0; dx <=width; dx++){
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	e04a      	b.n	8000bb6 <LCD_DrawKBig+0xb6>
			if ((dx <= 3) || (dx >= 12 && dy >= 12) || (dx >= 8 && dx <= 11 && dy >= 8 && dy <= 11) || (dx >= 4 && dx <= 7 && dy >= 4 && dy <= 7) || (dx >= 11 && dy <= 3) || (dx >= 8 && dx <= 11 && dy >= 4 && dy <= 7)) {
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	2b03      	cmp	r3, #3
 8000b24:	dd2f      	ble.n	8000b86 <LCD_DrawKBig+0x86>
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	2b0b      	cmp	r3, #11
 8000b2a:	dd02      	ble.n	8000b32 <LCD_DrawKBig+0x32>
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	2b0b      	cmp	r3, #11
 8000b30:	dc29      	bgt.n	8000b86 <LCD_DrawKBig+0x86>
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	2b07      	cmp	r3, #7
 8000b36:	dd08      	ble.n	8000b4a <LCD_DrawKBig+0x4a>
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	2b0b      	cmp	r3, #11
 8000b3c:	dc05      	bgt.n	8000b4a <LCD_DrawKBig+0x4a>
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	2b07      	cmp	r3, #7
 8000b42:	dd02      	ble.n	8000b4a <LCD_DrawKBig+0x4a>
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	2b0b      	cmp	r3, #11
 8000b48:	dd1d      	ble.n	8000b86 <LCD_DrawKBig+0x86>
 8000b4a:	69bb      	ldr	r3, [r7, #24]
 8000b4c:	2b03      	cmp	r3, #3
 8000b4e:	dd08      	ble.n	8000b62 <LCD_DrawKBig+0x62>
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	2b07      	cmp	r3, #7
 8000b54:	dc05      	bgt.n	8000b62 <LCD_DrawKBig+0x62>
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	dd02      	ble.n	8000b62 <LCD_DrawKBig+0x62>
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	2b07      	cmp	r3, #7
 8000b60:	dd11      	ble.n	8000b86 <LCD_DrawKBig+0x86>
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	2b0a      	cmp	r3, #10
 8000b66:	dd02      	ble.n	8000b6e <LCD_DrawKBig+0x6e>
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	2b03      	cmp	r3, #3
 8000b6c:	dd0b      	ble.n	8000b86 <LCD_DrawKBig+0x86>
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	2b07      	cmp	r3, #7
 8000b72:	dd1d      	ble.n	8000bb0 <LCD_DrawKBig+0xb0>
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	2b0b      	cmp	r3, #11
 8000b78:	dc1a      	bgt.n	8000bb0 <LCD_DrawKBig+0xb0>
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	dd17      	ble.n	8000bb0 <LCD_DrawKBig+0xb0>
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	2b07      	cmp	r3, #7
 8000b84:	dc14      	bgt.n	8000bb0 <LCD_DrawKBig+0xb0>
				int y = y0 + dy;
 8000b86:	88bb      	ldrh	r3, [r7, #4]
 8000b88:	69fa      	ldr	r2, [r7, #28]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	69ba      	ldr	r2, [r7, #24]
 8000b92:	4413      	add	r3, r2
 8000b94:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <LCD_DrawKBig+0xd4>)
 8000b98:	7818      	ldrb	r0, [r3, #0]
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	011b      	lsls	r3, r3, #4
 8000ba0:	1a9b      	subs	r3, r3, r2
 8000ba2:	011b      	lsls	r3, r3, #4
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4413      	add	r3, r2
 8000baa:	4619      	mov	r1, r3
 8000bac:	f001 fb96 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	61bb      	str	r3, [r7, #24]
 8000bb6:	7dfb      	ldrb	r3, [r7, #23]
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	ddb0      	ble.n	8000b20 <LCD_DrawKBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	61fb      	str	r3, [r7, #28]
 8000bc4:	7dfb      	ldrb	r3, [r7, #23]
 8000bc6:	69fa      	ldr	r2, [r7, #28]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	dda6      	ble.n	8000b1a <LCD_DrawKBig+0x1a>
			}
		}
	}
}
 8000bcc:	bf00      	nop
 8000bce:	3720      	adds	r7, #32
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000000 	.word	0x20000000

08000bd8 <LCD_DrawLBig>:

void LCD_DrawLBig(uint16_t x0, uint16_t y0) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	460a      	mov	r2, r1
 8000be2:	80fb      	strh	r3, [r7, #6]
 8000be4:	4613      	mov	r3, r2
 8000be6:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000be8:	230f      	movs	r3, #15
 8000bea:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
 8000bf0:	e027      	b.n	8000c42 <LCD_DrawLBig+0x6a>
		for(int dx = 0; dx <=width; dx++){
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
 8000bf6:	e01d      	b.n	8000c34 <LCD_DrawLBig+0x5c>
			if ((dx <= 3) || (dy >= 12)) {
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	dd02      	ble.n	8000c04 <LCD_DrawLBig+0x2c>
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	2b0b      	cmp	r3, #11
 8000c02:	dd14      	ble.n	8000c2e <LCD_DrawLBig+0x56>
				int y = y0 + dy;
 8000c04:	88bb      	ldrh	r3, [r7, #4]
 8000c06:	69fa      	ldr	r2, [r7, #28]
 8000c08:	4413      	add	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000c0c:	88fb      	ldrh	r3, [r7, #6]
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	4413      	add	r3, r2
 8000c12:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000c14:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <LCD_DrawLBig+0x7c>)
 8000c16:	7818      	ldrb	r0, [r3, #0]
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	011b      	lsls	r3, r3, #4
 8000c1e:	1a9b      	subs	r3, r3, r2
 8000c20:	011b      	lsls	r3, r3, #4
 8000c22:	461a      	mov	r2, r3
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4413      	add	r3, r2
 8000c28:	4619      	mov	r1, r3
 8000c2a:	f001 fb57 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	3301      	adds	r3, #1
 8000c32:	61bb      	str	r3, [r7, #24]
 8000c34:	7dfb      	ldrb	r3, [r7, #23]
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	dddd      	ble.n	8000bf8 <LCD_DrawLBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000c3c:	69fb      	ldr	r3, [r7, #28]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	61fb      	str	r3, [r7, #28]
 8000c42:	7dfb      	ldrb	r3, [r7, #23]
 8000c44:	69fa      	ldr	r2, [r7, #28]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	ddd3      	ble.n	8000bf2 <LCD_DrawLBig+0x1a>
			}
		}
	}
}
 8000c4a:	bf00      	nop
 8000c4c:	3720      	adds	r7, #32
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000000 	.word	0x20000000

08000c58 <LCD_DrawMBig>:

void LCD_DrawMBig(uint16_t x0, uint16_t y0) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	460a      	mov	r2, r1
 8000c62:	80fb      	strh	r3, [r7, #6]
 8000c64:	4613      	mov	r3, r2
 8000c66:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000c68:	230f      	movs	r3, #15
 8000c6a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
 8000c70:	e04b      	b.n	8000d0a <LCD_DrawMBig+0xb2>
		for(int dx = 0; dx <=width; dx++){
 8000c72:	2300      	movs	r3, #0
 8000c74:	61bb      	str	r3, [r7, #24]
 8000c76:	e041      	b.n	8000cfc <LCD_DrawMBig+0xa4>
			if ((dx <= 3) || (dx >= 12) || ((dx >= 6 && dx <= 9) && (dy >= 6 && dy <= 9)) || ((dx >= 3 && dx <= 6) && (dy >= 3 && dy <= 6)) || ((dx >= 9 && dx <= 12) && (dy >= 3 && dy <= 6))) {
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	2b03      	cmp	r3, #3
 8000c7c:	dd26      	ble.n	8000ccc <LCD_DrawMBig+0x74>
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	2b0b      	cmp	r3, #11
 8000c82:	dc23      	bgt.n	8000ccc <LCD_DrawMBig+0x74>
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	2b05      	cmp	r3, #5
 8000c88:	dd08      	ble.n	8000c9c <LCD_DrawMBig+0x44>
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	2b09      	cmp	r3, #9
 8000c8e:	dc05      	bgt.n	8000c9c <LCD_DrawMBig+0x44>
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	2b05      	cmp	r3, #5
 8000c94:	dd02      	ble.n	8000c9c <LCD_DrawMBig+0x44>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	2b09      	cmp	r3, #9
 8000c9a:	dd17      	ble.n	8000ccc <LCD_DrawMBig+0x74>
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	dd08      	ble.n	8000cb4 <LCD_DrawMBig+0x5c>
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	2b06      	cmp	r3, #6
 8000ca6:	dc05      	bgt.n	8000cb4 <LCD_DrawMBig+0x5c>
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	dd02      	ble.n	8000cb4 <LCD_DrawMBig+0x5c>
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	2b06      	cmp	r3, #6
 8000cb2:	dd0b      	ble.n	8000ccc <LCD_DrawMBig+0x74>
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	2b08      	cmp	r3, #8
 8000cb8:	dd1d      	ble.n	8000cf6 <LCD_DrawMBig+0x9e>
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	2b0c      	cmp	r3, #12
 8000cbe:	dc1a      	bgt.n	8000cf6 <LCD_DrawMBig+0x9e>
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	dd17      	ble.n	8000cf6 <LCD_DrawMBig+0x9e>
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	2b06      	cmp	r3, #6
 8000cca:	dc14      	bgt.n	8000cf6 <LCD_DrawMBig+0x9e>
				int y = y0 + dy;
 8000ccc:	88bb      	ldrh	r3, [r7, #4]
 8000cce:	69fa      	ldr	r2, [r7, #28]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000cd4:	88fb      	ldrh	r3, [r7, #6]
 8000cd6:	69ba      	ldr	r2, [r7, #24]
 8000cd8:	4413      	add	r3, r2
 8000cda:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <LCD_DrawMBig+0xc4>)
 8000cde:	7818      	ldrb	r0, [r3, #0]
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	011b      	lsls	r3, r3, #4
 8000ce6:	1a9b      	subs	r3, r3, r2
 8000ce8:	011b      	lsls	r3, r3, #4
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4413      	add	r3, r2
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	f001 faf3 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	61bb      	str	r3, [r7, #24]
 8000cfc:	7dfb      	ldrb	r3, [r7, #23]
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	ddb9      	ble.n	8000c78 <LCD_DrawMBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	3301      	adds	r3, #1
 8000d08:	61fb      	str	r3, [r7, #28]
 8000d0a:	7dfb      	ldrb	r3, [r7, #23]
 8000d0c:	69fa      	ldr	r2, [r7, #28]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	ddaf      	ble.n	8000c72 <LCD_DrawMBig+0x1a>
			}
		}
	}
}
 8000d12:	bf00      	nop
 8000d14:	3720      	adds	r7, #32
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000000 	.word	0x20000000

08000d20 <LCD_DrawNBig>:

void LCD_DrawNBig(uint16_t x0, uint16_t y0) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	460a      	mov	r2, r1
 8000d2a:	80fb      	strh	r3, [r7, #6]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000d30:	230f      	movs	r3, #15
 8000d32:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
 8000d38:	e04b      	b.n	8000dd2 <LCD_DrawNBig+0xb2>
		for(int dx = 0; dx <=width; dx++){
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
 8000d3e:	e041      	b.n	8000dc4 <LCD_DrawNBig+0xa4>
			if ((dx <= 3) || (dx >= 12) || ((dx >= 6 && dx <= 9) && (dy >= 6 && dy <= 9)) || ((dx >= 3 && dx <= 6) && (dy >= 3 && dy <= 6)) || ((dx >= 9 && dx <= 12) && (dy >= 9 && dy <= 12))) {
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	2b03      	cmp	r3, #3
 8000d44:	dd26      	ble.n	8000d94 <LCD_DrawNBig+0x74>
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	2b0b      	cmp	r3, #11
 8000d4a:	dc23      	bgt.n	8000d94 <LCD_DrawNBig+0x74>
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	2b05      	cmp	r3, #5
 8000d50:	dd08      	ble.n	8000d64 <LCD_DrawNBig+0x44>
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	2b09      	cmp	r3, #9
 8000d56:	dc05      	bgt.n	8000d64 <LCD_DrawNBig+0x44>
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	2b05      	cmp	r3, #5
 8000d5c:	dd02      	ble.n	8000d64 <LCD_DrawNBig+0x44>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	2b09      	cmp	r3, #9
 8000d62:	dd17      	ble.n	8000d94 <LCD_DrawNBig+0x74>
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	dd08      	ble.n	8000d7c <LCD_DrawNBig+0x5c>
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	2b06      	cmp	r3, #6
 8000d6e:	dc05      	bgt.n	8000d7c <LCD_DrawNBig+0x5c>
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	dd02      	ble.n	8000d7c <LCD_DrawNBig+0x5c>
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	2b06      	cmp	r3, #6
 8000d7a:	dd0b      	ble.n	8000d94 <LCD_DrawNBig+0x74>
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	2b08      	cmp	r3, #8
 8000d80:	dd1d      	ble.n	8000dbe <LCD_DrawNBig+0x9e>
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	2b0c      	cmp	r3, #12
 8000d86:	dc1a      	bgt.n	8000dbe <LCD_DrawNBig+0x9e>
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	2b08      	cmp	r3, #8
 8000d8c:	dd17      	ble.n	8000dbe <LCD_DrawNBig+0x9e>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	2b0c      	cmp	r3, #12
 8000d92:	dc14      	bgt.n	8000dbe <LCD_DrawNBig+0x9e>
				int y = y0 + dy;
 8000d94:	88bb      	ldrh	r3, [r7, #4]
 8000d96:	69fa      	ldr	r2, [r7, #28]
 8000d98:	4413      	add	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000d9c:	88fb      	ldrh	r3, [r7, #6]
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4413      	add	r3, r2
 8000da2:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <LCD_DrawNBig+0xc4>)
 8000da6:	7818      	ldrb	r0, [r3, #0]
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4613      	mov	r3, r2
 8000dac:	011b      	lsls	r3, r3, #4
 8000dae:	1a9b      	subs	r3, r3, r2
 8000db0:	011b      	lsls	r3, r3, #4
 8000db2:	461a      	mov	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4413      	add	r3, r2
 8000db8:	4619      	mov	r1, r3
 8000dba:	f001 fa8f 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	61bb      	str	r3, [r7, #24]
 8000dc4:	7dfb      	ldrb	r3, [r7, #23]
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	ddb9      	ble.n	8000d40 <LCD_DrawNBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	61fb      	str	r3, [r7, #28]
 8000dd2:	7dfb      	ldrb	r3, [r7, #23]
 8000dd4:	69fa      	ldr	r2, [r7, #28]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	ddaf      	ble.n	8000d3a <LCD_DrawNBig+0x1a>
			}
		}
	}
}
 8000dda:	bf00      	nop
 8000ddc:	3720      	adds	r7, #32
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000000 	.word	0x20000000

08000de8 <LCD_DrawOBig>:

void LCD_DrawOBig(uint16_t x0, uint16_t y0) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	460a      	mov	r2, r1
 8000df2:	80fb      	strh	r3, [r7, #6]
 8000df4:	4613      	mov	r3, r2
 8000df6:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000df8:	230f      	movs	r3, #15
 8000dfa:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	e02d      	b.n	8000e5e <LCD_DrawOBig+0x76>
		for(int dx = 0; dx <=width; dx++){
 8000e02:	2300      	movs	r3, #0
 8000e04:	61bb      	str	r3, [r7, #24]
 8000e06:	e023      	b.n	8000e50 <LCD_DrawOBig+0x68>
			if ((dx <= 3 || dx >= 12) || (dy <= 3 || dy >= 12)) {
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	dd08      	ble.n	8000e20 <LCD_DrawOBig+0x38>
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	2b0b      	cmp	r3, #11
 8000e12:	dc05      	bgt.n	8000e20 <LCD_DrawOBig+0x38>
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	dd02      	ble.n	8000e20 <LCD_DrawOBig+0x38>
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	2b0b      	cmp	r3, #11
 8000e1e:	dd14      	ble.n	8000e4a <LCD_DrawOBig+0x62>
				int y = y0 + dy;
 8000e20:	88bb      	ldrh	r3, [r7, #4]
 8000e22:	69fa      	ldr	r2, [r7, #28]
 8000e24:	4413      	add	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000e28:	88fb      	ldrh	r3, [r7, #6]
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <LCD_DrawOBig+0x88>)
 8000e32:	7818      	ldrb	r0, [r3, #0]
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4613      	mov	r3, r2
 8000e38:	011b      	lsls	r3, r3, #4
 8000e3a:	1a9b      	subs	r3, r3, r2
 8000e3c:	011b      	lsls	r3, r3, #4
 8000e3e:	461a      	mov	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4413      	add	r3, r2
 8000e44:	4619      	mov	r1, r3
 8000e46:	f001 fa49 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	61bb      	str	r3, [r7, #24]
 8000e50:	7dfb      	ldrb	r3, [r7, #23]
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	ddd7      	ble.n	8000e08 <LCD_DrawOBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	61fb      	str	r3, [r7, #28]
 8000e5e:	7dfb      	ldrb	r3, [r7, #23]
 8000e60:	69fa      	ldr	r2, [r7, #28]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	ddcd      	ble.n	8000e02 <LCD_DrawOBig+0x1a>
			}
		}
	}
}
 8000e66:	bf00      	nop
 8000e68:	3720      	adds	r7, #32
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000000 	.word	0x20000000

08000e74 <LCD_DrawPBig>:

void LCD_DrawPBig(uint16_t x0, uint16_t y0) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	460a      	mov	r2, r1
 8000e7e:	80fb      	strh	r3, [r7, #6]
 8000e80:	4613      	mov	r3, r2
 8000e82:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000e84:	230f      	movs	r3, #15
 8000e86:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
 8000e8c:	e03c      	b.n	8000f08 <LCD_DrawPBig+0x94>
		for(int dx = 0; dx <=width; dx++){
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
 8000e92:	e032      	b.n	8000efa <LCD_DrawPBig+0x86>
			if ((dx <= 3) || (dy <= 3 && dx <= 11) || ((dy >= 6 && dy <= 9) && dx <= 11) || (dx >= 12 && (dy >= 3 && dy <= 6))) {
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	dd17      	ble.n	8000eca <LCD_DrawPBig+0x56>
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	dc02      	bgt.n	8000ea6 <LCD_DrawPBig+0x32>
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	2b0b      	cmp	r3, #11
 8000ea4:	dd11      	ble.n	8000eca <LCD_DrawPBig+0x56>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	2b05      	cmp	r3, #5
 8000eaa:	dd05      	ble.n	8000eb8 <LCD_DrawPBig+0x44>
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	2b09      	cmp	r3, #9
 8000eb0:	dc02      	bgt.n	8000eb8 <LCD_DrawPBig+0x44>
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	2b0b      	cmp	r3, #11
 8000eb6:	dd08      	ble.n	8000eca <LCD_DrawPBig+0x56>
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	2b0b      	cmp	r3, #11
 8000ebc:	dd1a      	ble.n	8000ef4 <LCD_DrawPBig+0x80>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	dd17      	ble.n	8000ef4 <LCD_DrawPBig+0x80>
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	dc14      	bgt.n	8000ef4 <LCD_DrawPBig+0x80>
				int y = y0 + dy;
 8000eca:	88bb      	ldrh	r3, [r7, #4]
 8000ecc:	69fa      	ldr	r2, [r7, #28]
 8000ece:	4413      	add	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <LCD_DrawPBig+0xa4>)
 8000edc:	7818      	ldrb	r0, [r3, #0]
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	011b      	lsls	r3, r3, #4
 8000ee4:	1a9b      	subs	r3, r3, r2
 8000ee6:	011b      	lsls	r3, r3, #4
 8000ee8:	461a      	mov	r2, r3
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4413      	add	r3, r2
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f001 f9f4 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	61bb      	str	r3, [r7, #24]
 8000efa:	7dfb      	ldrb	r3, [r7, #23]
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	ddc8      	ble.n	8000e94 <LCD_DrawPBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3301      	adds	r3, #1
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	7dfb      	ldrb	r3, [r7, #23]
 8000f0a:	69fa      	ldr	r2, [r7, #28]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	ddbe      	ble.n	8000e8e <LCD_DrawPBig+0x1a>
			}
		}
	}
}
 8000f10:	bf00      	nop
 8000f12:	3720      	adds	r7, #32
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000000 	.word	0x20000000

08000f1c <LCD_DrawQBig>:

void LCD_DrawQBig(uint16_t x0, uint16_t y0) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	460a      	mov	r2, r1
 8000f26:	80fb      	strh	r3, [r7, #6]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
 8000f34:	e039      	b.n	8000faa <LCD_DrawQBig+0x8e>
		for(int dx = 0; dx <=width; dx++){
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
 8000f3a:	e02f      	b.n	8000f9c <LCD_DrawQBig+0x80>
			if ((dx <= 3)||(dx >= 12) || (dy <= 3) || (dy >= 12) || (dx >= 8 && dx <= 11 && dy >= 8 && dy <= 11)) {
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	dd14      	ble.n	8000f6c <LCD_DrawQBig+0x50>
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	2b0b      	cmp	r3, #11
 8000f46:	dc11      	bgt.n	8000f6c <LCD_DrawQBig+0x50>
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	2b03      	cmp	r3, #3
 8000f4c:	dd0e      	ble.n	8000f6c <LCD_DrawQBig+0x50>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	2b0b      	cmp	r3, #11
 8000f52:	dc0b      	bgt.n	8000f6c <LCD_DrawQBig+0x50>
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	2b07      	cmp	r3, #7
 8000f58:	dd1d      	ble.n	8000f96 <LCD_DrawQBig+0x7a>
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	2b0b      	cmp	r3, #11
 8000f5e:	dc1a      	bgt.n	8000f96 <LCD_DrawQBig+0x7a>
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	2b07      	cmp	r3, #7
 8000f64:	dd17      	ble.n	8000f96 <LCD_DrawQBig+0x7a>
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	2b0b      	cmp	r3, #11
 8000f6a:	dc14      	bgt.n	8000f96 <LCD_DrawQBig+0x7a>
				int y = y0 + dy;
 8000f6c:	88bb      	ldrh	r3, [r7, #4]
 8000f6e:	69fa      	ldr	r2, [r7, #28]
 8000f70:	4413      	add	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000f74:	88fb      	ldrh	r3, [r7, #6]
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4413      	add	r3, r2
 8000f7a:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <LCD_DrawQBig+0xa0>)
 8000f7e:	7818      	ldrb	r0, [r3, #0]
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4613      	mov	r3, r2
 8000f84:	011b      	lsls	r3, r3, #4
 8000f86:	1a9b      	subs	r3, r3, r2
 8000f88:	011b      	lsls	r3, r3, #4
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4619      	mov	r1, r3
 8000f92:	f001 f9a3 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	61bb      	str	r3, [r7, #24]
 8000f9c:	7dfb      	ldrb	r3, [r7, #23]
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	ddcb      	ble.n	8000f3c <LCD_DrawQBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	61fb      	str	r3, [r7, #28]
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
 8000fac:	69fa      	ldr	r2, [r7, #28]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	ddc1      	ble.n	8000f36 <LCD_DrawQBig+0x1a>
			}
		}
	}
}
 8000fb2:	bf00      	nop
 8000fb4:	3720      	adds	r7, #32
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000000 	.word	0x20000000

08000fc0 <LCD_DrawRBig>:

void LCD_DrawRBig(uint16_t x0, uint16_t y0) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	460a      	mov	r2, r1
 8000fca:	80fb      	strh	r3, [r7, #6]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
 8000fd8:	e04e      	b.n	8001078 <LCD_DrawRBig+0xb8>
		for(int dx = 0; dx <=width; dx++){
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
 8000fde:	e044      	b.n	800106a <LCD_DrawRBig+0xaa>
			if ((dx <= 3) || (dy <= 3 && dx <= 11) || ((dy >= 6 && dy <= 9) && dx <= 11) || (dx >= 12 && (dy >= 3 && dy <= 6))|| (dx >= 12 && dy >= 12) || (dx >= 8 && dx <= 11 && dy >= 8 && dy <= 11)) {
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	2b03      	cmp	r3, #3
 8000fe4:	dd29      	ble.n	800103a <LCD_DrawRBig+0x7a>
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	dc02      	bgt.n	8000ff2 <LCD_DrawRBig+0x32>
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	2b0b      	cmp	r3, #11
 8000ff0:	dd23      	ble.n	800103a <LCD_DrawRBig+0x7a>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	2b05      	cmp	r3, #5
 8000ff6:	dd05      	ble.n	8001004 <LCD_DrawRBig+0x44>
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	2b09      	cmp	r3, #9
 8000ffc:	dc02      	bgt.n	8001004 <LCD_DrawRBig+0x44>
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	2b0b      	cmp	r3, #11
 8001002:	dd1a      	ble.n	800103a <LCD_DrawRBig+0x7a>
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	2b0b      	cmp	r3, #11
 8001008:	dd05      	ble.n	8001016 <LCD_DrawRBig+0x56>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	2b02      	cmp	r3, #2
 800100e:	dd02      	ble.n	8001016 <LCD_DrawRBig+0x56>
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	2b06      	cmp	r3, #6
 8001014:	dd11      	ble.n	800103a <LCD_DrawRBig+0x7a>
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	2b0b      	cmp	r3, #11
 800101a:	dd02      	ble.n	8001022 <LCD_DrawRBig+0x62>
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	2b0b      	cmp	r3, #11
 8001020:	dc0b      	bgt.n	800103a <LCD_DrawRBig+0x7a>
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	2b07      	cmp	r3, #7
 8001026:	dd1d      	ble.n	8001064 <LCD_DrawRBig+0xa4>
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	2b0b      	cmp	r3, #11
 800102c:	dc1a      	bgt.n	8001064 <LCD_DrawRBig+0xa4>
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	2b07      	cmp	r3, #7
 8001032:	dd17      	ble.n	8001064 <LCD_DrawRBig+0xa4>
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	2b0b      	cmp	r3, #11
 8001038:	dc14      	bgt.n	8001064 <LCD_DrawRBig+0xa4>
				int y = y0 + dy;
 800103a:	88bb      	ldrh	r3, [r7, #4]
 800103c:	69fa      	ldr	r2, [r7, #28]
 800103e:	4413      	add	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4413      	add	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 800104a:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <LCD_DrawRBig+0xc8>)
 800104c:	7818      	ldrb	r0, [r3, #0]
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4613      	mov	r3, r2
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	1a9b      	subs	r3, r3, r2
 8001056:	011b      	lsls	r3, r3, #4
 8001058:	461a      	mov	r2, r3
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4413      	add	r3, r2
 800105e:	4619      	mov	r1, r3
 8001060:	f001 f93c 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	3301      	adds	r3, #1
 8001068:	61bb      	str	r3, [r7, #24]
 800106a:	7dfb      	ldrb	r3, [r7, #23]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	429a      	cmp	r2, r3
 8001070:	ddb6      	ble.n	8000fe0 <LCD_DrawRBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3301      	adds	r3, #1
 8001076:	61fb      	str	r3, [r7, #28]
 8001078:	7dfb      	ldrb	r3, [r7, #23]
 800107a:	69fa      	ldr	r2, [r7, #28]
 800107c:	429a      	cmp	r2, r3
 800107e:	ddac      	ble.n	8000fda <LCD_DrawRBig+0x1a>
			}
		}
	}
}
 8001080:	bf00      	nop
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000000 	.word	0x20000000

0800108c <LCD_DrawSBig>:

void LCD_DrawSBig(uint16_t x0, uint16_t y0) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	460a      	mov	r2, r1
 8001096:	80fb      	strh	r3, [r7, #6]
 8001098:	4613      	mov	r3, r2
 800109a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 800109c:	230f      	movs	r3, #15
 800109e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	e03f      	b.n	8001126 <LCD_DrawSBig+0x9a>
		for(int dx = 0; dx <=width; dx++){
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
 80010aa:	e035      	b.n	8001118 <LCD_DrawSBig+0x8c>
			if ((dx <= 3 && dy <= 9) || (dx >= 12 && dy >= 6) || (dy <= 3 || dy == 6 || dy == 7 || dy == 8 || dy ==9 || dy >= 12)) {
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	dc02      	bgt.n	80010b8 <LCD_DrawSBig+0x2c>
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	2b09      	cmp	r3, #9
 80010b6:	dd17      	ble.n	80010e8 <LCD_DrawSBig+0x5c>
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	2b0b      	cmp	r3, #11
 80010bc:	dd02      	ble.n	80010c4 <LCD_DrawSBig+0x38>
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	2b05      	cmp	r3, #5
 80010c2:	dc11      	bgt.n	80010e8 <LCD_DrawSBig+0x5c>
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	dd0e      	ble.n	80010e8 <LCD_DrawSBig+0x5c>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	2b06      	cmp	r3, #6
 80010ce:	d00b      	beq.n	80010e8 <LCD_DrawSBig+0x5c>
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	2b07      	cmp	r3, #7
 80010d4:	d008      	beq.n	80010e8 <LCD_DrawSBig+0x5c>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	2b08      	cmp	r3, #8
 80010da:	d005      	beq.n	80010e8 <LCD_DrawSBig+0x5c>
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	2b09      	cmp	r3, #9
 80010e0:	d002      	beq.n	80010e8 <LCD_DrawSBig+0x5c>
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	2b0b      	cmp	r3, #11
 80010e6:	dd14      	ble.n	8001112 <LCD_DrawSBig+0x86>
				int y = y0 + dy;
 80010e8:	88bb      	ldrh	r3, [r7, #4]
 80010ea:	69fa      	ldr	r2, [r7, #28]
 80010ec:	4413      	add	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80010f0:	88fb      	ldrh	r3, [r7, #6]
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4413      	add	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <LCD_DrawSBig+0xac>)
 80010fa:	7818      	ldrb	r0, [r3, #0]
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4613      	mov	r3, r2
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	1a9b      	subs	r3, r3, r2
 8001104:	011b      	lsls	r3, r3, #4
 8001106:	461a      	mov	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4413      	add	r3, r2
 800110c:	4619      	mov	r1, r3
 800110e:	f001 f8e5 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	3301      	adds	r3, #1
 8001116:	61bb      	str	r3, [r7, #24]
 8001118:	7dfb      	ldrb	r3, [r7, #23]
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	429a      	cmp	r2, r3
 800111e:	ddc5      	ble.n	80010ac <LCD_DrawSBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	3301      	adds	r3, #1
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	7dfb      	ldrb	r3, [r7, #23]
 8001128:	69fa      	ldr	r2, [r7, #28]
 800112a:	429a      	cmp	r2, r3
 800112c:	ddbb      	ble.n	80010a6 <LCD_DrawSBig+0x1a>
			}
		}
	}
}
 800112e:	bf00      	nop
 8001130:	3720      	adds	r7, #32
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000000 	.word	0x20000000

0800113c <LCD_DrawTBig>:

void LCD_DrawTBig(uint16_t x0, uint16_t y0) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	460a      	mov	r2, r1
 8001146:	80fb      	strh	r3, [r7, #6]
 8001148:	4613      	mov	r3, r2
 800114a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 800114c:	230f      	movs	r3, #15
 800114e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
 8001154:	e02a      	b.n	80011ac <LCD_DrawTBig+0x70>
		for(int dx = 0; dx <=width; dx++){
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
 800115a:	e020      	b.n	800119e <LCD_DrawTBig+0x62>
			if ((dy <= 3) || (dx >= 6 && dx <= 9)) {
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	2b03      	cmp	r3, #3
 8001160:	dd05      	ble.n	800116e <LCD_DrawTBig+0x32>
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	2b05      	cmp	r3, #5
 8001166:	dd17      	ble.n	8001198 <LCD_DrawTBig+0x5c>
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	2b09      	cmp	r3, #9
 800116c:	dc14      	bgt.n	8001198 <LCD_DrawTBig+0x5c>
				int y = y0 + dy;
 800116e:	88bb      	ldrh	r3, [r7, #4]
 8001170:	69fa      	ldr	r2, [r7, #28]
 8001172:	4413      	add	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4413      	add	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <LCD_DrawTBig+0x80>)
 8001180:	7818      	ldrb	r0, [r3, #0]
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4613      	mov	r3, r2
 8001186:	011b      	lsls	r3, r3, #4
 8001188:	1a9b      	subs	r3, r3, r2
 800118a:	011b      	lsls	r3, r3, #4
 800118c:	461a      	mov	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4413      	add	r3, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f001 f8a2 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	3301      	adds	r3, #1
 800119c:	61bb      	str	r3, [r7, #24]
 800119e:	7dfb      	ldrb	r3, [r7, #23]
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	ddda      	ble.n	800115c <LCD_DrawTBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3301      	adds	r3, #1
 80011aa:	61fb      	str	r3, [r7, #28]
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
 80011ae:	69fa      	ldr	r2, [r7, #28]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	ddd0      	ble.n	8001156 <LCD_DrawTBig+0x1a>
			}
		}
	}
}
 80011b4:	bf00      	nop
 80011b6:	3720      	adds	r7, #32
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000000 	.word	0x20000000

080011c0 <LCD_DrawUBig>:

void LCD_DrawUBig(uint16_t x0, uint16_t y0) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b088      	sub	sp, #32
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	460a      	mov	r2, r1
 80011ca:	80fb      	strh	r3, [r7, #6]
 80011cc:	4613      	mov	r3, r2
 80011ce:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80011d0:	230f      	movs	r3, #15
 80011d2:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
 80011d8:	e02a      	b.n	8001230 <LCD_DrawUBig+0x70>
		for(int dx = 0; dx <=width; dx++){
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
 80011de:	e020      	b.n	8001222 <LCD_DrawUBig+0x62>
			if ((dx <= 3) || (dx >= 12) || (dy >= 12)) {
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	dd05      	ble.n	80011f2 <LCD_DrawUBig+0x32>
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	2b0b      	cmp	r3, #11
 80011ea:	dc02      	bgt.n	80011f2 <LCD_DrawUBig+0x32>
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	2b0b      	cmp	r3, #11
 80011f0:	dd14      	ble.n	800121c <LCD_DrawUBig+0x5c>
				int y = y0 + dy;
 80011f2:	88bb      	ldrh	r3, [r7, #4]
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	4413      	add	r3, r2
 80011f8:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80011fa:	88fb      	ldrh	r3, [r7, #6]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4413      	add	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <LCD_DrawUBig+0x80>)
 8001204:	7818      	ldrb	r0, [r3, #0]
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4613      	mov	r3, r2
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	1a9b      	subs	r3, r3, r2
 800120e:	011b      	lsls	r3, r3, #4
 8001210:	461a      	mov	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4413      	add	r3, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f001 f860 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	3301      	adds	r3, #1
 8001220:	61bb      	str	r3, [r7, #24]
 8001222:	7dfb      	ldrb	r3, [r7, #23]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	429a      	cmp	r2, r3
 8001228:	ddda      	ble.n	80011e0 <LCD_DrawUBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3301      	adds	r3, #1
 800122e:	61fb      	str	r3, [r7, #28]
 8001230:	7dfb      	ldrb	r3, [r7, #23]
 8001232:	69fa      	ldr	r2, [r7, #28]
 8001234:	429a      	cmp	r2, r3
 8001236:	ddd0      	ble.n	80011da <LCD_DrawUBig+0x1a>
			}
		}
	}
}
 8001238:	bf00      	nop
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000000 	.word	0x20000000

08001244 <LCD_DrawVBig>:

void LCD_DrawVBig(uint16_t x0, uint16_t y0) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	460a      	mov	r2, r1
 800124e:	80fb      	strh	r3, [r7, #6]
 8001250:	4613      	mov	r3, r2
 8001252:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001254:	230f      	movs	r3, #15
 8001256:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
 800125c:	e066      	b.n	800132c <LCD_DrawVBig+0xe8>
		for(int dx = 0; dx <=width; dx++){
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
 8001262:	e05c      	b.n	800131e <LCD_DrawVBig+0xda>
			if ((dx <= 3 && dy <= 3) || (dx >= 12 && dy <= 3) || (dx >= 6 && dx <= 9 && dy >= 12) || (dy >= 4 && dy <= 7 && dx >= 2 && dx <= 5) || (dy >= 8 && dy <= 11 && dx >= 4 && dx <= 7) || (dy >= 4 && dy <= 7 && dx >= 10 && dx <= 13) || (dy >= 8 && dy <= 11 && dx >= 8 && dx <= 11) ) {
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	2b03      	cmp	r3, #3
 8001268:	dc02      	bgt.n	8001270 <LCD_DrawVBig+0x2c>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	2b03      	cmp	r3, #3
 800126e:	dd3e      	ble.n	80012ee <LCD_DrawVBig+0xaa>
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	2b0b      	cmp	r3, #11
 8001274:	dd02      	ble.n	800127c <LCD_DrawVBig+0x38>
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	2b03      	cmp	r3, #3
 800127a:	dd38      	ble.n	80012ee <LCD_DrawVBig+0xaa>
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	2b05      	cmp	r3, #5
 8001280:	dd05      	ble.n	800128e <LCD_DrawVBig+0x4a>
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	2b09      	cmp	r3, #9
 8001286:	dc02      	bgt.n	800128e <LCD_DrawVBig+0x4a>
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	2b0b      	cmp	r3, #11
 800128c:	dc2f      	bgt.n	80012ee <LCD_DrawVBig+0xaa>
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	2b03      	cmp	r3, #3
 8001292:	dd08      	ble.n	80012a6 <LCD_DrawVBig+0x62>
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	2b07      	cmp	r3, #7
 8001298:	dc05      	bgt.n	80012a6 <LCD_DrawVBig+0x62>
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	2b01      	cmp	r3, #1
 800129e:	dd02      	ble.n	80012a6 <LCD_DrawVBig+0x62>
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	2b05      	cmp	r3, #5
 80012a4:	dd23      	ble.n	80012ee <LCD_DrawVBig+0xaa>
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	2b07      	cmp	r3, #7
 80012aa:	dd08      	ble.n	80012be <LCD_DrawVBig+0x7a>
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	2b0b      	cmp	r3, #11
 80012b0:	dc05      	bgt.n	80012be <LCD_DrawVBig+0x7a>
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	dd02      	ble.n	80012be <LCD_DrawVBig+0x7a>
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	2b07      	cmp	r3, #7
 80012bc:	dd17      	ble.n	80012ee <LCD_DrawVBig+0xaa>
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	2b03      	cmp	r3, #3
 80012c2:	dd08      	ble.n	80012d6 <LCD_DrawVBig+0x92>
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	2b07      	cmp	r3, #7
 80012c8:	dc05      	bgt.n	80012d6 <LCD_DrawVBig+0x92>
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	2b09      	cmp	r3, #9
 80012ce:	dd02      	ble.n	80012d6 <LCD_DrawVBig+0x92>
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	2b0d      	cmp	r3, #13
 80012d4:	dd0b      	ble.n	80012ee <LCD_DrawVBig+0xaa>
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	2b07      	cmp	r3, #7
 80012da:	dd1d      	ble.n	8001318 <LCD_DrawVBig+0xd4>
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	2b0b      	cmp	r3, #11
 80012e0:	dc1a      	bgt.n	8001318 <LCD_DrawVBig+0xd4>
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	2b07      	cmp	r3, #7
 80012e6:	dd17      	ble.n	8001318 <LCD_DrawVBig+0xd4>
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	2b0b      	cmp	r3, #11
 80012ec:	dc14      	bgt.n	8001318 <LCD_DrawVBig+0xd4>
				int y = y0 + dy;
 80012ee:	88bb      	ldrh	r3, [r7, #4]
 80012f0:	69fa      	ldr	r2, [r7, #28]
 80012f2:	4413      	add	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4413      	add	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80012fe:	4b0f      	ldr	r3, [pc, #60]	; (800133c <LCD_DrawVBig+0xf8>)
 8001300:	7818      	ldrb	r0, [r3, #0]
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4613      	mov	r3, r2
 8001306:	011b      	lsls	r3, r3, #4
 8001308:	1a9b      	subs	r3, r3, r2
 800130a:	011b      	lsls	r3, r3, #4
 800130c:	461a      	mov	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	4413      	add	r3, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f000 ffe2 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	3301      	adds	r3, #1
 800131c:	61bb      	str	r3, [r7, #24]
 800131e:	7dfb      	ldrb	r3, [r7, #23]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	429a      	cmp	r2, r3
 8001324:	dd9e      	ble.n	8001264 <LCD_DrawVBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3301      	adds	r3, #1
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	7dfb      	ldrb	r3, [r7, #23]
 800132e:	69fa      	ldr	r2, [r7, #28]
 8001330:	429a      	cmp	r2, r3
 8001332:	dd94      	ble.n	800125e <LCD_DrawVBig+0x1a>
			}
		}
	}
}
 8001334:	bf00      	nop
 8001336:	3720      	adds	r7, #32
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000000 	.word	0x20000000

08001340 <LCD_DrawWBig>:

void LCD_DrawWBig(uint16_t x0, uint16_t y0) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	460a      	mov	r2, r1
 800134a:	80fb      	strh	r3, [r7, #6]
 800134c:	4613      	mov	r3, r2
 800134e:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001350:	230f      	movs	r3, #15
 8001352:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
 8001358:	e081      	b.n	800145e <LCD_DrawWBig+0x11e>
		for(int dx = 0; dx <=width; dx++){
 800135a:	2300      	movs	r3, #0
 800135c:	61bb      	str	r3, [r7, #24]
 800135e:	e077      	b.n	8001450 <LCD_DrawWBig+0x110>
			if ((dx <= 3 && dy <= 3) || (dx >= 12 && dy <= 3) || (dy >= 4 && dy <= 7 && dx >= 1 && dx <= 4) || (dy >= 8 && dy <= 11 && dx >= 2 && dx <= 5)  || (dy >= 12 && dy <= 15 && dx >= 3 && dx <= 6)|| (dy >= 4 && dy <= 7 && dx >= 11 && dx <= 14) || (dy >= 8 && dy <= 11 && dx >= 10 && dx <= 13) || (dy >= 12 && dy <= 15 && dx >= 9 && dx <= 12) || (dx >= 6 && dx <= 9 && dy >= 6 && dy <= 11)) {
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	2b03      	cmp	r3, #3
 8001364:	dc02      	bgt.n	800136c <LCD_DrawWBig+0x2c>
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	2b03      	cmp	r3, #3
 800136a:	dd59      	ble.n	8001420 <LCD_DrawWBig+0xe0>
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	2b0b      	cmp	r3, #11
 8001370:	dd02      	ble.n	8001378 <LCD_DrawWBig+0x38>
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	2b03      	cmp	r3, #3
 8001376:	dd53      	ble.n	8001420 <LCD_DrawWBig+0xe0>
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	2b03      	cmp	r3, #3
 800137c:	dd08      	ble.n	8001390 <LCD_DrawWBig+0x50>
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	2b07      	cmp	r3, #7
 8001382:	dc05      	bgt.n	8001390 <LCD_DrawWBig+0x50>
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2b00      	cmp	r3, #0
 8001388:	dd02      	ble.n	8001390 <LCD_DrawWBig+0x50>
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	2b04      	cmp	r3, #4
 800138e:	dd47      	ble.n	8001420 <LCD_DrawWBig+0xe0>
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	2b07      	cmp	r3, #7
 8001394:	dd08      	ble.n	80013a8 <LCD_DrawWBig+0x68>
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	2b0b      	cmp	r3, #11
 800139a:	dc05      	bgt.n	80013a8 <LCD_DrawWBig+0x68>
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	dd02      	ble.n	80013a8 <LCD_DrawWBig+0x68>
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	2b05      	cmp	r3, #5
 80013a6:	dd3b      	ble.n	8001420 <LCD_DrawWBig+0xe0>
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	2b0b      	cmp	r3, #11
 80013ac:	dd08      	ble.n	80013c0 <LCD_DrawWBig+0x80>
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	2b0f      	cmp	r3, #15
 80013b2:	dc05      	bgt.n	80013c0 <LCD_DrawWBig+0x80>
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	dd02      	ble.n	80013c0 <LCD_DrawWBig+0x80>
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	2b06      	cmp	r3, #6
 80013be:	dd2f      	ble.n	8001420 <LCD_DrawWBig+0xe0>
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	dd08      	ble.n	80013d8 <LCD_DrawWBig+0x98>
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	2b07      	cmp	r3, #7
 80013ca:	dc05      	bgt.n	80013d8 <LCD_DrawWBig+0x98>
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	2b0a      	cmp	r3, #10
 80013d0:	dd02      	ble.n	80013d8 <LCD_DrawWBig+0x98>
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	2b0e      	cmp	r3, #14
 80013d6:	dd23      	ble.n	8001420 <LCD_DrawWBig+0xe0>
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	2b07      	cmp	r3, #7
 80013dc:	dd08      	ble.n	80013f0 <LCD_DrawWBig+0xb0>
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	2b0b      	cmp	r3, #11
 80013e2:	dc05      	bgt.n	80013f0 <LCD_DrawWBig+0xb0>
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	2b09      	cmp	r3, #9
 80013e8:	dd02      	ble.n	80013f0 <LCD_DrawWBig+0xb0>
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	2b0d      	cmp	r3, #13
 80013ee:	dd17      	ble.n	8001420 <LCD_DrawWBig+0xe0>
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	2b0b      	cmp	r3, #11
 80013f4:	dd08      	ble.n	8001408 <LCD_DrawWBig+0xc8>
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	dc05      	bgt.n	8001408 <LCD_DrawWBig+0xc8>
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	2b08      	cmp	r3, #8
 8001400:	dd02      	ble.n	8001408 <LCD_DrawWBig+0xc8>
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	2b0c      	cmp	r3, #12
 8001406:	dd0b      	ble.n	8001420 <LCD_DrawWBig+0xe0>
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	2b05      	cmp	r3, #5
 800140c:	dd1d      	ble.n	800144a <LCD_DrawWBig+0x10a>
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	2b09      	cmp	r3, #9
 8001412:	dc1a      	bgt.n	800144a <LCD_DrawWBig+0x10a>
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	2b05      	cmp	r3, #5
 8001418:	dd17      	ble.n	800144a <LCD_DrawWBig+0x10a>
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	2b0b      	cmp	r3, #11
 800141e:	dc14      	bgt.n	800144a <LCD_DrawWBig+0x10a>
				int y = y0 + dy;
 8001420:	88bb      	ldrh	r3, [r7, #4]
 8001422:	69fa      	ldr	r2, [r7, #28]
 8001424:	4413      	add	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4413      	add	r3, r2
 800142e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <LCD_DrawWBig+0x130>)
 8001432:	7818      	ldrb	r0, [r3, #0]
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4613      	mov	r3, r2
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	1a9b      	subs	r3, r3, r2
 800143c:	011b      	lsls	r3, r3, #4
 800143e:	461a      	mov	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4413      	add	r3, r2
 8001444:	4619      	mov	r1, r3
 8001446:	f000 ff49 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	3301      	adds	r3, #1
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	429a      	cmp	r2, r3
 8001456:	dd83      	ble.n	8001360 <LCD_DrawWBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	3301      	adds	r3, #1
 800145c:	61fb      	str	r3, [r7, #28]
 800145e:	7dfb      	ldrb	r3, [r7, #23]
 8001460:	69fa      	ldr	r2, [r7, #28]
 8001462:	429a      	cmp	r2, r3
 8001464:	f77f af79 	ble.w	800135a <LCD_DrawWBig+0x1a>
			}
		}
	}
}
 8001468:	bf00      	nop
 800146a:	3720      	adds	r7, #32
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000000 	.word	0x20000000

08001474 <LCD_DrawXBig>:

void LCD_DrawXBig(uint16_t x0, uint16_t y0) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	460a      	mov	r2, r1
 800147e:	80fb      	strh	r3, [r7, #6]
 8001480:	4613      	mov	r3, r2
 8001482:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001484:	230f      	movs	r3, #15
 8001486:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
 800148c:	e045      	b.n	800151a <LCD_DrawXBig+0xa6>
		for(int dx = 0; dx <=width; dx++){
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
 8001492:	e03b      	b.n	800150c <LCD_DrawXBig+0x98>
			if ((dx <= 3 && dy <= 3) || (dx >= 12 && dy <= 3) || (dx <= 3 && dy >= 12) || (dx >= 12 && dy >= 12) || (dy >= 4 && dy <= 11 && dx >= 4 && dx <= 11)) {
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2b03      	cmp	r3, #3
 8001498:	dc02      	bgt.n	80014a0 <LCD_DrawXBig+0x2c>
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	2b03      	cmp	r3, #3
 800149e:	dd1d      	ble.n	80014dc <LCD_DrawXBig+0x68>
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	2b0b      	cmp	r3, #11
 80014a4:	dd02      	ble.n	80014ac <LCD_DrawXBig+0x38>
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	dd17      	ble.n	80014dc <LCD_DrawXBig+0x68>
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	dc02      	bgt.n	80014b8 <LCD_DrawXBig+0x44>
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	2b0b      	cmp	r3, #11
 80014b6:	dc11      	bgt.n	80014dc <LCD_DrawXBig+0x68>
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	2b0b      	cmp	r3, #11
 80014bc:	dd02      	ble.n	80014c4 <LCD_DrawXBig+0x50>
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	2b0b      	cmp	r3, #11
 80014c2:	dc0b      	bgt.n	80014dc <LCD_DrawXBig+0x68>
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	dd1d      	ble.n	8001506 <LCD_DrawXBig+0x92>
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	2b0b      	cmp	r3, #11
 80014ce:	dc1a      	bgt.n	8001506 <LCD_DrawXBig+0x92>
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	dd17      	ble.n	8001506 <LCD_DrawXBig+0x92>
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	2b0b      	cmp	r3, #11
 80014da:	dc14      	bgt.n	8001506 <LCD_DrawXBig+0x92>
				int y = y0 + dy;
 80014dc:	88bb      	ldrh	r3, [r7, #4]
 80014de:	69fa      	ldr	r2, [r7, #28]
 80014e0:	4413      	add	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4413      	add	r3, r2
 80014ea:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <LCD_DrawXBig+0xb8>)
 80014ee:	7818      	ldrb	r0, [r3, #0]
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4613      	mov	r3, r2
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	1a9b      	subs	r3, r3, r2
 80014f8:	011b      	lsls	r3, r3, #4
 80014fa:	461a      	mov	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4413      	add	r3, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f000 feeb 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	3301      	adds	r3, #1
 800150a:	61bb      	str	r3, [r7, #24]
 800150c:	7dfb      	ldrb	r3, [r7, #23]
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	429a      	cmp	r2, r3
 8001512:	ddbf      	ble.n	8001494 <LCD_DrawXBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	3301      	adds	r3, #1
 8001518:	61fb      	str	r3, [r7, #28]
 800151a:	7dfb      	ldrb	r3, [r7, #23]
 800151c:	69fa      	ldr	r2, [r7, #28]
 800151e:	429a      	cmp	r2, r3
 8001520:	ddb5      	ble.n	800148e <LCD_DrawXBig+0x1a>
			}
		}
	}
}
 8001522:	bf00      	nop
 8001524:	3720      	adds	r7, #32
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000000 	.word	0x20000000

08001530 <LCD_DrawYBig>:

void LCD_DrawYBig(uint16_t x0, uint16_t y0) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	460a      	mov	r2, r1
 800153a:	80fb      	strh	r3, [r7, #6]
 800153c:	4613      	mov	r3, r2
 800153e:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001540:	230f      	movs	r3, #15
 8001542:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
 8001548:	e04e      	b.n	80015e8 <LCD_DrawYBig+0xb8>
		for(int dx = 0; dx <=width; dx++){
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
 800154e:	e044      	b.n	80015da <LCD_DrawYBig+0xaa>
			if ((dx >= 6 && dx <= 9 && dy >= 8) || (dx <= 3 && dy <= 3) || (dx >= 12 && dy <= 3) || (dx >= 4 && dx <= 7 && dy >= 4 && dy <= 7) || (dx >= 8 && dx <= 11 && dy >= 4 && dy <= 7)) {
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	2b05      	cmp	r3, #5
 8001554:	dd05      	ble.n	8001562 <LCD_DrawYBig+0x32>
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	2b09      	cmp	r3, #9
 800155a:	dc02      	bgt.n	8001562 <LCD_DrawYBig+0x32>
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	2b07      	cmp	r3, #7
 8001560:	dc23      	bgt.n	80015aa <LCD_DrawYBig+0x7a>
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	2b03      	cmp	r3, #3
 8001566:	dc02      	bgt.n	800156e <LCD_DrawYBig+0x3e>
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	2b03      	cmp	r3, #3
 800156c:	dd1d      	ble.n	80015aa <LCD_DrawYBig+0x7a>
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	2b0b      	cmp	r3, #11
 8001572:	dd02      	ble.n	800157a <LCD_DrawYBig+0x4a>
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	2b03      	cmp	r3, #3
 8001578:	dd17      	ble.n	80015aa <LCD_DrawYBig+0x7a>
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	2b03      	cmp	r3, #3
 800157e:	dd08      	ble.n	8001592 <LCD_DrawYBig+0x62>
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2b07      	cmp	r3, #7
 8001584:	dc05      	bgt.n	8001592 <LCD_DrawYBig+0x62>
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	2b03      	cmp	r3, #3
 800158a:	dd02      	ble.n	8001592 <LCD_DrawYBig+0x62>
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	2b07      	cmp	r3, #7
 8001590:	dd0b      	ble.n	80015aa <LCD_DrawYBig+0x7a>
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	2b07      	cmp	r3, #7
 8001596:	dd1d      	ble.n	80015d4 <LCD_DrawYBig+0xa4>
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	2b0b      	cmp	r3, #11
 800159c:	dc1a      	bgt.n	80015d4 <LCD_DrawYBig+0xa4>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	dd17      	ble.n	80015d4 <LCD_DrawYBig+0xa4>
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	2b07      	cmp	r3, #7
 80015a8:	dc14      	bgt.n	80015d4 <LCD_DrawYBig+0xa4>
				int y = y0 + dy;
 80015aa:	88bb      	ldrh	r3, [r7, #4]
 80015ac:	69fa      	ldr	r2, [r7, #28]
 80015ae:	4413      	add	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4413      	add	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <LCD_DrawYBig+0xc8>)
 80015bc:	7818      	ldrb	r0, [r3, #0]
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4613      	mov	r3, r2
 80015c2:	011b      	lsls	r3, r3, #4
 80015c4:	1a9b      	subs	r3, r3, r2
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	461a      	mov	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4413      	add	r3, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f000 fe84 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	3301      	adds	r3, #1
 80015d8:	61bb      	str	r3, [r7, #24]
 80015da:	7dfb      	ldrb	r3, [r7, #23]
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	429a      	cmp	r2, r3
 80015e0:	ddb6      	ble.n	8001550 <LCD_DrawYBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3301      	adds	r3, #1
 80015e6:	61fb      	str	r3, [r7, #28]
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	ddac      	ble.n	800154a <LCD_DrawYBig+0x1a>
			}
		}
	}
}
 80015f0:	bf00      	nop
 80015f2:	3720      	adds	r7, #32
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000000 	.word	0x20000000

080015fc <LCD_DrawZBig>:

void LCD_DrawZBig(uint16_t x0, uint16_t y0) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b088      	sub	sp, #32
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	460a      	mov	r2, r1
 8001606:	80fb      	strh	r3, [r7, #6]
 8001608:	4613      	mov	r3, r2
 800160a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 800160c:	230f      	movs	r3, #15
 800160e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
 8001614:	e03f      	b.n	8001696 <LCD_DrawZBig+0x9a>
		for(int dx = 0; dx <=width; dx++){
 8001616:	2300      	movs	r3, #0
 8001618:	61bb      	str	r3, [r7, #24]
 800161a:	e035      	b.n	8001688 <LCD_DrawZBig+0x8c>
			if (dy <= 3 || dy >= 12 || (dy >= 4 && dy <= 7 && dx >= 8 && dx <= 11) || (dy >= 8 && dy <= 11 && dx >= 4 && dx <= 7)) {
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	2b03      	cmp	r3, #3
 8001620:	dd1a      	ble.n	8001658 <LCD_DrawZBig+0x5c>
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	2b0b      	cmp	r3, #11
 8001626:	dc17      	bgt.n	8001658 <LCD_DrawZBig+0x5c>
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	2b03      	cmp	r3, #3
 800162c:	dd08      	ble.n	8001640 <LCD_DrawZBig+0x44>
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	2b07      	cmp	r3, #7
 8001632:	dc05      	bgt.n	8001640 <LCD_DrawZBig+0x44>
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2b07      	cmp	r3, #7
 8001638:	dd02      	ble.n	8001640 <LCD_DrawZBig+0x44>
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	2b0b      	cmp	r3, #11
 800163e:	dd0b      	ble.n	8001658 <LCD_DrawZBig+0x5c>
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	2b07      	cmp	r3, #7
 8001644:	dd1d      	ble.n	8001682 <LCD_DrawZBig+0x86>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	2b0b      	cmp	r3, #11
 800164a:	dc1a      	bgt.n	8001682 <LCD_DrawZBig+0x86>
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	2b03      	cmp	r3, #3
 8001650:	dd17      	ble.n	8001682 <LCD_DrawZBig+0x86>
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	2b07      	cmp	r3, #7
 8001656:	dc14      	bgt.n	8001682 <LCD_DrawZBig+0x86>
				int y = y0 + dy;
 8001658:	88bb      	ldrh	r3, [r7, #4]
 800165a:	69fa      	ldr	r2, [r7, #28]
 800165c:	4413      	add	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4413      	add	r3, r2
 8001666:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <LCD_DrawZBig+0xac>)
 800166a:	7818      	ldrb	r0, [r3, #0]
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4613      	mov	r3, r2
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	1a9b      	subs	r3, r3, r2
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	461a      	mov	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4413      	add	r3, r2
 800167c:	4619      	mov	r1, r3
 800167e:	f000 fe2d 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	3301      	adds	r3, #1
 8001686:	61bb      	str	r3, [r7, #24]
 8001688:	7dfb      	ldrb	r3, [r7, #23]
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	429a      	cmp	r2, r3
 800168e:	ddc5      	ble.n	800161c <LCD_DrawZBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	3301      	adds	r3, #1
 8001694:	61fb      	str	r3, [r7, #28]
 8001696:	7dfb      	ldrb	r3, [r7, #23]
 8001698:	69fa      	ldr	r2, [r7, #28]
 800169a:	429a      	cmp	r2, r3
 800169c:	ddbb      	ble.n	8001616 <LCD_DrawZBig+0x1a>
			}
		}
	}
}
 800169e:	bf00      	nop
 80016a0:	3720      	adds	r7, #32
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000000 	.word	0x20000000

080016ac <LCD_Draw0Big>:

void LCD_Draw0Big(uint16_t x0, uint16_t y0) {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4603      	mov	r3, r0
 80016b4:	460a      	mov	r2, r1
 80016b6:	80fb      	strh	r3, [r7, #6]
 80016b8:	4613      	mov	r3, r2
 80016ba:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80016bc:	230f      	movs	r3, #15
 80016be:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
 80016c4:	e02d      	b.n	8001722 <LCD_Draw0Big+0x76>
		for(int dx = 0; dx <=width; dx++){
 80016c6:	2300      	movs	r3, #0
 80016c8:	61bb      	str	r3, [r7, #24]
 80016ca:	e023      	b.n	8001714 <LCD_Draw0Big+0x68>
			if ((dx <= 3 || dx >= 12) || (dy <= 3 || dy >= 12)) {
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	dd08      	ble.n	80016e4 <LCD_Draw0Big+0x38>
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	2b0b      	cmp	r3, #11
 80016d6:	dc05      	bgt.n	80016e4 <LCD_Draw0Big+0x38>
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	2b03      	cmp	r3, #3
 80016dc:	dd02      	ble.n	80016e4 <LCD_Draw0Big+0x38>
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	2b0b      	cmp	r3, #11
 80016e2:	dd14      	ble.n	800170e <LCD_Draw0Big+0x62>
				int y = y0 + dy;
 80016e4:	88bb      	ldrh	r3, [r7, #4]
 80016e6:	69fa      	ldr	r2, [r7, #28]
 80016e8:	4413      	add	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4413      	add	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80016f4:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <LCD_Draw0Big+0x88>)
 80016f6:	7818      	ldrb	r0, [r3, #0]
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4613      	mov	r3, r2
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	1a9b      	subs	r3, r3, r2
 8001700:	011b      	lsls	r3, r3, #4
 8001702:	461a      	mov	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4413      	add	r3, r2
 8001708:	4619      	mov	r1, r3
 800170a:	f000 fde7 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	3301      	adds	r3, #1
 8001712:	61bb      	str	r3, [r7, #24]
 8001714:	7dfb      	ldrb	r3, [r7, #23]
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	429a      	cmp	r2, r3
 800171a:	ddd7      	ble.n	80016cc <LCD_Draw0Big+0x20>
	for(int dy = 0; dy <= width; dy++){
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	3301      	adds	r3, #1
 8001720:	61fb      	str	r3, [r7, #28]
 8001722:	7dfb      	ldrb	r3, [r7, #23]
 8001724:	69fa      	ldr	r2, [r7, #28]
 8001726:	429a      	cmp	r2, r3
 8001728:	ddcd      	ble.n	80016c6 <LCD_Draw0Big+0x1a>
			}
		}
	}
}
 800172a:	bf00      	nop
 800172c:	3720      	adds	r7, #32
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000000 	.word	0x20000000

08001738 <LCD_Draw1Big>:

void LCD_Draw1Big(uint16_t x0, uint16_t y0) {
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	460a      	mov	r2, r1
 8001742:	80fb      	strh	r3, [r7, #6]
 8001744:	4613      	mov	r3, r2
 8001746:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001748:	230f      	movs	r3, #15
 800174a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
 8001750:	e027      	b.n	80017a2 <LCD_Draw1Big+0x6a>
		for(int dx = 0; dx <=width; dx++){
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
 8001756:	e01d      	b.n	8001794 <LCD_Draw1Big+0x5c>
			if (dx >= 6 && dx <= 9) {
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	2b05      	cmp	r3, #5
 800175c:	dd17      	ble.n	800178e <LCD_Draw1Big+0x56>
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	2b09      	cmp	r3, #9
 8001762:	dc14      	bgt.n	800178e <LCD_Draw1Big+0x56>
				int y = y0 + dy;
 8001764:	88bb      	ldrh	r3, [r7, #4]
 8001766:	69fa      	ldr	r2, [r7, #28]
 8001768:	4413      	add	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800176c:	88fb      	ldrh	r3, [r7, #6]
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4413      	add	r3, r2
 8001772:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <LCD_Draw1Big+0x7c>)
 8001776:	7818      	ldrb	r0, [r3, #0]
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4613      	mov	r3, r2
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	1a9b      	subs	r3, r3, r2
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	461a      	mov	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4413      	add	r3, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f000 fda7 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	3301      	adds	r3, #1
 8001792:	61bb      	str	r3, [r7, #24]
 8001794:	7dfb      	ldrb	r3, [r7, #23]
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	429a      	cmp	r2, r3
 800179a:	dddd      	ble.n	8001758 <LCD_Draw1Big+0x20>
	for(int dy = 0; dy <= width; dy++){
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	3301      	adds	r3, #1
 80017a0:	61fb      	str	r3, [r7, #28]
 80017a2:	7dfb      	ldrb	r3, [r7, #23]
 80017a4:	69fa      	ldr	r2, [r7, #28]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	ddd3      	ble.n	8001752 <LCD_Draw1Big+0x1a>
			}
		}
	}
}
 80017aa:	bf00      	nop
 80017ac:	3720      	adds	r7, #32
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000000 	.word	0x20000000

080017b8 <LCD_Draw2Big>:

void LCD_Draw2Big(uint16_t x0, uint16_t y0) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	460a      	mov	r2, r1
 80017c2:	80fb      	strh	r3, [r7, #6]
 80017c4:	4613      	mov	r3, r2
 80017c6:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80017c8:	230f      	movs	r3, #15
 80017ca:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
 80017d0:	e039      	b.n	8001846 <LCD_Draw2Big+0x8e>
		for(int dx = 0; dx <=width; dx++){
 80017d2:	2300      	movs	r3, #0
 80017d4:	61bb      	str	r3, [r7, #24]
 80017d6:	e02f      	b.n	8001838 <LCD_Draw2Big+0x80>
			if (dy <= 3 || dy >= 12|| (dx >= 12 && dy <= 5) || (dx <= 3 && dy >= 10) || (dy >= 6 && dy <= 9)) {
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	2b03      	cmp	r3, #3
 80017dc:	dd14      	ble.n	8001808 <LCD_Draw2Big+0x50>
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	2b0b      	cmp	r3, #11
 80017e2:	dc11      	bgt.n	8001808 <LCD_Draw2Big+0x50>
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2b0b      	cmp	r3, #11
 80017e8:	dd02      	ble.n	80017f0 <LCD_Draw2Big+0x38>
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	2b05      	cmp	r3, #5
 80017ee:	dd0b      	ble.n	8001808 <LCD_Draw2Big+0x50>
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	dc02      	bgt.n	80017fc <LCD_Draw2Big+0x44>
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	2b09      	cmp	r3, #9
 80017fa:	dc05      	bgt.n	8001808 <LCD_Draw2Big+0x50>
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	2b05      	cmp	r3, #5
 8001800:	dd17      	ble.n	8001832 <LCD_Draw2Big+0x7a>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	2b09      	cmp	r3, #9
 8001806:	dc14      	bgt.n	8001832 <LCD_Draw2Big+0x7a>
				int y = y0 + dy;
 8001808:	88bb      	ldrh	r3, [r7, #4]
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	4413      	add	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	4413      	add	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <LCD_Draw2Big+0xa0>)
 800181a:	7818      	ldrb	r0, [r3, #0]
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4613      	mov	r3, r2
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	1a9b      	subs	r3, r3, r2
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f000 fd55 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	3301      	adds	r3, #1
 8001836:	61bb      	str	r3, [r7, #24]
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	429a      	cmp	r2, r3
 800183e:	ddcb      	ble.n	80017d8 <LCD_Draw2Big+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	3301      	adds	r3, #1
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	7dfb      	ldrb	r3, [r7, #23]
 8001848:	69fa      	ldr	r2, [r7, #28]
 800184a:	429a      	cmp	r2, r3
 800184c:	ddc1      	ble.n	80017d2 <LCD_Draw2Big+0x1a>
			}
		}
	}
}
 800184e:	bf00      	nop
 8001850:	3720      	adds	r7, #32
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000000 	.word	0x20000000

0800185c <LCD_Draw3Big>:

void LCD_Draw3Big(uint16_t x0, uint16_t y0) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	460a      	mov	r2, r1
 8001866:	80fb      	strh	r3, [r7, #6]
 8001868:	4613      	mov	r3, r2
 800186a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 800186c:	230f      	movs	r3, #15
 800186e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
 8001874:	e030      	b.n	80018d8 <LCD_Draw3Big+0x7c>
		for(int dx = 0; dx <=width; dx++){
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	e026      	b.n	80018ca <LCD_Draw3Big+0x6e>
			if (dy <= 3 || dy >= 12 || (dy >= 6 && dy <= 9) || (dx >= 12)) {
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	2b03      	cmp	r3, #3
 8001880:	dd0b      	ble.n	800189a <LCD_Draw3Big+0x3e>
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	2b0b      	cmp	r3, #11
 8001886:	dc08      	bgt.n	800189a <LCD_Draw3Big+0x3e>
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	2b05      	cmp	r3, #5
 800188c:	dd02      	ble.n	8001894 <LCD_Draw3Big+0x38>
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	2b09      	cmp	r3, #9
 8001892:	dd02      	ble.n	800189a <LCD_Draw3Big+0x3e>
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	2b0b      	cmp	r3, #11
 8001898:	dd14      	ble.n	80018c4 <LCD_Draw3Big+0x68>
				int y = y0 + dy;
 800189a:	88bb      	ldrh	r3, [r7, #4]
 800189c:	69fa      	ldr	r2, [r7, #28]
 800189e:	4413      	add	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4413      	add	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <LCD_Draw3Big+0x8c>)
 80018ac:	7818      	ldrb	r0, [r3, #0]
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4613      	mov	r3, r2
 80018b2:	011b      	lsls	r3, r3, #4
 80018b4:	1a9b      	subs	r3, r3, r2
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	461a      	mov	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	4413      	add	r3, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	f000 fd0c 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	3301      	adds	r3, #1
 80018c8:	61bb      	str	r3, [r7, #24]
 80018ca:	7dfb      	ldrb	r3, [r7, #23]
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	ddd4      	ble.n	800187c <LCD_Draw3Big+0x20>
	for(int dy = 0; dy <= width; dy++){
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3301      	adds	r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	7dfb      	ldrb	r3, [r7, #23]
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	429a      	cmp	r2, r3
 80018de:	ddca      	ble.n	8001876 <LCD_Draw3Big+0x1a>
			}
		}
	}
}
 80018e0:	bf00      	nop
 80018e2:	3720      	adds	r7, #32
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000000 	.word	0x20000000

080018ec <LCD_Draw4Big>:

void LCD_Draw4Big(uint16_t x0, uint16_t y0) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	460a      	mov	r2, r1
 80018f6:	80fb      	strh	r3, [r7, #6]
 80018f8:	4613      	mov	r3, r2
 80018fa:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80018fc:	230f      	movs	r3, #15
 80018fe:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
 8001904:	e033      	b.n	800196e <LCD_Draw4Big+0x82>
		for(int dx = 0; dx <=width; dx++){
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
 800190a:	e029      	b.n	8001960 <LCD_Draw4Big+0x74>
			if ((dx <= 3 && dy <= 9) || (dy >= 6 && dy <= 9) || (dx >= 10 && dx <= 13)) {
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	2b03      	cmp	r3, #3
 8001910:	dc02      	bgt.n	8001918 <LCD_Draw4Big+0x2c>
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	2b09      	cmp	r3, #9
 8001916:	dd0b      	ble.n	8001930 <LCD_Draw4Big+0x44>
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	2b05      	cmp	r3, #5
 800191c:	dd02      	ble.n	8001924 <LCD_Draw4Big+0x38>
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	2b09      	cmp	r3, #9
 8001922:	dd05      	ble.n	8001930 <LCD_Draw4Big+0x44>
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	2b09      	cmp	r3, #9
 8001928:	dd17      	ble.n	800195a <LCD_Draw4Big+0x6e>
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	2b0d      	cmp	r3, #13
 800192e:	dc14      	bgt.n	800195a <LCD_Draw4Big+0x6e>
				int y = y0 + dy;
 8001930:	88bb      	ldrh	r3, [r7, #4]
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	4413      	add	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4413      	add	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <LCD_Draw4Big+0x94>)
 8001942:	7818      	ldrb	r0, [r3, #0]
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4613      	mov	r3, r2
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	1a9b      	subs	r3, r3, r2
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	461a      	mov	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4413      	add	r3, r2
 8001954:	4619      	mov	r1, r3
 8001956:	f000 fcc1 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	3301      	adds	r3, #1
 800195e:	61bb      	str	r3, [r7, #24]
 8001960:	7dfb      	ldrb	r3, [r7, #23]
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	429a      	cmp	r2, r3
 8001966:	ddd1      	ble.n	800190c <LCD_Draw4Big+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	3301      	adds	r3, #1
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	7dfb      	ldrb	r3, [r7, #23]
 8001970:	69fa      	ldr	r2, [r7, #28]
 8001972:	429a      	cmp	r2, r3
 8001974:	ddc7      	ble.n	8001906 <LCD_Draw4Big+0x1a>
			}
		}
	}
}
 8001976:	bf00      	nop
 8001978:	3720      	adds	r7, #32
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000000 	.word	0x20000000

08001984 <LCD_Draw5Big>:

void LCD_Draw5Big(uint16_t x0, uint16_t y0) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	460a      	mov	r2, r1
 800198e:	80fb      	strh	r3, [r7, #6]
 8001990:	4613      	mov	r3, r2
 8001992:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001994:	230f      	movs	r3, #15
 8001996:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
 800199c:	e039      	b.n	8001a12 <LCD_Draw5Big+0x8e>
		for(int dx = 0; dx <=width; dx++){
 800199e:	2300      	movs	r3, #0
 80019a0:	61bb      	str	r3, [r7, #24]
 80019a2:	e02f      	b.n	8001a04 <LCD_Draw5Big+0x80>
			if (dy <= 3 || dy >= 12|| (dy >= 6 && dy <= 9) || (dx >= 12 && dy >= 6) || (dx <= 3 && dy <= 9)) {
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	dd14      	ble.n	80019d4 <LCD_Draw5Big+0x50>
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	2b0b      	cmp	r3, #11
 80019ae:	dc11      	bgt.n	80019d4 <LCD_Draw5Big+0x50>
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	2b05      	cmp	r3, #5
 80019b4:	dd02      	ble.n	80019bc <LCD_Draw5Big+0x38>
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	2b09      	cmp	r3, #9
 80019ba:	dd0b      	ble.n	80019d4 <LCD_Draw5Big+0x50>
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	2b0b      	cmp	r3, #11
 80019c0:	dd02      	ble.n	80019c8 <LCD_Draw5Big+0x44>
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	2b05      	cmp	r3, #5
 80019c6:	dc05      	bgt.n	80019d4 <LCD_Draw5Big+0x50>
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	2b03      	cmp	r3, #3
 80019cc:	dc17      	bgt.n	80019fe <LCD_Draw5Big+0x7a>
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	2b09      	cmp	r3, #9
 80019d2:	dc14      	bgt.n	80019fe <LCD_Draw5Big+0x7a>
				int y = y0 + dy;
 80019d4:	88bb      	ldrh	r3, [r7, #4]
 80019d6:	69fa      	ldr	r2, [r7, #28]
 80019d8:	4413      	add	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4413      	add	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <LCD_Draw5Big+0xa0>)
 80019e6:	7818      	ldrb	r0, [r3, #0]
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4613      	mov	r3, r2
 80019ec:	011b      	lsls	r3, r3, #4
 80019ee:	1a9b      	subs	r3, r3, r2
 80019f0:	011b      	lsls	r3, r3, #4
 80019f2:	461a      	mov	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	4619      	mov	r1, r3
 80019fa:	f000 fc6f 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	3301      	adds	r3, #1
 8001a02:	61bb      	str	r3, [r7, #24]
 8001a04:	7dfb      	ldrb	r3, [r7, #23]
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	ddcb      	ble.n	80019a4 <LCD_Draw5Big+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	7dfb      	ldrb	r3, [r7, #23]
 8001a14:	69fa      	ldr	r2, [r7, #28]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	ddc1      	ble.n	800199e <LCD_Draw5Big+0x1a>
			}
		}
	}
}
 8001a1a:	bf00      	nop
 8001a1c:	3720      	adds	r7, #32
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000000 	.word	0x20000000

08001a28 <LCD_Draw6Big>:

void LCD_Draw6Big(uint16_t x0, uint16_t y0) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b088      	sub	sp, #32
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	460a      	mov	r2, r1
 8001a32:	80fb      	strh	r3, [r7, #6]
 8001a34:	4613      	mov	r3, r2
 8001a36:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001a38:	230f      	movs	r3, #15
 8001a3a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61fb      	str	r3, [r7, #28]
 8001a40:	e036      	b.n	8001ab0 <LCD_Draw6Big+0x88>
		for(int dx = 0; dx <=width; dx++){
 8001a42:	2300      	movs	r3, #0
 8001a44:	61bb      	str	r3, [r7, #24]
 8001a46:	e02c      	b.n	8001aa2 <LCD_Draw6Big+0x7a>
			if (dy <= 3 || dx <= 3 || dy >= 12 || (dy >= 6 && dy <= 9) || (dx >= 12 && dy >= 6)) {
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	dd11      	ble.n	8001a72 <LCD_Draw6Big+0x4a>
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	dd0e      	ble.n	8001a72 <LCD_Draw6Big+0x4a>
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	2b0b      	cmp	r3, #11
 8001a58:	dc0b      	bgt.n	8001a72 <LCD_Draw6Big+0x4a>
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	2b05      	cmp	r3, #5
 8001a5e:	dd02      	ble.n	8001a66 <LCD_Draw6Big+0x3e>
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	2b09      	cmp	r3, #9
 8001a64:	dd05      	ble.n	8001a72 <LCD_Draw6Big+0x4a>
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	2b0b      	cmp	r3, #11
 8001a6a:	dd17      	ble.n	8001a9c <LCD_Draw6Big+0x74>
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	2b05      	cmp	r3, #5
 8001a70:	dd14      	ble.n	8001a9c <LCD_Draw6Big+0x74>
				int y = y0 + dy;
 8001a72:	88bb      	ldrh	r3, [r7, #4]
 8001a74:	69fa      	ldr	r2, [r7, #28]
 8001a76:	4413      	add	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4413      	add	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <LCD_Draw6Big+0x98>)
 8001a84:	7818      	ldrb	r0, [r3, #0]
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	1a9b      	subs	r3, r3, r2
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	461a      	mov	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4413      	add	r3, r2
 8001a96:	4619      	mov	r1, r3
 8001a98:	f000 fc20 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	61bb      	str	r3, [r7, #24]
 8001aa2:	7dfb      	ldrb	r3, [r7, #23]
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	ddce      	ble.n	8001a48 <LCD_Draw6Big+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3301      	adds	r3, #1
 8001aae:	61fb      	str	r3, [r7, #28]
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
 8001ab2:	69fa      	ldr	r2, [r7, #28]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	ddc4      	ble.n	8001a42 <LCD_Draw6Big+0x1a>
			}
		}
	}
}
 8001ab8:	bf00      	nop
 8001aba:	3720      	adds	r7, #32
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000000 	.word	0x20000000

08001ac4 <LCD_Draw7Big>:

void LCD_Draw7Big(uint16_t x0, uint16_t y0) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	460a      	mov	r2, r1
 8001ace:	80fb      	strh	r3, [r7, #6]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001ad4:	230f      	movs	r3, #15
 8001ad6:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61fb      	str	r3, [r7, #28]
 8001adc:	e042      	b.n	8001b64 <LCD_Draw7Big+0xa0>
		for(int dx = 0; dx <=width; dx++){
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61bb      	str	r3, [r7, #24]
 8001ae2:	e038      	b.n	8001b56 <LCD_Draw7Big+0x92>
			if ((dy <= 3) || (dx <= 3 && dy >= 12) || (dy >= 4 && dy <= 7 && dx >= 8 && dx <= 11) || (dy >= 8 && dy <= 11 && dx >= 4 && dx <= 7)) {
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	dd1d      	ble.n	8001b26 <LCD_Draw7Big+0x62>
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	dc02      	bgt.n	8001af6 <LCD_Draw7Big+0x32>
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	2b0b      	cmp	r3, #11
 8001af4:	dc17      	bgt.n	8001b26 <LCD_Draw7Big+0x62>
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	dd08      	ble.n	8001b0e <LCD_Draw7Big+0x4a>
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	2b07      	cmp	r3, #7
 8001b00:	dc05      	bgt.n	8001b0e <LCD_Draw7Big+0x4a>
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	2b07      	cmp	r3, #7
 8001b06:	dd02      	ble.n	8001b0e <LCD_Draw7Big+0x4a>
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	2b0b      	cmp	r3, #11
 8001b0c:	dd0b      	ble.n	8001b26 <LCD_Draw7Big+0x62>
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	2b07      	cmp	r3, #7
 8001b12:	dd1d      	ble.n	8001b50 <LCD_Draw7Big+0x8c>
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	2b0b      	cmp	r3, #11
 8001b18:	dc1a      	bgt.n	8001b50 <LCD_Draw7Big+0x8c>
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	dd17      	ble.n	8001b50 <LCD_Draw7Big+0x8c>
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	2b07      	cmp	r3, #7
 8001b24:	dc14      	bgt.n	8001b50 <LCD_Draw7Big+0x8c>
				int y = y0 + dy;
 8001b26:	88bb      	ldrh	r3, [r7, #4]
 8001b28:	69fa      	ldr	r2, [r7, #28]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4413      	add	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001b36:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <LCD_Draw7Big+0xb0>)
 8001b38:	7818      	ldrb	r0, [r3, #0]
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	011b      	lsls	r3, r3, #4
 8001b40:	1a9b      	subs	r3, r3, r2
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	461a      	mov	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4413      	add	r3, r2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f000 fbc6 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	3301      	adds	r3, #1
 8001b54:	61bb      	str	r3, [r7, #24]
 8001b56:	7dfb      	ldrb	r3, [r7, #23]
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	ddc2      	ble.n	8001ae4 <LCD_Draw7Big+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3301      	adds	r3, #1
 8001b62:	61fb      	str	r3, [r7, #28]
 8001b64:	7dfb      	ldrb	r3, [r7, #23]
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	ddb8      	ble.n	8001ade <LCD_Draw7Big+0x1a>
			}
		}
	}
}
 8001b6c:	bf00      	nop
 8001b6e:	3720      	adds	r7, #32
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20000000 	.word	0x20000000

08001b78 <LCD_Draw8Big>:

void LCD_Draw8Big(uint16_t x0, uint16_t y0) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	460a      	mov	r2, r1
 8001b82:	80fb      	strh	r3, [r7, #6]
 8001b84:	4613      	mov	r3, r2
 8001b86:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001b88:	230f      	movs	r3, #15
 8001b8a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
 8001b90:	e033      	b.n	8001bfa <LCD_Draw8Big+0x82>
		for(int dx = 0; dx <=width; dx++){
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
 8001b96:	e029      	b.n	8001bec <LCD_Draw8Big+0x74>
			if (dy <= 3 || dy >= 12 || (dy >= 6 && dy <= 9) || (dx >= 12) || (dx <= 3)) {
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	dd0e      	ble.n	8001bbc <LCD_Draw8Big+0x44>
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	2b0b      	cmp	r3, #11
 8001ba2:	dc0b      	bgt.n	8001bbc <LCD_Draw8Big+0x44>
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	2b05      	cmp	r3, #5
 8001ba8:	dd02      	ble.n	8001bb0 <LCD_Draw8Big+0x38>
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	2b09      	cmp	r3, #9
 8001bae:	dd05      	ble.n	8001bbc <LCD_Draw8Big+0x44>
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	2b0b      	cmp	r3, #11
 8001bb4:	dc02      	bgt.n	8001bbc <LCD_Draw8Big+0x44>
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	2b03      	cmp	r3, #3
 8001bba:	dc14      	bgt.n	8001be6 <LCD_Draw8Big+0x6e>
				int y = y0 + dy;
 8001bbc:	88bb      	ldrh	r3, [r7, #4]
 8001bbe:	69fa      	ldr	r2, [r7, #28]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4413      	add	r3, r2
 8001bca:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <LCD_Draw8Big+0x94>)
 8001bce:	7818      	ldrb	r0, [r3, #0]
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	1a9b      	subs	r3, r3, r2
 8001bd8:	011b      	lsls	r3, r3, #4
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4413      	add	r3, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f000 fb7b 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	3301      	adds	r3, #1
 8001bea:	61bb      	str	r3, [r7, #24]
 8001bec:	7dfb      	ldrb	r3, [r7, #23]
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	ddd1      	ble.n	8001b98 <LCD_Draw8Big+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
 8001bfc:	69fa      	ldr	r2, [r7, #28]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	ddc7      	ble.n	8001b92 <LCD_Draw8Big+0x1a>
			}
		}
	}
}
 8001c02:	bf00      	nop
 8001c04:	3720      	adds	r7, #32
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000000 	.word	0x20000000

08001c10 <LCD_Draw9Big>:

void LCD_Draw9Big(uint16_t x0, uint16_t y0) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	460a      	mov	r2, r1
 8001c1a:	80fb      	strh	r3, [r7, #6]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001c20:	230f      	movs	r3, #15
 8001c22:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001c24:	2300      	movs	r3, #0
 8001c26:	61fb      	str	r3, [r7, #28]
 8001c28:	e036      	b.n	8001c98 <LCD_Draw9Big+0x88>
		for(int dx = 0; dx <=width; dx++){
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
 8001c2e:	e02c      	b.n	8001c8a <LCD_Draw9Big+0x7a>
			if ((dx <= 3 && dy <= 9) || (dy >= 6 && dy <= 9) || (dx >= 12) || (dy <= 3) || (dy >= 12)) {
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	dc02      	bgt.n	8001c3c <LCD_Draw9Big+0x2c>
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	2b09      	cmp	r3, #9
 8001c3a:	dd0e      	ble.n	8001c5a <LCD_Draw9Big+0x4a>
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	2b05      	cmp	r3, #5
 8001c40:	dd02      	ble.n	8001c48 <LCD_Draw9Big+0x38>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	2b09      	cmp	r3, #9
 8001c46:	dd08      	ble.n	8001c5a <LCD_Draw9Big+0x4a>
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2b0b      	cmp	r3, #11
 8001c4c:	dc05      	bgt.n	8001c5a <LCD_Draw9Big+0x4a>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	dd02      	ble.n	8001c5a <LCD_Draw9Big+0x4a>
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	2b0b      	cmp	r3, #11
 8001c58:	dd14      	ble.n	8001c84 <LCD_Draw9Big+0x74>
				int y = y0 + dy;
 8001c5a:	88bb      	ldrh	r3, [r7, #4]
 8001c5c:	69fa      	ldr	r2, [r7, #28]
 8001c5e:	4413      	add	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001c62:	88fb      	ldrh	r3, [r7, #6]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4413      	add	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001c6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <LCD_Draw9Big+0x98>)
 8001c6c:	7818      	ldrb	r0, [r3, #0]
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4613      	mov	r3, r2
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	1a9b      	subs	r3, r3, r2
 8001c76:	011b      	lsls	r3, r3, #4
 8001c78:	461a      	mov	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f000 fb2c 	bl	80022dc <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	3301      	adds	r3, #1
 8001c88:	61bb      	str	r3, [r7, #24]
 8001c8a:	7dfb      	ldrb	r3, [r7, #23]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	ddce      	ble.n	8001c30 <LCD_Draw9Big+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3301      	adds	r3, #1
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
 8001c9a:	69fa      	ldr	r2, [r7, #28]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	ddc4      	ble.n	8001c2a <LCD_Draw9Big+0x1a>
			}
		}
	}
}
 8001ca0:	bf00      	nop
 8001ca2:	3720      	adds	r7, #32
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000000 	.word	0x20000000

08001cac <LCD_GpioInit>:
extern SPI_HandleTypeDef hspi5;
extern LTDC_HandleTypeDef hltdc;

uint8_t GRAM[LCD_WIDTH * LCD_HEIGHT] = {30, 30, 30, 10, 123, 123, 123, 123, 123, 123};

void LCD_GpioInit() {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0
	MX_SPI5_Init();
 8001cb2:	f001 fb5b 	bl	800336c <MX_SPI5_Init>
	// Enable Port Clock
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <LCD_GpioInit+0x90>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a1f      	ldr	r2, [pc, #124]	; (8001d3c <LCD_GpioInit+0x90>)
 8001cc0:	f043 0304 	orr.w	r3, r3, #4
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <LCD_GpioInit+0x90>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <LCD_GpioInit+0x90>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a18      	ldr	r2, [pc, #96]	; (8001d3c <LCD_GpioInit+0x90>)
 8001cdc:	f043 0308 	orr.w	r3, r3, #8
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <LCD_GpioInit+0x90>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
	// Initialize NCS and DCX Port
	GPIO_InitTypeDef Gpio_InitStruct;
	Gpio_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	613b      	str	r3, [r7, #16]
	Gpio_InitStruct.Pull = GPIO_PULLUP;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	617b      	str	r3, [r7, #20]
	Gpio_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	61bb      	str	r3, [r7, #24]
	Gpio_InitStruct.Pin = LCD_NCS_PIN;
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LCD_NCS_GPIO, &Gpio_InitStruct);
 8001cfe:	f107 030c 	add.w	r3, r7, #12
 8001d02:	4619      	mov	r1, r3
 8001d04:	480e      	ldr	r0, [pc, #56]	; (8001d40 <LCD_GpioInit+0x94>)
 8001d06:	f001 fe5b 	bl	80039c0 <HAL_GPIO_Init>
	Gpio_InitStruct.Pin = LCD_DCX_PIN;
 8001d0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d0e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LCD_DCX_GPIO, &Gpio_InitStruct);
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	4619      	mov	r1, r3
 8001d16:	480b      	ldr	r0, [pc, #44]	; (8001d44 <LCD_GpioInit+0x98>)
 8001d18:	f001 fe52 	bl	80039c0 <HAL_GPIO_Init>
	// Initialize NCS and DCX value
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	2104      	movs	r1, #4
 8001d20:	4807      	ldr	r0, [pc, #28]	; (8001d40 <LCD_GpioInit+0x94>)
 8001d22:	f001 fff7 	bl	8003d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, GPIO_PIN_SET);
 8001d26:	2201      	movs	r2, #1
 8001d28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d2c:	4805      	ldr	r0, [pc, #20]	; (8001d44 <LCD_GpioInit+0x98>)
 8001d2e:	f001 fff1 	bl	8003d14 <HAL_GPIO_WritePin>
}
 8001d32:	bf00      	nop
 8001d34:	3720      	adds	r7, #32
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40020800 	.word	0x40020800
 8001d44:	40020c00 	.word	0x40020c00

08001d48 <LCD_LtdcInit>:

void LCD_LtdcInit() {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	MX_LTDC_Init();
 8001d4c:	f000 faf0 	bl	8002330 <MX_LTDC_Init>
	HAL_LTDC_SetAddress(&hltdc, (uint32_t)GRAM, LTDC_LAYER_1);
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <LCD_LtdcInit+0x38>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	4619      	mov	r1, r3
 8001d56:	480b      	ldr	r0, [pc, #44]	; (8001d84 <LCD_LtdcInit+0x3c>)
 8001d58:	f002 f9d9 	bl	800410e <HAL_LTDC_SetAddress>
	HAL_LTDC_ConfigCLUT(&hltdc, CLUT, 256, LTDC_LAYER_1);
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d62:	4909      	ldr	r1, [pc, #36]	; (8001d88 <LCD_LtdcInit+0x40>)
 8001d64:	4807      	ldr	r0, [pc, #28]	; (8001d84 <LCD_LtdcInit+0x3c>)
 8001d66:	f002 f925 	bl	8003fb4 <HAL_LTDC_ConfigCLUT>
	HAL_LTDC_EnableCLUT(&hltdc, LTDC_LAYER_1);
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4805      	ldr	r0, [pc, #20]	; (8001d84 <LCD_LtdcInit+0x3c>)
 8001d6e:	f002 f995 	bl	800409c <HAL_LTDC_EnableCLUT>
	HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8001d72:	2102      	movs	r1, #2
 8001d74:	4803      	ldr	r0, [pc, #12]	; (8001d84 <LCD_LtdcInit+0x3c>)
 8001d76:	f002 fa00 	bl	800417a <HAL_LTDC_Reload>
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000004 	.word	0x20000004
 8001d84:	20012c34 	.word	0x20012c34
 8001d88:	08006e54 	.word	0x08006e54

08001d8c <LCD_DispInit_Spi>:

void LCD_DispInit_Spi() {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
	//SOFTWARE RESET
	LCD_WriteCommand(0x01);
 8001d90:	2001      	movs	r0, #1
 8001d92:	f000 fa47 	bl	8002224 <LCD_WriteCommand>
	HAL_Delay(1000);
 8001d96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d9a:	f001 fcbb 	bl	8003714 <HAL_Delay>

	//POWER CONTROL A
	LCD_WriteCommand(0xCB);
 8001d9e:	20cb      	movs	r0, #203	; 0xcb
 8001da0:	f000 fa40 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x39);
 8001da4:	2039      	movs	r0, #57	; 0x39
 8001da6:	f000 fa6b 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x2C);
 8001daa:	202c      	movs	r0, #44	; 0x2c
 8001dac:	f000 fa68 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x00);
 8001db0:	2000      	movs	r0, #0
 8001db2:	f000 fa65 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x34);
 8001db6:	2034      	movs	r0, #52	; 0x34
 8001db8:	f000 fa62 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x02);
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	f000 fa5f 	bl	8002280 <LCD_WriteData>

	//POWER CONTROL B
	LCD_WriteCommand(0xCF);
 8001dc2:	20cf      	movs	r0, #207	; 0xcf
 8001dc4:	f000 fa2e 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f000 fa59 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0xC1);
 8001dce:	20c1      	movs	r0, #193	; 0xc1
 8001dd0:	f000 fa56 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x30);
 8001dd4:	2030      	movs	r0, #48	; 0x30
 8001dd6:	f000 fa53 	bl	8002280 <LCD_WriteData>

	//DRIVER TIMING CONTROL A
	LCD_WriteCommand(0xE8);
 8001dda:	20e8      	movs	r0, #232	; 0xe8
 8001ddc:	f000 fa22 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x85);
 8001de0:	2085      	movs	r0, #133	; 0x85
 8001de2:	f000 fa4d 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x00);
 8001de6:	2000      	movs	r0, #0
 8001de8:	f000 fa4a 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x78);
 8001dec:	2078      	movs	r0, #120	; 0x78
 8001dee:	f000 fa47 	bl	8002280 <LCD_WriteData>

	//DRIVER TIMING CONTROL B
	LCD_WriteCommand(0xEA);
 8001df2:	20ea      	movs	r0, #234	; 0xea
 8001df4:	f000 fa16 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f000 fa41 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x00);
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f000 fa3e 	bl	8002280 <LCD_WriteData>

	//POWER ON SEQUENCE CONTROL
	LCD_WriteCommand(0xED);
 8001e04:	20ed      	movs	r0, #237	; 0xed
 8001e06:	f000 fa0d 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x64);
 8001e0a:	2064      	movs	r0, #100	; 0x64
 8001e0c:	f000 fa38 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x03);
 8001e10:	2003      	movs	r0, #3
 8001e12:	f000 fa35 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x12);
 8001e16:	2012      	movs	r0, #18
 8001e18:	f000 fa32 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x81);
 8001e1c:	2081      	movs	r0, #129	; 0x81
 8001e1e:	f000 fa2f 	bl	8002280 <LCD_WriteData>

	//PUMP RATIO CONTROL
	LCD_WriteCommand(0xF7);
 8001e22:	20f7      	movs	r0, #247	; 0xf7
 8001e24:	f000 f9fe 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x20);
 8001e28:	2020      	movs	r0, #32
 8001e2a:	f000 fa29 	bl	8002280 <LCD_WriteData>

	//POWER CONTROL,VRH[5:0]
	LCD_WriteCommand(0xC0);
 8001e2e:	20c0      	movs	r0, #192	; 0xc0
 8001e30:	f000 f9f8 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x23);
 8001e34:	2023      	movs	r0, #35	; 0x23
 8001e36:	f000 fa23 	bl	8002280 <LCD_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	LCD_WriteCommand(0xC1);
 8001e3a:	20c1      	movs	r0, #193	; 0xc1
 8001e3c:	f000 f9f2 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 8001e40:	2010      	movs	r0, #16
 8001e42:	f000 fa1d 	bl	8002280 <LCD_WriteData>

	//VCM CONTROL
	LCD_WriteCommand(0xC5);
 8001e46:	20c5      	movs	r0, #197	; 0xc5
 8001e48:	f000 f9ec 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x3E);
 8001e4c:	203e      	movs	r0, #62	; 0x3e
 8001e4e:	f000 fa17 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x28);
 8001e52:	2028      	movs	r0, #40	; 0x28
 8001e54:	f000 fa14 	bl	8002280 <LCD_WriteData>

	//VCM CONTROL 2
	LCD_WriteCommand(0xC7);
 8001e58:	20c7      	movs	r0, #199	; 0xc7
 8001e5a:	f000 f9e3 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x86);
 8001e5e:	2086      	movs	r0, #134	; 0x86
 8001e60:	f000 fa0e 	bl	8002280 <LCD_WriteData>

	//MEMORY ACCESS CONTROL
	LCD_WriteCommand(0x36);
 8001e64:	2036      	movs	r0, #54	; 0x36
 8001e66:	f000 f9dd 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x48);
 8001e6a:	2048      	movs	r0, #72	; 0x48
 8001e6c:	f000 fa08 	bl	8002280 <LCD_WriteData>

	//PIXEL FORMAT
	LCD_WriteCommand(0x3A);
 8001e70:	203a      	movs	r0, #58	; 0x3a
 8001e72:	f000 f9d7 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x55);
 8001e76:	2055      	movs	r0, #85	; 0x55
 8001e78:	f000 fa02 	bl	8002280 <LCD_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	LCD_WriteCommand(0xB1);
 8001e7c:	20b1      	movs	r0, #177	; 0xb1
 8001e7e:	f000 f9d1 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001e82:	2000      	movs	r0, #0
 8001e84:	f000 f9fc 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x18);
 8001e88:	2018      	movs	r0, #24
 8001e8a:	f000 f9f9 	bl	8002280 <LCD_WriteData>

	//DISPLAY FUNCTION CONTROL
	LCD_WriteCommand(0xB6);
 8001e8e:	20b6      	movs	r0, #182	; 0xb6
 8001e90:	f000 f9c8 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x08);
 8001e94:	2008      	movs	r0, #8
 8001e96:	f000 f9f3 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x82);
 8001e9a:	2082      	movs	r0, #130	; 0x82
 8001e9c:	f000 f9f0 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x27);
 8001ea0:	2027      	movs	r0, #39	; 0x27
 8001ea2:	f000 f9ed 	bl	8002280 <LCD_WriteData>

	//3GAMMA FUNCTION DISABLE
	LCD_WriteCommand(0xF2);
 8001ea6:	20f2      	movs	r0, #242	; 0xf2
 8001ea8:	f000 f9bc 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001eac:	2000      	movs	r0, #0
 8001eae:	f000 f9e7 	bl	8002280 <LCD_WriteData>

	//GAMMA CURVE SELECTED
	LCD_WriteCommand(0x26);
 8001eb2:	2026      	movs	r0, #38	; 0x26
 8001eb4:	f000 f9b6 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f000 f9e1 	bl	8002280 <LCD_WriteData>

	//POSITIVE GAMMA CORRECTION
	LCD_WriteCommand(0xE0);
 8001ebe:	20e0      	movs	r0, #224	; 0xe0
 8001ec0:	f000 f9b0 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x0F);
 8001ec4:	200f      	movs	r0, #15
 8001ec6:	f000 f9db 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x31);
 8001eca:	2031      	movs	r0, #49	; 0x31
 8001ecc:	f000 f9d8 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x2B);
 8001ed0:	202b      	movs	r0, #43	; 0x2b
 8001ed2:	f000 f9d5 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x0C);
 8001ed6:	200c      	movs	r0, #12
 8001ed8:	f000 f9d2 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x0E);
 8001edc:	200e      	movs	r0, #14
 8001ede:	f000 f9cf 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x08);
 8001ee2:	2008      	movs	r0, #8
 8001ee4:	f000 f9cc 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x4E);
 8001ee8:	204e      	movs	r0, #78	; 0x4e
 8001eea:	f000 f9c9 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0xF1);
 8001eee:	20f1      	movs	r0, #241	; 0xf1
 8001ef0:	f000 f9c6 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x37);
 8001ef4:	2037      	movs	r0, #55	; 0x37
 8001ef6:	f000 f9c3 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x07);
 8001efa:	2007      	movs	r0, #7
 8001efc:	f000 f9c0 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x10);
 8001f00:	2010      	movs	r0, #16
 8001f02:	f000 f9bd 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x03);
 8001f06:	2003      	movs	r0, #3
 8001f08:	f000 f9ba 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x0E);
 8001f0c:	200e      	movs	r0, #14
 8001f0e:	f000 f9b7 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x09);
 8001f12:	2009      	movs	r0, #9
 8001f14:	f000 f9b4 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x00);
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f000 f9b1 	bl	8002280 <LCD_WriteData>

	//NEGATIVE GAMMA CORRECTION
	LCD_WriteCommand(0xE1);
 8001f1e:	20e1      	movs	r0, #225	; 0xe1
 8001f20:	f000 f980 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001f24:	2000      	movs	r0, #0
 8001f26:	f000 f9ab 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x0E);
 8001f2a:	200e      	movs	r0, #14
 8001f2c:	f000 f9a8 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x14);
 8001f30:	2014      	movs	r0, #20
 8001f32:	f000 f9a5 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x03);
 8001f36:	2003      	movs	r0, #3
 8001f38:	f000 f9a2 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x11);
 8001f3c:	2011      	movs	r0, #17
 8001f3e:	f000 f99f 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x07);
 8001f42:	2007      	movs	r0, #7
 8001f44:	f000 f99c 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x31);
 8001f48:	2031      	movs	r0, #49	; 0x31
 8001f4a:	f000 f999 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0xC1);
 8001f4e:	20c1      	movs	r0, #193	; 0xc1
 8001f50:	f000 f996 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x48);
 8001f54:	2048      	movs	r0, #72	; 0x48
 8001f56:	f000 f993 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x08);
 8001f5a:	2008      	movs	r0, #8
 8001f5c:	f000 f990 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x0F);
 8001f60:	200f      	movs	r0, #15
 8001f62:	f000 f98d 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x0C);
 8001f66:	200c      	movs	r0, #12
 8001f68:	f000 f98a 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x31);
 8001f6c:	2031      	movs	r0, #49	; 0x31
 8001f6e:	f000 f987 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x36);
 8001f72:	2036      	movs	r0, #54	; 0x36
 8001f74:	f000 f984 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x0F);
 8001f78:	200f      	movs	r0, #15
 8001f7a:	f000 f981 	bl	8002280 <LCD_WriteData>

	//EXIT SLEEP
	LCD_WriteCommand(0x11);
 8001f7e:	2011      	movs	r0, #17
 8001f80:	f000 f950 	bl	8002224 <LCD_WriteCommand>
	HAL_Delay(120);
 8001f84:	2078      	movs	r0, #120	; 0x78
 8001f86:	f001 fbc5 	bl	8003714 <HAL_Delay>

	//TURN ON DISPLAY
	LCD_WriteCommand(0x29);
 8001f8a:	2029      	movs	r0, #41	; 0x29
 8001f8c:	f000 f94a 	bl	8002224 <LCD_WriteCommand>
}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <LCD_DispInit_Ltdc>:

void LCD_DispInit_Ltdc() {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
	LCD_WriteCommand(0xCA);
 8001f98:	20ca      	movs	r0, #202	; 0xca
 8001f9a:	f000 f943 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0xC3);
 8001f9e:	20c3      	movs	r0, #195	; 0xc3
 8001fa0:	f000 f96e 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x08);
 8001fa4:	2008      	movs	r0, #8
 8001fa6:	f000 f96b 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x50);
 8001faa:	2050      	movs	r0, #80	; 0x50
 8001fac:	f000 f968 	bl	8002280 <LCD_WriteData>

	// LCD_POWERB
	LCD_WriteCommand(LCD_POWERB);
 8001fb0:	20cf      	movs	r0, #207	; 0xcf
 8001fb2:	f000 f937 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f000 f962 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0xC1);
 8001fbc:	20c1      	movs	r0, #193	; 0xc1
 8001fbe:	f000 f95f 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x30);
 8001fc2:	2030      	movs	r0, #48	; 0x30
 8001fc4:	f000 f95c 	bl	8002280 <LCD_WriteData>

	// LCD_POWER_SEQ
	LCD_WriteCommand(LCD_POWER_SEQ);
 8001fc8:	20ed      	movs	r0, #237	; 0xed
 8001fca:	f000 f92b 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x64);
 8001fce:	2064      	movs	r0, #100	; 0x64
 8001fd0:	f000 f956 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x03);
 8001fd4:	2003      	movs	r0, #3
 8001fd6:	f000 f953 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x12);
 8001fda:	2012      	movs	r0, #18
 8001fdc:	f000 f950 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x81);
 8001fe0:	2081      	movs	r0, #129	; 0x81
 8001fe2:	f000 f94d 	bl	8002280 <LCD_WriteData>

	// LCD_DTCA
	LCD_WriteCommand(LCD_DTCA);
 8001fe6:	20e8      	movs	r0, #232	; 0xe8
 8001fe8:	f000 f91c 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x85);
 8001fec:	2085      	movs	r0, #133	; 0x85
 8001fee:	f000 f947 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x00);
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f000 f944 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x78);
 8001ff8:	2078      	movs	r0, #120	; 0x78
 8001ffa:	f000 f941 	bl	8002280 <LCD_WriteData>

	// LCD_POWERA
	LCD_WriteCommand(LCD_POWERA);
 8001ffe:	20cb      	movs	r0, #203	; 0xcb
 8002000:	f000 f910 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x39);
 8002004:	2039      	movs	r0, #57	; 0x39
 8002006:	f000 f93b 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x2C);
 800200a:	202c      	movs	r0, #44	; 0x2c
 800200c:	f000 f938 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x00);
 8002010:	2000      	movs	r0, #0
 8002012:	f000 f935 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x34);
 8002016:	2034      	movs	r0, #52	; 0x34
 8002018:	f000 f932 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x02);
 800201c:	2002      	movs	r0, #2
 800201e:	f000 f92f 	bl	8002280 <LCD_WriteData>

	// LCD_RPC
	LCD_WriteCommand(LCD_PRC);
 8002022:	20f7      	movs	r0, #247	; 0xf7
 8002024:	f000 f8fe 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x20);
 8002028:	2020      	movs	r0, #32
 800202a:	f000 f929 	bl	8002280 <LCD_WriteData>

	// LCD_DTCB
	LCD_WriteCommand(LCD_DTCB);
 800202e:	20ea      	movs	r0, #234	; 0xea
 8002030:	f000 f8f8 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8002034:	2000      	movs	r0, #0
 8002036:	f000 f923 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x00);
 800203a:	2000      	movs	r0, #0
 800203c:	f000 f920 	bl	8002280 <LCD_WriteData>

	// LCD_FRMCTR1
	LCD_WriteCommand(LCD_FRMCTR1);
 8002040:	20b1      	movs	r0, #177	; 0xb1
 8002042:	f000 f8ef 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8002046:	2000      	movs	r0, #0
 8002048:	f000 f91a 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x1B);
 800204c:	201b      	movs	r0, #27
 800204e:	f000 f917 	bl	8002280 <LCD_WriteData>

	// LCD_DFC
	LCD_WriteCommand(LCD_DFC);
 8002052:	20b6      	movs	r0, #182	; 0xb6
 8002054:	f000 f8e6 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 8002058:	200a      	movs	r0, #10
 800205a:	f000 f911 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0xA2);
 800205e:	20a2      	movs	r0, #162	; 0xa2
 8002060:	f000 f90e 	bl	8002280 <LCD_WriteData>

	// LCD_POWER1
	LCD_WriteCommand(LCD_POWER1);
 8002064:	20c0      	movs	r0, #192	; 0xc0
 8002066:	f000 f8dd 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 800206a:	2010      	movs	r0, #16
 800206c:	f000 f908 	bl	8002280 <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER2);
 8002070:	20c1      	movs	r0, #193	; 0xc1
 8002072:	f000 f8d7 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 8002076:	2010      	movs	r0, #16
 8002078:	f000 f902 	bl	8002280 <LCD_WriteData>

	// LCD_VCOM
	LCD_WriteCommand(LCD_VCOM1);
 800207c:	20c5      	movs	r0, #197	; 0xc5
 800207e:	f000 f8d1 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x45);
 8002082:	2045      	movs	r0, #69	; 0x45
 8002084:	f000 f8fc 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x15);
 8002088:	2015      	movs	r0, #21
 800208a:	f000 f8f9 	bl	8002280 <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM2);
 800208e:	20c7      	movs	r0, #199	; 0xc7
 8002090:	f000 f8c8 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x90);
 8002094:	2090      	movs	r0, #144	; 0x90
 8002096:	f000 f8f3 	bl	8002280 <LCD_WriteData>

	// LCD_MAC
	LCD_WriteCommand(LCD_MAC);
 800209a:	2036      	movs	r0, #54	; 0x36
 800209c:	f000 f8c2 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0xC8);
 80020a0:	20c8      	movs	r0, #200	; 0xc8
 80020a2:	f000 f8ed 	bl	8002280 <LCD_WriteData>

	// LCD_GAMMA
	LCD_WriteCommand(LCD_3GAMMA_EN);
 80020a6:	20f2      	movs	r0, #242	; 0xf2
 80020a8:	f000 f8bc 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80020ac:	2000      	movs	r0, #0
 80020ae:	f000 f8e7 	bl	8002280 <LCD_WriteData>

	// LCD_RGB_INTERFACE
	LCD_WriteCommand(LCD_RGB_INTERFACE);
 80020b2:	20b0      	movs	r0, #176	; 0xb0
 80020b4:	f000 f8b6 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0xC2);
 80020b8:	20c2      	movs	r0, #194	; 0xc2
 80020ba:	f000 f8e1 	bl	8002280 <LCD_WriteData>

	// LCD_DFC
	LCD_WriteCommand(LCD_DFC);
 80020be:	20b6      	movs	r0, #182	; 0xb6
 80020c0:	f000 f8b0 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 80020c4:	200a      	movs	r0, #10
 80020c6:	f000 f8db 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0xA7);
 80020ca:	20a7      	movs	r0, #167	; 0xa7
 80020cc:	f000 f8d8 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x27);
 80020d0:	2027      	movs	r0, #39	; 0x27
 80020d2:	f000 f8d5 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x04);
 80020d6:	2004      	movs	r0, #4
 80020d8:	f000 f8d2 	bl	8002280 <LCD_WriteData>

	// COLUMN_ADDR
	LCD_WriteCommand(LCD_COLUMN_ADDR);
 80020dc:	202a      	movs	r0, #42	; 0x2a
 80020de:	f000 f8a1 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80020e2:	2000      	movs	r0, #0
 80020e4:	f000 f8cc 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x00);
 80020e8:	2000      	movs	r0, #0
 80020ea:	f000 f8c9 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x00);
 80020ee:	2000      	movs	r0, #0
 80020f0:	f000 f8c6 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0xEF);
 80020f4:	20ef      	movs	r0, #239	; 0xef
 80020f6:	f000 f8c3 	bl	8002280 <LCD_WriteData>

	// PAGE_ADDR
	LCD_WriteCommand(LCD_PAGE_ADDR);
 80020fa:	202b      	movs	r0, #43	; 0x2b
 80020fc:	f000 f892 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8002100:	2000      	movs	r0, #0
 8002102:	f000 f8bd 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x00);
 8002106:	2000      	movs	r0, #0
 8002108:	f000 f8ba 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x01);
 800210c:	2001      	movs	r0, #1
 800210e:	f000 f8b7 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x3F);
 8002112:	203f      	movs	r0, #63	; 0x3f
 8002114:	f000 f8b4 	bl	8002280 <LCD_WriteData>

	// INERFACE
	LCD_WriteCommand(LCD_INTERFACE);
 8002118:	20f6      	movs	r0, #246	; 0xf6
 800211a:	f000 f883 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 800211e:	2001      	movs	r0, #1
 8002120:	f000 f8ae 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x00);
 8002124:	2000      	movs	r0, #0
 8002126:	f000 f8ab 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x06);
 800212a:	2006      	movs	r0, #6
 800212c:	f000 f8a8 	bl	8002280 <LCD_WriteData>

	// LCD_GRAM
	LCD_WriteCommand(LCD_GRAM);
 8002130:	202c      	movs	r0, #44	; 0x2c
 8002132:	f000 f877 	bl	8002224 <LCD_WriteCommand>
	HAL_Delay(200);
 8002136:	20c8      	movs	r0, #200	; 0xc8
 8002138:	f001 faec 	bl	8003714 <HAL_Delay>

	// LCD_GAMMA
	LCD_WriteCommand(LCD_GAMMA);
 800213c:	2026      	movs	r0, #38	; 0x26
 800213e:	f000 f871 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 8002142:	2001      	movs	r0, #1
 8002144:	f000 f89c 	bl	8002280 <LCD_WriteData>

	// LCD_PGAMMA
	LCD_WriteCommand(LCD_PGAMMA);
 8002148:	20e0      	movs	r0, #224	; 0xe0
 800214a:	f000 f86b 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x0F);
 800214e:	200f      	movs	r0, #15
 8002150:	f000 f896 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x29);
 8002154:	2029      	movs	r0, #41	; 0x29
 8002156:	f000 f893 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x24);
 800215a:	2024      	movs	r0, #36	; 0x24
 800215c:	f000 f890 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x0C);
 8002160:	200c      	movs	r0, #12
 8002162:	f000 f88d 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x0E);
 8002166:	200e      	movs	r0, #14
 8002168:	f000 f88a 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x09);
 800216c:	2009      	movs	r0, #9
 800216e:	f000 f887 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x4E);
 8002172:	204e      	movs	r0, #78	; 0x4e
 8002174:	f000 f884 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x78);
 8002178:	2078      	movs	r0, #120	; 0x78
 800217a:	f000 f881 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x3C);
 800217e:	203c      	movs	r0, #60	; 0x3c
 8002180:	f000 f87e 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x09);
 8002184:	2009      	movs	r0, #9
 8002186:	f000 f87b 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x13);
 800218a:	2013      	movs	r0, #19
 800218c:	f000 f878 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x05);
 8002190:	2005      	movs	r0, #5
 8002192:	f000 f875 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x17);
 8002196:	2017      	movs	r0, #23
 8002198:	f000 f872 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x11);
 800219c:	2011      	movs	r0, #17
 800219e:	f000 f86f 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x00);
 80021a2:	2000      	movs	r0, #0
 80021a4:	f000 f86c 	bl	8002280 <LCD_WriteData>
	LCD_WriteCommand(LCD_NGAMMA);
 80021a8:	20e1      	movs	r0, #225	; 0xe1
 80021aa:	f000 f83b 	bl	8002224 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80021ae:	2000      	movs	r0, #0
 80021b0:	f000 f866 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x16);
 80021b4:	2016      	movs	r0, #22
 80021b6:	f000 f863 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x1B);
 80021ba:	201b      	movs	r0, #27
 80021bc:	f000 f860 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x04);
 80021c0:	2004      	movs	r0, #4
 80021c2:	f000 f85d 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x11);
 80021c6:	2011      	movs	r0, #17
 80021c8:	f000 f85a 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x07);
 80021cc:	2007      	movs	r0, #7
 80021ce:	f000 f857 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x31);
 80021d2:	2031      	movs	r0, #49	; 0x31
 80021d4:	f000 f854 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x33);
 80021d8:	2033      	movs	r0, #51	; 0x33
 80021da:	f000 f851 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x42);
 80021de:	2042      	movs	r0, #66	; 0x42
 80021e0:	f000 f84e 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x05);
 80021e4:	2005      	movs	r0, #5
 80021e6:	f000 f84b 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x0C);
 80021ea:	200c      	movs	r0, #12
 80021ec:	f000 f848 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x0A);
 80021f0:	200a      	movs	r0, #10
 80021f2:	f000 f845 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x28);
 80021f6:	2028      	movs	r0, #40	; 0x28
 80021f8:	f000 f842 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x2F);
 80021fc:	202f      	movs	r0, #47	; 0x2f
 80021fe:	f000 f83f 	bl	8002280 <LCD_WriteData>
	LCD_WriteData(0x0F);
 8002202:	200f      	movs	r0, #15
 8002204:	f000 f83c 	bl	8002280 <LCD_WriteData>

	// LCD_SLEEP_OUT
	LCD_WriteCommand(LCD_SLEEP_OUT);
 8002208:	2011      	movs	r0, #17
 800220a:	f000 f80b 	bl	8002224 <LCD_WriteCommand>
	HAL_Delay(200);
 800220e:	20c8      	movs	r0, #200	; 0xc8
 8002210:	f001 fa80 	bl	8003714 <HAL_Delay>

	// LCD_DISP_ON
	LCD_WriteCommand(LCD_DISPLAY_ON);
 8002214:	2029      	movs	r0, #41	; 0x29
 8002216:	f000 f805 	bl	8002224 <LCD_WriteCommand>

	// LCD_WRITE_RAM
	LCD_WriteCommand(LCD_GRAM);
 800221a:	202c      	movs	r0, #44	; 0x2c
 800221c:	f000 f802 	bl	8002224 <LCD_WriteCommand>
}
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}

08002224 <LCD_WriteCommand>:

void LCD_ModeSelect(DcMode mode){
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, mode);
}

void LCD_WriteCommand(uint8_t data) {
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_RESET);
 800222e:	2200      	movs	r2, #0
 8002230:	2104      	movs	r1, #4
 8002232:	4810      	ldr	r0, [pc, #64]	; (8002274 <LCD_WriteCommand+0x50>)
 8002234:	f001 fd6e 	bl	8003d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, GPIO_PIN_RESET);
 8002238:	2200      	movs	r2, #0
 800223a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800223e:	480e      	ldr	r0, [pc, #56]	; (8002278 <LCD_WriteCommand+0x54>)
 8002240:	f001 fd68 	bl	8003d14 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &data, 1, 1);
 8002244:	1df9      	adds	r1, r7, #7
 8002246:	2301      	movs	r3, #1
 8002248:	2201      	movs	r2, #1
 800224a:	480c      	ldr	r0, [pc, #48]	; (800227c <LCD_WriteCommand+0x58>)
 800224c:	f003 f988 	bl	8005560 <HAL_SPI_Transmit>
	while(!((hspi5.Instance->SR) & SPI_SR_TXE));
 8002250:	bf00      	nop
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <LCD_WriteCommand+0x58>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f8      	beq.n	8002252 <LCD_WriteCommand+0x2e>
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
 8002260:	2201      	movs	r2, #1
 8002262:	2104      	movs	r1, #4
 8002264:	4803      	ldr	r0, [pc, #12]	; (8002274 <LCD_WriteCommand+0x50>)
 8002266:	f001 fd55 	bl	8003d14 <HAL_GPIO_WritePin>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40020800 	.word	0x40020800
 8002278:	40020c00 	.word	0x40020c00
 800227c:	20013798 	.word	0x20013798

08002280 <LCD_WriteData>:

void LCD_WriteData(uint8_t data) {
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_RESET);
 800228a:	2200      	movs	r2, #0
 800228c:	2104      	movs	r1, #4
 800228e:	4810      	ldr	r0, [pc, #64]	; (80022d0 <LCD_WriteData+0x50>)
 8002290:	f001 fd40 	bl	8003d14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, GPIO_PIN_SET);
 8002294:	2201      	movs	r2, #1
 8002296:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800229a:	480e      	ldr	r0, [pc, #56]	; (80022d4 <LCD_WriteData+0x54>)
 800229c:	f001 fd3a 	bl	8003d14 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &data, 1, 10);
 80022a0:	1df9      	adds	r1, r7, #7
 80022a2:	230a      	movs	r3, #10
 80022a4:	2201      	movs	r2, #1
 80022a6:	480c      	ldr	r0, [pc, #48]	; (80022d8 <LCD_WriteData+0x58>)
 80022a8:	f003 f95a 	bl	8005560 <HAL_SPI_Transmit>
	while(!((hspi5.Instance->SR) & SPI_SR_TXE));
 80022ac:	bf00      	nop
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <LCD_WriteData+0x58>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0f8      	beq.n	80022ae <LCD_WriteData+0x2e>
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
 80022bc:	2201      	movs	r2, #1
 80022be:	2104      	movs	r1, #4
 80022c0:	4803      	ldr	r0, [pc, #12]	; (80022d0 <LCD_WriteData+0x50>)
 80022c2:	f001 fd27 	bl	8003d14 <HAL_GPIO_WritePin>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40020800 	.word	0x40020800
 80022d4:	40020c00 	.word	0x40020c00
 80022d8:	20013798 	.word	0x20013798

080022dc <LCD_WriteGRAM>:
	HAL_SPI_Transmit(&hspi5, data, 2, 10);
	while(!((hspi5.Instance->SR) & SPI_SR_TXE));
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
}

void LCD_WriteGRAM(uint8_t data, uint32_t addr) {
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]
	if (addr >= LCD_WIDTH * LCD_HEIGHT)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80022ee:	d205      	bcs.n	80022fc <LCD_WriteGRAM+0x20>
		return;
	GRAM[addr] = data;
 80022f0:	4a05      	ldr	r2, [pc, #20]	; (8002308 <LCD_WriteGRAM+0x2c>)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	4413      	add	r3, r2
 80022f6:	79fa      	ldrb	r2, [r7, #7]
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	e000      	b.n	80022fe <LCD_WriteGRAM+0x22>
		return;
 80022fc:	bf00      	nop
}
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	20000004 	.word	0x20000004

0800230c <LCD_ClearScreenLtdc>:

void LCD_ClearScreenLtdc(uint8_t c) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
	memset(GRAM, c, LCD_WIDTH * LCD_HEIGHT);
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 800231c:	4619      	mov	r1, r3
 800231e:	4803      	ldr	r0, [pc, #12]	; (800232c <LCD_ClearScreenLtdc+0x20>)
 8002320:	f004 fd3e 	bl	8006da0 <memset>
}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000004 	.word	0x20000004

08002330 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;


void MX_LTDC_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08e      	sub	sp, #56	; 0x38
 8002334:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002336:	1d3b      	adds	r3, r7, #4
 8002338:	2234      	movs	r2, #52	; 0x34
 800233a:	2100      	movs	r1, #0
 800233c:	4618      	mov	r0, r3
 800233e:	f004 fd2f 	bl	8006da0 <memset>

  hltdc.Instance = LTDC;
 8002342:	4b39      	ldr	r3, [pc, #228]	; (8002428 <MX_LTDC_Init+0xf8>)
 8002344:	4a39      	ldr	r2, [pc, #228]	; (800242c <MX_LTDC_Init+0xfc>)
 8002346:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002348:	4b37      	ldr	r3, [pc, #220]	; (8002428 <MX_LTDC_Init+0xf8>)
 800234a:	2200      	movs	r2, #0
 800234c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800234e:	4b36      	ldr	r3, [pc, #216]	; (8002428 <MX_LTDC_Init+0xf8>)
 8002350:	2200      	movs	r2, #0
 8002352:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002354:	4b34      	ldr	r3, [pc, #208]	; (8002428 <MX_LTDC_Init+0xf8>)
 8002356:	2200      	movs	r2, #0
 8002358:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800235a:	4b33      	ldr	r3, [pc, #204]	; (8002428 <MX_LTDC_Init+0xf8>)
 800235c:	2200      	movs	r2, #0
 800235e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8002360:	4b31      	ldr	r3, [pc, #196]	; (8002428 <MX_LTDC_Init+0xf8>)
 8002362:	2209      	movs	r2, #9
 8002364:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8002366:	4b30      	ldr	r3, [pc, #192]	; (8002428 <MX_LTDC_Init+0xf8>)
 8002368:	2201      	movs	r2, #1
 800236a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800236c:	4b2e      	ldr	r3, [pc, #184]	; (8002428 <MX_LTDC_Init+0xf8>)
 800236e:	221d      	movs	r2, #29
 8002370:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8002372:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <MX_LTDC_Init+0xf8>)
 8002374:	2203      	movs	r2, #3
 8002376:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8002378:	4b2b      	ldr	r3, [pc, #172]	; (8002428 <MX_LTDC_Init+0xf8>)
 800237a:	f240 120d 	movw	r2, #269	; 0x10d
 800237e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8002380:	4b29      	ldr	r3, [pc, #164]	; (8002428 <MX_LTDC_Init+0xf8>)
 8002382:	f240 1243 	movw	r2, #323	; 0x143
 8002386:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8002388:	4b27      	ldr	r3, [pc, #156]	; (8002428 <MX_LTDC_Init+0xf8>)
 800238a:	f240 1217 	movw	r2, #279	; 0x117
 800238e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8002390:	4b25      	ldr	r3, [pc, #148]	; (8002428 <MX_LTDC_Init+0xf8>)
 8002392:	f240 1247 	movw	r2, #327	; 0x147
 8002396:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002398:	4b23      	ldr	r3, [pc, #140]	; (8002428 <MX_LTDC_Init+0xf8>)
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80023a0:	4b21      	ldr	r3, [pc, #132]	; (8002428 <MX_LTDC_Init+0xf8>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80023a8:	4b1f      	ldr	r3, [pc, #124]	; (8002428 <MX_LTDC_Init+0xf8>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80023b0:	481d      	ldr	r0, [pc, #116]	; (8002428 <MX_LTDC_Init+0xf8>)
 80023b2:	f001 fced 	bl	8003d90 <HAL_LTDC_Init>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80023bc:	f000 faf0 	bl	80029a0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 239;
 80023c4:	23ef      	movs	r3, #239	; 0xef
 80023c6:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 319;
 80023cc:	f240 133f 	movw	r3, #319	; 0x13f
 80023d0:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_L8;
 80023d2:	2305      	movs	r3, #5
 80023d4:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0xff;
 80023d6:	23ff      	movs	r3, #255	; 0xff
 80023d8:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0x00;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80023de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023e2:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80023e4:	2307      	movs	r3, #7
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80023ec:	23f0      	movs	r3, #240	; 0xf0
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80023f0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80023f4:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002408:	1d3b      	adds	r3, r7, #4
 800240a:	2200      	movs	r2, #0
 800240c:	4619      	mov	r1, r3
 800240e:	4806      	ldr	r0, [pc, #24]	; (8002428 <MX_LTDC_Init+0xf8>)
 8002410:	f001 fd92 	bl	8003f38 <HAL_LTDC_ConfigLayer>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 800241a:	f000 fac1 	bl	80029a0 <Error_Handler>
  }

}
 800241e:	bf00      	nop
 8002420:	3738      	adds	r7, #56	; 0x38
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20012c34 	.word	0x20012c34
 800242c:	40016800 	.word	0x40016800

08002430 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b090      	sub	sp, #64	; 0x40
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a75      	ldr	r2, [pc, #468]	; (8002624 <HAL_LTDC_MspInit+0x1f4>)
 800244e:	4293      	cmp	r3, r2
 8002450:	f040 80e4 	bne.w	800261c <HAL_LTDC_MspInit+0x1ec>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002454:	2300      	movs	r3, #0
 8002456:	62bb      	str	r3, [r7, #40]	; 0x28
 8002458:	4b73      	ldr	r3, [pc, #460]	; (8002628 <HAL_LTDC_MspInit+0x1f8>)
 800245a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245c:	4a72      	ldr	r2, [pc, #456]	; (8002628 <HAL_LTDC_MspInit+0x1f8>)
 800245e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002462:	6453      	str	r3, [r2, #68]	; 0x44
 8002464:	4b70      	ldr	r3, [pc, #448]	; (8002628 <HAL_LTDC_MspInit+0x1f8>)
 8002466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002468:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800246c:	62bb      	str	r3, [r7, #40]	; 0x28
 800246e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002470:	2300      	movs	r3, #0
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
 8002474:	4b6c      	ldr	r3, [pc, #432]	; (8002628 <HAL_LTDC_MspInit+0x1f8>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	4a6b      	ldr	r2, [pc, #428]	; (8002628 <HAL_LTDC_MspInit+0x1f8>)
 800247a:	f043 0320 	orr.w	r3, r3, #32
 800247e:	6313      	str	r3, [r2, #48]	; 0x30
 8002480:	4b69      	ldr	r3, [pc, #420]	; (8002628 <HAL_LTDC_MspInit+0x1f8>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248c:	2300      	movs	r3, #0
 800248e:	623b      	str	r3, [r7, #32]
 8002490:	4b65      	ldr	r3, [pc, #404]	; (8002628 <HAL_LTDC_MspInit+0x1f8>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	4a64      	ldr	r2, [pc, #400]	; (8002628 <HAL_LTDC_MspInit+0x1f8>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6313      	str	r3, [r2, #48]	; 0x30
 800249c:	4b62      	ldr	r3, [pc, #392]	; (8002628 <HAL_LTDC_MspInit+0x1f8>)
 800249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	623b      	str	r3, [r7, #32]
 80024a6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
 80024ac:	4b5e      	ldr	r3, [pc, #376]	; (8002628 <HAL_LTDC_MspInit+0x1f8>)
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	4a5d      	ldr	r2, [pc, #372]	; (8002628 <HAL_LTDC_MspInit+0x1f8>)
 80024b2:	f043 0302 	orr.w	r3, r3, #2
 80024b6:	6313      	str	r3, [r2, #48]	; 0x30
 80024b8:	4b5b      	ldr	r3, [pc, #364]	; (8002628 <HAL_LTDC_MspInit+0x1f8>)
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	61fb      	str	r3, [r7, #28]
 80024c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024c4:	2300      	movs	r3, #0
 80024c6:	61bb      	str	r3, [r7, #24]
 80024c8:	4b57      	ldr	r3, [pc, #348]	; (8002628 <HAL_LTDC_MspInit+0x1f8>)
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	4a56      	ldr	r2, [pc, #344]	; (8002628 <HAL_LTDC_MspInit+0x1f8>)
 80024ce:	f043 0310 	orr.w	r3, r3, #16
 80024d2:	6313      	str	r3, [r2, #48]	; 0x30
 80024d4:	4b54      	ldr	r3, [pc, #336]	; (8002628 <HAL_LTDC_MspInit+0x1f8>)
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	f003 0310 	and.w	r3, r3, #16
 80024dc:	61bb      	str	r3, [r7, #24]
 80024de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024e0:	2300      	movs	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	4b50      	ldr	r3, [pc, #320]	; (8002628 <HAL_LTDC_MspInit+0x1f8>)
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	4a4f      	ldr	r2, [pc, #316]	; (8002628 <HAL_LTDC_MspInit+0x1f8>)
 80024ea:	f043 0308 	orr.w	r3, r3, #8
 80024ee:	6313      	str	r3, [r2, #48]	; 0x30
 80024f0:	4b4d      	ldr	r3, [pc, #308]	; (8002628 <HAL_LTDC_MspInit+0x1f8>)
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	617b      	str	r3, [r7, #20]
 80024fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024fc:	2300      	movs	r3, #0
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	4b49      	ldr	r3, [pc, #292]	; (8002628 <HAL_LTDC_MspInit+0x1f8>)
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	4a48      	ldr	r2, [pc, #288]	; (8002628 <HAL_LTDC_MspInit+0x1f8>)
 8002506:	f043 0304 	orr.w	r3, r3, #4
 800250a:	6313      	str	r3, [r2, #48]	; 0x30
 800250c:	4b46      	ldr	r3, [pc, #280]	; (8002628 <HAL_LTDC_MspInit+0x1f8>)
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	4b42      	ldr	r3, [pc, #264]	; (8002628 <HAL_LTDC_MspInit+0x1f8>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	4a41      	ldr	r2, [pc, #260]	; (8002628 <HAL_LTDC_MspInit+0x1f8>)
 8002522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002526:	6313      	str	r3, [r2, #48]	; 0x30
 8002528:	4b3f      	ldr	r3, [pc, #252]	; (8002628 <HAL_LTDC_MspInit+0x1f8>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	68fb      	ldr	r3, [r7, #12]
    PA12     ------> LTDC_R5
    PD3     ------> LTDC_G7
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002538:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253a:	2302      	movs	r3, #2
 800253c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002542:	2300      	movs	r3, #0
 8002544:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002546:	230e      	movs	r3, #14
 8002548:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800254a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800254e:	4619      	mov	r1, r3
 8002550:	4836      	ldr	r0, [pc, #216]	; (800262c <HAL_LTDC_MspInit+0x1fc>)
 8002552:	f001 fa35 	bl	80039c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8002556:	f641 0358 	movw	r3, #6232	; 0x1858
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255c:	2302      	movs	r3, #2
 800255e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002564:	2300      	movs	r3, #0
 8002566:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002568:	230e      	movs	r3, #14
 800256a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002570:	4619      	mov	r1, r3
 8002572:	482f      	ldr	r0, [pc, #188]	; (8002630 <HAL_LTDC_MspInit+0x200>)
 8002574:	f001 fa24 	bl	80039c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002578:	2303      	movs	r3, #3
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257c:	2302      	movs	r3, #2
 800257e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002584:	2300      	movs	r3, #0
 8002586:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002588:	2309      	movs	r3, #9
 800258a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800258c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002590:	4619      	mov	r1, r3
 8002592:	4828      	ldr	r0, [pc, #160]	; (8002634 <HAL_LTDC_MspInit+0x204>)
 8002594:	f001 fa14 	bl	80039c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_11;
 8002598:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259e:	2302      	movs	r3, #2
 80025a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a6:	2300      	movs	r3, #0
 80025a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025aa:	230e      	movs	r3, #14
 80025ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025b2:	4619      	mov	r1, r3
 80025b4:	4820      	ldr	r0, [pc, #128]	; (8002638 <HAL_LTDC_MspInit+0x208>)
 80025b6:	f001 fa03 	bl	80039c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 80025ba:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80025be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c8:	2300      	movs	r3, #0
 80025ca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025cc:	230e      	movs	r3, #14
 80025ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025d4:	4619      	mov	r1, r3
 80025d6:	4817      	ldr	r0, [pc, #92]	; (8002634 <HAL_LTDC_MspInit+0x204>)
 80025d8:	f001 f9f2 	bl	80039c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80025dc:	2308      	movs	r3, #8
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e0:	2302      	movs	r3, #2
 80025e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e8:	2300      	movs	r3, #0
 80025ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025ec:	230e      	movs	r3, #14
 80025ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025f4:	4619      	mov	r1, r3
 80025f6:	4811      	ldr	r0, [pc, #68]	; (800263c <HAL_LTDC_MspInit+0x20c>)
 80025f8:	f001 f9e2 	bl	80039c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025fc:	23c0      	movs	r3, #192	; 0xc0
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	2302      	movs	r3, #2
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002608:	2300      	movs	r3, #0
 800260a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800260c:	230e      	movs	r3, #14
 800260e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002610:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002614:	4619      	mov	r1, r3
 8002616:	480a      	ldr	r0, [pc, #40]	; (8002640 <HAL_LTDC_MspInit+0x210>)
 8002618:	f001 f9d2 	bl	80039c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800261c:	bf00      	nop
 800261e:	3740      	adds	r7, #64	; 0x40
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40016800 	.word	0x40016800
 8002628:	40023800 	.word	0x40023800
 800262c:	40021400 	.word	0x40021400
 8002630:	40020000 	.word	0x40020000
 8002634:	40020400 	.word	0x40020400
 8002638:	40021800 	.word	0x40021800
 800263c:	40020c00 	.word	0x40020c00
 8002640:	40020800 	.word	0x40020800

08002644 <main>:
static void MX_TIM6_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_RTC_Init(void);

int main(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  HAL_Init();
 8002648:	f000 fff2 	bl	8003630 <HAL_Init>
  SystemClock_Config();
 800264c:	f000 f83c 	bl	80026c8 <SystemClock_Config>
  MX_GPIO_Init();
 8002650:	f000 f948 	bl	80028e4 <MX_GPIO_Init>
  LCD_GpioInit();
 8002654:	f7ff fb2a 	bl	8001cac <LCD_GpioInit>
  LCD_LtdcInit();
 8002658:	f7ff fb76 	bl	8001d48 <LCD_LtdcInit>
  LCD_DispInit_Spi();
 800265c:	f7ff fb96 	bl	8001d8c <LCD_DispInit_Spi>
  LCD_DispInit_Ltdc();
 8002660:	f7ff fc98 	bl	8001f94 <LCD_DispInit_Ltdc>
  initializeGPIONVIC();
 8002664:	f000 f9a4 	bl	80029b0 <initializeGPIONVIC>

  MX_TIM6_Init();
 8002668:	f000 f8dc 	bl	8002824 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 800266c:	f000 f910 	bl	8002890 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002670:	f000 f8b2 	bl	80027d8 <MX_RTC_Init>

  InitialScreen();
 8002674:	f000 fdfc 	bl	8003270 <InitialScreen>
  MenuScreen();
 8002678:	f000 fe18 	bl	80032ac <MenuScreen>

  /* USER CODE BEGIN 2 */
  HAL_Delay(200);
 800267c:	20c8      	movs	r0, #200	; 0xc8
 800267e:	f001 f849 	bl	8003714 <HAL_Delay>
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, SET);
 8002682:	2201      	movs	r2, #1
 8002684:	2102      	movs	r1, #2
 8002686:	480c      	ldr	r0, [pc, #48]	; (80026b8 <main+0x74>)
 8002688:	f001 fb44 	bl	8003d14 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800268c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002690:	f001 f840 	bl	8003714 <HAL_Delay>
  memset(buffer, 0, sizeof(buffer));
 8002694:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002698:	2100      	movs	r1, #0
 800269a:	4808      	ldr	r0, [pc, #32]	; (80026bc <main+0x78>)
 800269c:	f004 fb80 	bl	8006da0 <memset>
  HAL_TIM_Base_Start_IT(&htim6);
 80026a0:	4807      	ldr	r0, [pc, #28]	; (80026c0 <main+0x7c>)
 80026a2:	f003 f97b 	bl	800599c <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80026a6:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <main+0x80>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <main+0x80>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0220 	orr.w	r2, r2, #32
 80026b4:	60da      	str	r2, [r3, #12]

  while (1)
 80026b6:	e7fe      	b.n	80026b6 <main+0x72>
 80026b8:	40021400 	.word	0x40021400
 80026bc:	20013328 	.word	0x20013328
 80026c0:	20012d3c 	.word	0x20012d3c
 80026c4:	20012cdc 	.word	0x20012cdc

080026c8 <SystemClock_Config>:

  }
}

void SystemClock_Config(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b0a0      	sub	sp, #128	; 0x80
 80026cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026d2:	2230      	movs	r2, #48	; 0x30
 80026d4:	2100      	movs	r1, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f004 fb62 	bl	8006da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026ec:	f107 030c 	add.w	r3, r7, #12
 80026f0:	2230      	movs	r2, #48	; 0x30
 80026f2:	2100      	movs	r1, #0
 80026f4:	4618      	mov	r0, r3
 80026f6:	f004 fb53 	bl	8006da0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	4b34      	ldr	r3, [pc, #208]	; (80027d0 <SystemClock_Config+0x108>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	4a33      	ldr	r2, [pc, #204]	; (80027d0 <SystemClock_Config+0x108>)
 8002704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002708:	6413      	str	r3, [r2, #64]	; 0x40
 800270a:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <SystemClock_Config+0x108>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002716:	2300      	movs	r3, #0
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	4b2e      	ldr	r3, [pc, #184]	; (80027d4 <SystemClock_Config+0x10c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a2d      	ldr	r2, [pc, #180]	; (80027d4 <SystemClock_Config+0x10c>)
 8002720:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	4b2b      	ldr	r3, [pc, #172]	; (80027d4 <SystemClock_Config+0x10c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002732:	230a      	movs	r3, #10
 8002734:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002736:	2301      	movs	r3, #1
 8002738:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800273a:	2310      	movs	r3, #16
 800273c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800273e:	2301      	movs	r3, #1
 8002740:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002742:	2302      	movs	r3, #2
 8002744:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002746:	2300      	movs	r3, #0
 8002748:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800274a:	2308      	movs	r3, #8
 800274c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 800274e:	23b4      	movs	r3, #180	; 0xb4
 8002750:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002752:	2302      	movs	r3, #2
 8002754:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002756:	2304      	movs	r3, #4
 8002758:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800275a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800275e:	4618      	mov	r0, r3
 8002760:	f001 ff28 	bl	80045b4 <HAL_RCC_OscConfig>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800276a:	f000 f919 	bl	80029a0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800276e:	f001 fed1 	bl	8004514 <HAL_PWREx_EnableOverDrive>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002778:	f000 f912 	bl	80029a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800277c:	230f      	movs	r3, #15
 800277e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002780:	2302      	movs	r3, #2
 8002782:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002784:	2300      	movs	r3, #0
 8002786:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002788:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800278c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800278e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002792:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002794:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002798:	2105      	movs	r1, #5
 800279a:	4618      	mov	r0, r3
 800279c:	f002 f982 	bl	8004aa4 <HAL_RCC_ClockConfig>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80027a6:	f000 f8fb 	bl	80029a0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80027aa:	2320      	movs	r3, #32
 80027ac:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80027ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027b2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027b4:	f107 030c 	add.w	r3, r7, #12
 80027b8:	4618      	mov	r0, r3
 80027ba:	f002 fb65 	bl	8004e88 <HAL_RCCEx_PeriphCLKConfig>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <SystemClock_Config+0x100>
  {
    Error_Handler();
 80027c4:	f000 f8ec 	bl	80029a0 <Error_Handler>
  }
}
 80027c8:	bf00      	nop
 80027ca:	3780      	adds	r7, #128	; 0x80
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40023800 	.word	0x40023800
 80027d4:	40007000 	.word	0x40007000

080027d8 <MX_RTC_Init>:
static void MX_RTC_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80027dc:	4b0f      	ldr	r3, [pc, #60]	; (800281c <MX_RTC_Init+0x44>)
 80027de:	4a10      	ldr	r2, [pc, #64]	; (8002820 <MX_RTC_Init+0x48>)
 80027e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <MX_RTC_Init+0x44>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <MX_RTC_Init+0x44>)
 80027ea:	227f      	movs	r2, #127	; 0x7f
 80027ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80027ee:	4b0b      	ldr	r3, [pc, #44]	; (800281c <MX_RTC_Init+0x44>)
 80027f0:	22ff      	movs	r2, #255	; 0xff
 80027f2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80027f4:	4b09      	ldr	r3, [pc, #36]	; (800281c <MX_RTC_Init+0x44>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80027fa:	4b08      	ldr	r3, [pc, #32]	; (800281c <MX_RTC_Init+0x44>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <MX_RTC_Init+0x44>)
 8002802:	2200      	movs	r2, #0
 8002804:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002806:	4805      	ldr	r0, [pc, #20]	; (800281c <MX_RTC_Init+0x44>)
 8002808:	f002 fcfc 	bl	8005204 <HAL_RTC_Init>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002812:	f000 f8c5 	bl	80029a0 <Error_Handler>

  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20012d1c 	.word	0x20012d1c
 8002820:	40002800 	.word	0x40002800

08002824 <MX_TIM6_Init>:
static void MX_TIM6_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800282a:	463b      	mov	r3, r7
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002832:	4b15      	ldr	r3, [pc, #84]	; (8002888 <MX_TIM6_Init+0x64>)
 8002834:	4a15      	ldr	r2, [pc, #84]	; (800288c <MX_TIM6_Init+0x68>)
 8002836:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 720;
 8002838:	4b13      	ldr	r3, [pc, #76]	; (8002888 <MX_TIM6_Init+0x64>)
 800283a:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800283e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <MX_TIM6_Init+0x64>)
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1999;
 8002846:	4b10      	ldr	r3, [pc, #64]	; (8002888 <MX_TIM6_Init+0x64>)
 8002848:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800284c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800284e:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <MX_TIM6_Init+0x64>)
 8002850:	2200      	movs	r2, #0
 8002852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002854:	480c      	ldr	r0, [pc, #48]	; (8002888 <MX_TIM6_Init+0x64>)
 8002856:	f003 f847 	bl	80058e8 <HAL_TIM_Base_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002860:	f000 f89e 	bl	80029a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002864:	2300      	movs	r3, #0
 8002866:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002868:	2300      	movs	r3, #0
 800286a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800286c:	463b      	mov	r3, r7
 800286e:	4619      	mov	r1, r3
 8002870:	4805      	ldr	r0, [pc, #20]	; (8002888 <MX_TIM6_Init+0x64>)
 8002872:	f003 fadd 	bl	8005e30 <HAL_TIMEx_MasterConfigSynchronization>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800287c:	f000 f890 	bl	80029a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20012d3c 	.word	0x20012d3c
 800288c:	40001000 	.word	0x40001000

08002890 <MX_USART1_UART_Init>:
static void MX_USART1_UART_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002894:	4b11      	ldr	r3, [pc, #68]	; (80028dc <MX_USART1_UART_Init+0x4c>)
 8002896:	4a12      	ldr	r2, [pc, #72]	; (80028e0 <MX_USART1_UART_Init+0x50>)
 8002898:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800289a:	4b10      	ldr	r3, [pc, #64]	; (80028dc <MX_USART1_UART_Init+0x4c>)
 800289c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028a2:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <MX_USART1_UART_Init+0x4c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <MX_USART1_UART_Init+0x4c>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028ae:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <MX_USART1_UART_Init+0x4c>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028b4:	4b09      	ldr	r3, [pc, #36]	; (80028dc <MX_USART1_UART_Init+0x4c>)
 80028b6:	220c      	movs	r2, #12
 80028b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ba:	4b08      	ldr	r3, [pc, #32]	; (80028dc <MX_USART1_UART_Init+0x4c>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <MX_USART1_UART_Init+0x4c>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028c6:	4805      	ldr	r0, [pc, #20]	; (80028dc <MX_USART1_UART_Init+0x4c>)
 80028c8:	f003 fb42 	bl	8005f50 <HAL_UART_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80028d2:	f000 f865 	bl	80029a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20012cdc 	.word	0x20012cdc
 80028e0:	40011000 	.word	0x40011000

080028e4 <MX_GPIO_Init>:
static void MX_GPIO_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08a      	sub	sp, #40	; 0x28
 80028e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ea:	f107 0314 	add.w	r3, r7, #20
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]
 80028f4:	609a      	str	r2, [r3, #8]
 80028f6:	60da      	str	r2, [r3, #12]
 80028f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	4b26      	ldr	r3, [pc, #152]	; (8002998 <MX_GPIO_Init+0xb4>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4a25      	ldr	r2, [pc, #148]	; (8002998 <MX_GPIO_Init+0xb4>)
 8002904:	f043 0304 	orr.w	r3, r3, #4
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4b23      	ldr	r3, [pc, #140]	; (8002998 <MX_GPIO_Init+0xb4>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	4b1f      	ldr	r3, [pc, #124]	; (8002998 <MX_GPIO_Init+0xb4>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	4a1e      	ldr	r2, [pc, #120]	; (8002998 <MX_GPIO_Init+0xb4>)
 8002920:	f043 0320 	orr.w	r3, r3, #32
 8002924:	6313      	str	r3, [r2, #48]	; 0x30
 8002926:	4b1c      	ldr	r3, [pc, #112]	; (8002998 <MX_GPIO_Init+0xb4>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	f003 0320 	and.w	r3, r3, #32
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	4b18      	ldr	r3, [pc, #96]	; (8002998 <MX_GPIO_Init+0xb4>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	4a17      	ldr	r2, [pc, #92]	; (8002998 <MX_GPIO_Init+0xb4>)
 800293c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002940:	6313      	str	r3, [r2, #48]	; 0x30
 8002942:	4b15      	ldr	r3, [pc, #84]	; (8002998 <MX_GPIO_Init+0xb4>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]
 8002952:	4b11      	ldr	r3, [pc, #68]	; (8002998 <MX_GPIO_Init+0xb4>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4a10      	ldr	r2, [pc, #64]	; (8002998 <MX_GPIO_Init+0xb4>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	4b0e      	ldr	r3, [pc, #56]	; (8002998 <MX_GPIO_Init+0xb4>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	607b      	str	r3, [r7, #4]
 8002968:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, GPIO_PIN_RESET);
 800296a:	2200      	movs	r2, #0
 800296c:	2102      	movs	r1, #2
 800296e:	480b      	ldr	r0, [pc, #44]	; (800299c <MX_GPIO_Init+0xb8>)
 8002970:	f001 f9d0 	bl	8003d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BluetoothReset_Pin */
  GPIO_InitStruct.Pin = BluetoothReset_Pin;
 8002974:	2302      	movs	r3, #2
 8002976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002978:	2301      	movs	r3, #1
 800297a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002980:	2300      	movs	r3, #0
 8002982:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BluetoothReset_GPIO_Port, &GPIO_InitStruct);
 8002984:	f107 0314 	add.w	r3, r7, #20
 8002988:	4619      	mov	r1, r3
 800298a:	4804      	ldr	r0, [pc, #16]	; (800299c <MX_GPIO_Init+0xb8>)
 800298c:	f001 f818 	bl	80039c0 <HAL_GPIO_Init>

}
 8002990:	bf00      	nop
 8002992:	3728      	adds	r7, #40	; 0x28
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40023800 	.word	0x40023800
 800299c:	40021400 	.word	0x40021400

080029a0 <Error_Handler>:
void Error_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0

}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
	...

080029b0 <initializeGPIONVIC>:
}
#endif

// initialize GPIO, NVIC
void initializeGPIONVIC(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
	/*Configure GPIO pin: PA0 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b6:	1d3b      	adds	r3, r7, #4
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029c4:	2301      	movs	r3, #1
 80029c6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029c8:	4b30      	ldr	r3, [pc, #192]	; (8002a8c <initializeGPIONVIC+0xdc>)
 80029ca:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d0:	1d3b      	adds	r3, r7, #4
 80029d2:	4619      	mov	r1, r3
 80029d4:	482e      	ldr	r0, [pc, #184]	; (8002a90 <initializeGPIONVIC+0xe0>)
 80029d6:	f000 fff3 	bl	80039c0 <HAL_GPIO_Init>
	/*EXTI interrupt init */
	HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	2103      	movs	r1, #3
 80029de:	2006      	movs	r0, #6
 80029e0:	f000 ff95 	bl	800390e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80029e4:	2006      	movs	r0, #6
 80029e6:	f000 ffae 	bl	8003946 <HAL_NVIC_EnableIRQ>

	/*Configure GPIO pin: PE1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80029ea:	2302      	movs	r3, #2
 80029ec:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029ee:	4b27      	ldr	r3, [pc, #156]	; (8002a8c <initializeGPIONVIC+0xdc>)
 80029f0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029f6:	1d3b      	adds	r3, r7, #4
 80029f8:	4619      	mov	r1, r3
 80029fa:	4826      	ldr	r0, [pc, #152]	; (8002a94 <initializeGPIONVIC+0xe4>)
 80029fc:	f000 ffe0 	bl	80039c0 <HAL_GPIO_Init>
	/*EXTI interrupt init */
	HAL_NVIC_SetPriority(EXTI1_IRQn, 3, 0);
 8002a00:	2200      	movs	r2, #0
 8002a02:	2103      	movs	r1, #3
 8002a04:	2007      	movs	r0, #7
 8002a06:	f000 ff82 	bl	800390e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002a0a:	2007      	movs	r0, #7
 8002a0c:	f000 ff9b 	bl	8003946 <HAL_NVIC_EnableIRQ>

	/*Configure GPIO pin: PE2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a10:	2304      	movs	r3, #4
 8002a12:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a14:	4b1d      	ldr	r3, [pc, #116]	; (8002a8c <initializeGPIONVIC+0xdc>)
 8002a16:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a1c:	1d3b      	adds	r3, r7, #4
 8002a1e:	4619      	mov	r1, r3
 8002a20:	481c      	ldr	r0, [pc, #112]	; (8002a94 <initializeGPIONVIC+0xe4>)
 8002a22:	f000 ffcd 	bl	80039c0 <HAL_GPIO_Init>
	/*EXTI interrupt init */
	HAL_NVIC_SetPriority(EXTI2_IRQn, 3, 0);
 8002a26:	2200      	movs	r2, #0
 8002a28:	2103      	movs	r1, #3
 8002a2a:	2008      	movs	r0, #8
 8002a2c:	f000 ff6f 	bl	800390e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002a30:	2008      	movs	r0, #8
 8002a32:	f000 ff88 	bl	8003946 <HAL_NVIC_EnableIRQ>

	/*Configure GPIO pin: PE3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a36:	2308      	movs	r3, #8
 8002a38:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a3a:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <initializeGPIONVIC+0xdc>)
 8002a3c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a42:	1d3b      	adds	r3, r7, #4
 8002a44:	4619      	mov	r1, r3
 8002a46:	4813      	ldr	r0, [pc, #76]	; (8002a94 <initializeGPIONVIC+0xe4>)
 8002a48:	f000 ffba 	bl	80039c0 <HAL_GPIO_Init>
	/*EXTI interrupt init */
	HAL_NVIC_SetPriority(EXTI3_IRQn, 3, 0);
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2103      	movs	r1, #3
 8002a50:	2009      	movs	r0, #9
 8002a52:	f000 ff5c 	bl	800390e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002a56:	2009      	movs	r0, #9
 8002a58:	f000 ff75 	bl	8003946 <HAL_NVIC_EnableIRQ>

	/*Configure GPIO pin: PE4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a5c:	2310      	movs	r3, #16
 8002a5e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a60:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <initializeGPIONVIC+0xdc>)
 8002a62:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a68:	1d3b      	adds	r3, r7, #4
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4809      	ldr	r0, [pc, #36]	; (8002a94 <initializeGPIONVIC+0xe4>)
 8002a6e:	f000 ffa7 	bl	80039c0 <HAL_GPIO_Init>
	/*EXTI interrupt init */
	HAL_NVIC_SetPriority(EXTI4_IRQn, 3, 0);
 8002a72:	2200      	movs	r2, #0
 8002a74:	2103      	movs	r1, #3
 8002a76:	200a      	movs	r0, #10
 8002a78:	f000 ff49 	bl	800390e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002a7c:	200a      	movs	r0, #10
 8002a7e:	f000 ff62 	bl	8003946 <HAL_NVIC_EnableIRQ>
}
 8002a82:	bf00      	nop
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	10110000 	.word	0x10110000
 8002a90:	40020000 	.word	0x40020000
 8002a94:	40021000 	.word	0x40021000

08002a98 <EXTI0_IRQHandler>:


// EXIT0 handler
void EXTI0_IRQHandler(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
	if (view_index == 0)
 8002a9c:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <EXTI0_IRQHandler+0x5c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d102      	bne.n	8002aaa <EXTI0_IRQHandler+0x12>
	{
		BluetoothScreen();
 8002aa4:	f000 fc18 	bl	80032d8 <BluetoothScreen>
 8002aa8:	e013      	b.n	8002ad2 <EXTI0_IRQHandler+0x3a>
	}
	else if (view_index == 1)
 8002aaa:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <EXTI0_IRQHandler+0x5c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d102      	bne.n	8002ab8 <EXTI0_IRQHandler+0x20>
	{
		ScheduleScreen();
 8002ab2:	f000 fc2f 	bl	8003314 <ScheduleScreen>
 8002ab6:	e00c      	b.n	8002ad2 <EXTI0_IRQHandler+0x3a>
	}
	else if (view_index == 2)
 8002ab8:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <EXTI0_IRQHandler+0x5c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d102      	bne.n	8002ac6 <EXTI0_IRQHandler+0x2e>
	{
		DispensedScreen();
 8002ac0:	f000 fc3e 	bl	8003340 <DispensedScreen>
 8002ac4:	e005      	b.n	8002ad2 <EXTI0_IRQHandler+0x3a>
	}
	else if (view_index == 3)
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <EXTI0_IRQHandler+0x5c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d101      	bne.n	8002ad2 <EXTI0_IRQHandler+0x3a>
	{
		MenuScreen();
 8002ace:	f000 fbed 	bl	80032ac <MenuScreen>
	}
	view_index = (view_index + 1) % 4;
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <EXTI0_IRQHandler+0x5c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	425a      	negs	r2, r3
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	f002 0203 	and.w	r2, r2, #3
 8002ae2:	bf58      	it	pl
 8002ae4:	4253      	negpl	r3, r2
 8002ae6:	4a03      	ldr	r2, [pc, #12]	; (8002af4 <EXTI0_IRQHandler+0x5c>)
 8002ae8:	6013      	str	r3, [r2, #0]
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002aea:	2001      	movs	r0, #1
 8002aec:	f001 f92c 	bl	8003d48 <HAL_GPIO_EXTI_IRQHandler>
}
 8002af0:	bf00      	nop
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	20012c2c 	.word	0x20012c2c

08002af8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
	MenuScreen();
 8002afc:	f000 fbd6 	bl	80032ac <MenuScreen>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002b00:	2002      	movs	r0, #2
 8002b02:	f001 f921 	bl	8003d48 <HAL_GPIO_EXTI_IRQHandler>
}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	af00      	add	r7, sp, #0
	BluetoothScreen();
 8002b0e:	f000 fbe3 	bl	80032d8 <BluetoothScreen>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002b12:	2004      	movs	r0, #4
 8002b14:	f001 f918 	bl	8003d48 <HAL_GPIO_EXTI_IRQHandler>
}
 8002b18:	bf00      	nop
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
	ScheduleScreen();
 8002b20:	f000 fbf8 	bl	8003314 <ScheduleScreen>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002b24:	2008      	movs	r0, #8
 8002b26:	f001 f90f 	bl	8003d48 <HAL_GPIO_EXTI_IRQHandler>
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	af00      	add	r7, sp, #0
	DispensedScreen();
 8002b32:	f000 fc05 	bl	8003340 <DispensedScreen>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002b36:	2010      	movs	r0, #16
 8002b38:	f001 f906 	bl	8003d48 <HAL_GPIO_EXTI_IRQHandler>
}
 8002b3c:	bf00      	nop
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <Process_string>:

//  mon{\"mBinNumb\":\"1\",\"mMedName\":\"test\",\"mNumbPills\":\"2\",\"mTime\":\"6:48 PM\"}
//  mon{"mBinNumb":"1","mMedName":"Tylenol","mNumbPills":"1",'mTime":"3:00 PM"}
// grab data if the string format is as above
void Process_string(char arr[])
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	  strncpy (mdate, arr, 3);
 8002b48:	2203      	movs	r2, #3
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4834      	ldr	r0, [pc, #208]	; (8002c20 <Process_string+0xe0>)
 8002b4e:	f004 f93e 	bl	8006dce <strncpy>
	  strncpy (nbin, arr+16, 1);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3310      	adds	r3, #16
 8002b56:	2201      	movs	r2, #1
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4832      	ldr	r0, [pc, #200]	; (8002c24 <Process_string+0xe4>)
 8002b5c:	f004 f937 	bl	8006dce <strncpy>

	  uint8_t j=0, i=31;
 8002b60:	2300      	movs	r3, #0
 8002b62:	73fb      	strb	r3, [r7, #15]
 8002b64:	231f      	movs	r3, #31
 8002b66:	73bb      	strb	r3, [r7, #14]
	  while(arr[i] != ',')
 8002b68:	e005      	b.n	8002b76 <Process_string+0x36>
	  {
		  i++;
 8002b6a:	7bbb      	ldrb	r3, [r7, #14]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	73bb      	strb	r3, [r7, #14]
		  j++;
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	3301      	adds	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
	  while(arr[i] != ',')
 8002b76:	7bbb      	ldrb	r3, [r7, #14]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b2c      	cmp	r3, #44	; 0x2c
 8002b80:	d1f3      	bne.n	8002b6a <Process_string+0x2a>
	  }

	  strncpy (med, arr+31, j-1);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f103 011f 	add.w	r1, r3, #31
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4826      	ldr	r0, [pc, #152]	; (8002c28 <Process_string+0xe8>)
 8002b90:	f004 f91d 	bl	8006dce <strncpy>
	  strncpy (npill, arr+46+j, 1);
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	332e      	adds	r3, #46	; 0x2e
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4822      	ldr	r0, [pc, #136]	; (8002c2c <Process_string+0xec>)
 8002ba2:	f004 f914 	bl	8006dce <strncpy>
	  if(arr[62+j]==':')
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	333e      	adds	r3, #62	; 0x3e
 8002baa:	461a      	mov	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4413      	add	r3, r2
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b3a      	cmp	r3, #58	; 0x3a
 8002bb4:	d118      	bne.n	8002be8 <Process_string+0xa8>
	  {
		  strncpy (mtime, arr+58+j, 4);
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	333a      	adds	r3, #58	; 0x3a
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	2204      	movs	r2, #4
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	481b      	ldr	r0, [pc, #108]	; (8002c30 <Process_string+0xf0>)
 8002bc4:	f004 f903 	bl	8006dce <strncpy>
		  if(arr[66+j]=='A')
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	3342      	adds	r3, #66	; 0x42
 8002bcc:	461a      	mov	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b41      	cmp	r3, #65	; 0x41
 8002bd6:	d103      	bne.n	8002be0 <Process_string+0xa0>
		  {
			  apm = 0;
 8002bd8:	4b16      	ldr	r3, [pc, #88]	; (8002c34 <Process_string+0xf4>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
		  {
			  apm = 1;
		  }
	  }

}
 8002bde:	e01b      	b.n	8002c18 <Process_string+0xd8>
			  apm = 1;
 8002be0:	4b14      	ldr	r3, [pc, #80]	; (8002c34 <Process_string+0xf4>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	601a      	str	r2, [r3, #0]
}
 8002be6:	e017      	b.n	8002c18 <Process_string+0xd8>
		  strncpy (mtime, arr+58+j, 5);
 8002be8:	7bfb      	ldrb	r3, [r7, #15]
 8002bea:	333a      	adds	r3, #58	; 0x3a
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	4413      	add	r3, r2
 8002bf0:	2205      	movs	r2, #5
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	480e      	ldr	r0, [pc, #56]	; (8002c30 <Process_string+0xf0>)
 8002bf6:	f004 f8ea 	bl	8006dce <strncpy>
		  if(arr[67+j]=='A')
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	3343      	adds	r3, #67	; 0x43
 8002bfe:	461a      	mov	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4413      	add	r3, r2
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b41      	cmp	r3, #65	; 0x41
 8002c08:	d103      	bne.n	8002c12 <Process_string+0xd2>
			  apm = 0;
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <Process_string+0xf4>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
}
 8002c10:	e002      	b.n	8002c18 <Process_string+0xd8>
			  apm = 1;
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <Process_string+0xf4>)
 8002c14:	2201      	movs	r2, #1
 8002c16:	601a      	str	r2, [r3, #0]
}
 8002c18:	bf00      	nop
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20012da8 	.word	0x20012da8
 8002c24:	20013790 	.word	0x20013790
 8002c28:	2001371c 	.word	0x2001371c
 8002c2c:	20013794 	.word	0x20013794
 8002c30:	20013714 	.word	0x20013714
 8002c34:	20013324 	.word	0x20013324

08002c38 <Individual_med>:

// arr[] is the overall string possibly including several med, target[] is a 2d array
// which stores each med
void Individual_med(char arr[], char target[])
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b0a0      	sub	sp, #128	; 0x80
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
	char day[3], med[100];
	strncpy(day, arr, 3);
 8002c42:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c46:	2203      	movs	r2, #3
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f004 f8bf 	bl	8006dce <strncpy>
	int start, end, count=-1;
 8002c50:	f04f 33ff 	mov.w	r3, #4294967295
 8002c54:	67bb      	str	r3, [r7, #120]	; 0x78
	for(int i=0;i<=strlen(arr);i++)
 8002c56:	2300      	movs	r3, #0
 8002c58:	677b      	str	r3, [r7, #116]	; 0x74
 8002c5a:	e02f      	b.n	8002cbc <Individual_med+0x84>
	{
		if(arr[i]=='{')
 8002c5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b7b      	cmp	r3, #123	; 0x7b
 8002c66:	d104      	bne.n	8002c72 <Individual_med+0x3a>
		{
			start = i;
 8002c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c6a:	67fb      	str	r3, [r7, #124]	; 0x7c
			count++;
 8002c6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c6e:	3301      	adds	r3, #1
 8002c70:	67bb      	str	r3, [r7, #120]	; 0x78
		}
		if(arr[i]=='}')
 8002c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	4413      	add	r3, r2
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b7d      	cmp	r3, #125	; 0x7d
 8002c7c:	d11b      	bne.n	8002cb6 <Individual_med+0x7e>
		{
			end = i;
 8002c7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c80:	673b      	str	r3, [r7, #112]	; 0x70
			strncpy(med, arr+start, end-start+1);
 8002c82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	18d1      	adds	r1, r2, r3
 8002c88:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002c8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	3301      	adds	r3, #1
 8002c90:	461a      	mov	r2, r3
 8002c92:	f107 0308 	add.w	r3, r7, #8
 8002c96:	4618      	mov	r0, r3
 8002c98:	f004 f899 	bl	8006dce <strncpy>
			strncpy(target,day,3);
 8002c9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	6838      	ldr	r0, [r7, #0]
 8002ca6:	f004 f892 	bl	8006dce <strncpy>
			strcat(target,med);
 8002caa:	f107 0308 	add.w	r3, r7, #8
 8002cae:	4619      	mov	r1, r3
 8002cb0:	6838      	ldr	r0, [r7, #0]
 8002cb2:	f004 f87d 	bl	8006db0 <strcat>
	for(int i=0;i<=strlen(arr);i++)
 8002cb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cb8:	3301      	adds	r3, #1
 8002cba:	677b      	str	r3, [r7, #116]	; 0x74
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7fd fa95 	bl	80001ec <strlen>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d2c8      	bcs.n	8002c5c <Individual_med+0x24>
			//strncpy(target[count],day,3);
			//strcat(target[count],med);
		}
	}
}
 8002cca:	bf00      	nop
 8002ccc:	3780      	adds	r7, #128	; 0x80
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <Manage_strings>:

// stores every weekday schedule into 2d array schdule[]
void Manage_strings()
{
 8002cd4:	b590      	push	{r4, r7, lr}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
	//char weekday[7][3] = { "mon", "tue", "wed", "thu", "fri", "sat", "sun"};
	int pre = 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	607b      	str	r3, [r7, #4]
	//char *pos;	//char *pointer = buffer;
	for(int i=0; i<=strlen(buffer); i++)
 8002cde:	2300      	movs	r3, #0
 8002ce0:	603b      	str	r3, [r7, #0]
 8002ce2:	e0b2      	b.n	8002e4a <Manage_strings+0x176>
	{
		//pos = strstr(pointer, weekday[i]);
    	if (buffer[i]=='t' && buffer[i+1]=='u' && buffer[i+2]=='e')
 8002ce4:	4a65      	ldr	r2, [pc, #404]	; (8002e7c <Manage_strings+0x1a8>)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	4413      	add	r3, r2
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b74      	cmp	r3, #116	; 0x74
 8002cee:	d113      	bne.n	8002d18 <Manage_strings+0x44>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	4a61      	ldr	r2, [pc, #388]	; (8002e7c <Manage_strings+0x1a8>)
 8002cf6:	5cd3      	ldrb	r3, [r2, r3]
 8002cf8:	2b75      	cmp	r3, #117	; 0x75
 8002cfa:	d10d      	bne.n	8002d18 <Manage_strings+0x44>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	3302      	adds	r3, #2
 8002d00:	4a5e      	ldr	r2, [pc, #376]	; (8002e7c <Manage_strings+0x1a8>)
 8002d02:	5cd3      	ldrb	r3, [r2, r3]
 8002d04:	2b65      	cmp	r3, #101	; 0x65
 8002d06:	d107      	bne.n	8002d18 <Manage_strings+0x44>
    	{
    		strncpy(schedule[0],buffer,i);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	495b      	ldr	r1, [pc, #364]	; (8002e7c <Manage_strings+0x1a8>)
 8002d0e:	485c      	ldr	r0, [pc, #368]	; (8002e80 <Manage_strings+0x1ac>)
 8002d10:	f004 f85d 	bl	8006dce <strncpy>
    		pre = i;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	607b      	str	r3, [r7, #4]
    	}
    	if (buffer[i]=='w' && buffer[i+1]=='e' && buffer[i+2]=='d')
 8002d18:	4a58      	ldr	r2, [pc, #352]	; (8002e7c <Manage_strings+0x1a8>)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b77      	cmp	r3, #119	; 0x77
 8002d22:	d117      	bne.n	8002d54 <Manage_strings+0x80>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	3301      	adds	r3, #1
 8002d28:	4a54      	ldr	r2, [pc, #336]	; (8002e7c <Manage_strings+0x1a8>)
 8002d2a:	5cd3      	ldrb	r3, [r2, r3]
 8002d2c:	2b65      	cmp	r3, #101	; 0x65
 8002d2e:	d111      	bne.n	8002d54 <Manage_strings+0x80>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	3302      	adds	r3, #2
 8002d34:	4a51      	ldr	r2, [pc, #324]	; (8002e7c <Manage_strings+0x1a8>)
 8002d36:	5cd3      	ldrb	r3, [r2, r3]
 8002d38:	2b64      	cmp	r3, #100	; 0x64
 8002d3a:	d10b      	bne.n	8002d54 <Manage_strings+0x80>
    	{
    		strncpy(schedule[1],buffer+pre,i-pre);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a4f      	ldr	r2, [pc, #316]	; (8002e7c <Manage_strings+0x1a8>)
 8002d40:	1899      	adds	r1, r3, r2
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	461a      	mov	r2, r3
 8002d4a:	484e      	ldr	r0, [pc, #312]	; (8002e84 <Manage_strings+0x1b0>)
 8002d4c:	f004 f83f 	bl	8006dce <strncpy>
    		pre = i;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	607b      	str	r3, [r7, #4]
    	}
    	if (buffer[i]=='t' && buffer[i+1]=='h' && buffer[i+2]=='u')
 8002d54:	4a49      	ldr	r2, [pc, #292]	; (8002e7c <Manage_strings+0x1a8>)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	4413      	add	r3, r2
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b74      	cmp	r3, #116	; 0x74
 8002d5e:	d117      	bne.n	8002d90 <Manage_strings+0xbc>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	3301      	adds	r3, #1
 8002d64:	4a45      	ldr	r2, [pc, #276]	; (8002e7c <Manage_strings+0x1a8>)
 8002d66:	5cd3      	ldrb	r3, [r2, r3]
 8002d68:	2b68      	cmp	r3, #104	; 0x68
 8002d6a:	d111      	bne.n	8002d90 <Manage_strings+0xbc>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	3302      	adds	r3, #2
 8002d70:	4a42      	ldr	r2, [pc, #264]	; (8002e7c <Manage_strings+0x1a8>)
 8002d72:	5cd3      	ldrb	r3, [r2, r3]
 8002d74:	2b75      	cmp	r3, #117	; 0x75
 8002d76:	d10b      	bne.n	8002d90 <Manage_strings+0xbc>
    	{
    		strncpy(schedule[2],buffer+pre,i-pre);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a40      	ldr	r2, [pc, #256]	; (8002e7c <Manage_strings+0x1a8>)
 8002d7c:	1899      	adds	r1, r3, r2
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	4840      	ldr	r0, [pc, #256]	; (8002e88 <Manage_strings+0x1b4>)
 8002d88:	f004 f821 	bl	8006dce <strncpy>
    		pre = i;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	607b      	str	r3, [r7, #4]
    	}
    	if (buffer[i]=='f' && buffer[i+1]=='r' && buffer[i+2]=='i')
 8002d90:	4a3a      	ldr	r2, [pc, #232]	; (8002e7c <Manage_strings+0x1a8>)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	4413      	add	r3, r2
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b66      	cmp	r3, #102	; 0x66
 8002d9a:	d117      	bne.n	8002dcc <Manage_strings+0xf8>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	4a36      	ldr	r2, [pc, #216]	; (8002e7c <Manage_strings+0x1a8>)
 8002da2:	5cd3      	ldrb	r3, [r2, r3]
 8002da4:	2b72      	cmp	r3, #114	; 0x72
 8002da6:	d111      	bne.n	8002dcc <Manage_strings+0xf8>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	3302      	adds	r3, #2
 8002dac:	4a33      	ldr	r2, [pc, #204]	; (8002e7c <Manage_strings+0x1a8>)
 8002dae:	5cd3      	ldrb	r3, [r2, r3]
 8002db0:	2b69      	cmp	r3, #105	; 0x69
 8002db2:	d10b      	bne.n	8002dcc <Manage_strings+0xf8>
    	{
    		strncpy(schedule[3],buffer+pre,i-pre);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a31      	ldr	r2, [pc, #196]	; (8002e7c <Manage_strings+0x1a8>)
 8002db8:	1899      	adds	r1, r3, r2
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	4832      	ldr	r0, [pc, #200]	; (8002e8c <Manage_strings+0x1b8>)
 8002dc4:	f004 f803 	bl	8006dce <strncpy>
    		pre = i;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	607b      	str	r3, [r7, #4]
    	}
    	if (buffer[i]=='s' && buffer[i+1]=='a' && buffer[i+2]=='t')
 8002dcc:	4a2b      	ldr	r2, [pc, #172]	; (8002e7c <Manage_strings+0x1a8>)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b73      	cmp	r3, #115	; 0x73
 8002dd6:	d117      	bne.n	8002e08 <Manage_strings+0x134>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	4a27      	ldr	r2, [pc, #156]	; (8002e7c <Manage_strings+0x1a8>)
 8002dde:	5cd3      	ldrb	r3, [r2, r3]
 8002de0:	2b61      	cmp	r3, #97	; 0x61
 8002de2:	d111      	bne.n	8002e08 <Manage_strings+0x134>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	3302      	adds	r3, #2
 8002de8:	4a24      	ldr	r2, [pc, #144]	; (8002e7c <Manage_strings+0x1a8>)
 8002dea:	5cd3      	ldrb	r3, [r2, r3]
 8002dec:	2b74      	cmp	r3, #116	; 0x74
 8002dee:	d10b      	bne.n	8002e08 <Manage_strings+0x134>
    	{
    		strncpy(schedule[4],buffer+pre,i-pre);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a22      	ldr	r2, [pc, #136]	; (8002e7c <Manage_strings+0x1a8>)
 8002df4:	1899      	adds	r1, r3, r2
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4824      	ldr	r0, [pc, #144]	; (8002e90 <Manage_strings+0x1bc>)
 8002e00:	f003 ffe5 	bl	8006dce <strncpy>
    		pre = i;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	607b      	str	r3, [r7, #4]
    	}
    	if (buffer[i]=='s' && buffer[i+1]=='u' && buffer[i+2]=='n')
 8002e08:	4a1c      	ldr	r2, [pc, #112]	; (8002e7c <Manage_strings+0x1a8>)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b73      	cmp	r3, #115	; 0x73
 8002e12:	d117      	bne.n	8002e44 <Manage_strings+0x170>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	3301      	adds	r3, #1
 8002e18:	4a18      	ldr	r2, [pc, #96]	; (8002e7c <Manage_strings+0x1a8>)
 8002e1a:	5cd3      	ldrb	r3, [r2, r3]
 8002e1c:	2b75      	cmp	r3, #117	; 0x75
 8002e1e:	d111      	bne.n	8002e44 <Manage_strings+0x170>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	3302      	adds	r3, #2
 8002e24:	4a15      	ldr	r2, [pc, #84]	; (8002e7c <Manage_strings+0x1a8>)
 8002e26:	5cd3      	ldrb	r3, [r2, r3]
 8002e28:	2b6e      	cmp	r3, #110	; 0x6e
 8002e2a:	d10b      	bne.n	8002e44 <Manage_strings+0x170>
    	{
    		strncpy(schedule[5],buffer+pre,i-pre);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a13      	ldr	r2, [pc, #76]	; (8002e7c <Manage_strings+0x1a8>)
 8002e30:	1899      	adds	r1, r3, r2
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4816      	ldr	r0, [pc, #88]	; (8002e94 <Manage_strings+0x1c0>)
 8002e3c:	f003 ffc7 	bl	8006dce <strncpy>
    		pre = i;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	607b      	str	r3, [r7, #4]
	for(int i=0; i<=strlen(buffer); i++)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	3301      	adds	r3, #1
 8002e48:	603b      	str	r3, [r7, #0]
 8002e4a:	480c      	ldr	r0, [pc, #48]	; (8002e7c <Manage_strings+0x1a8>)
 8002e4c:	f7fd f9ce 	bl	80001ec <strlen>
 8002e50:	4602      	mov	r2, r0
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	f4bf af45 	bcs.w	8002ce4 <Manage_strings+0x10>
    	}
	}
	strncpy(schedule[6],buffer+pre,strlen(buffer));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a07      	ldr	r2, [pc, #28]	; (8002e7c <Manage_strings+0x1a8>)
 8002e5e:	189c      	adds	r4, r3, r2
 8002e60:	4806      	ldr	r0, [pc, #24]	; (8002e7c <Manage_strings+0x1a8>)
 8002e62:	f7fd f9c3 	bl	80001ec <strlen>
 8002e66:	4603      	mov	r3, r0
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	480a      	ldr	r0, [pc, #40]	; (8002e98 <Manage_strings+0x1c4>)
 8002e6e:	f003 ffae 	bl	8006dce <strncpy>

}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd90      	pop	{r4, r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20013328 	.word	0x20013328
 8002e80:	20012dac 	.word	0x20012dac
 8002e84:	20012e74 	.word	0x20012e74
 8002e88:	20012f3c 	.word	0x20012f3c
 8002e8c:	20013004 	.word	0x20013004
 8002e90:	200130cc 	.word	0x200130cc
 8002e94:	20013194 	.word	0x20013194
 8002e98:	2001325c 	.word	0x2001325c

08002e9c <letterselect>:
#include "main.h"
#include "graphic.h"
#include "lcd.h"
#include <string.h>

void letterselect(const char letter, int x, int y){
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	73fb      	strb	r3, [r7, #15]
	if( letter == 'A' ) {
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	2b41      	cmp	r3, #65	; 0x41
 8002eae:	d108      	bne.n	8002ec2 <letterselect+0x26>
		LCD_DrawABig(x, y);
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	b292      	uxth	r2, r2
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fd fb1e 	bl	80004fc <LCD_DrawABig>
		LCD_Draw8Big(x, y);
	}
	else {
		LCD_Draw9Big(x, y);
	}
}
 8002ec0:	e19f      	b.n	8003202 <letterselect+0x366>
	else if( letter == 'B' ) {
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
 8002ec4:	2b42      	cmp	r3, #66	; 0x42
 8002ec6:	d108      	bne.n	8002eda <letterselect+0x3e>
		LCD_DrawBBig(x, y);
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	b292      	uxth	r2, r2
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fd fb5a 	bl	800058c <LCD_DrawBBig>
}
 8002ed8:	e193      	b.n	8003202 <letterselect+0x366>
	else if( letter == 'C' ) {
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
 8002edc:	2b43      	cmp	r3, #67	; 0x43
 8002ede:	d108      	bne.n	8002ef2 <letterselect+0x56>
		LCD_DrawCBig(x, y);
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	b292      	uxth	r2, r2
 8002ee8:	4611      	mov	r1, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fd fbb2 	bl	8000654 <LCD_DrawCBig>
}
 8002ef0:	e187      	b.n	8003202 <letterselect+0x366>
	else if( letter == 'D' ) {
 8002ef2:	7bfb      	ldrb	r3, [r7, #15]
 8002ef4:	2b44      	cmp	r3, #68	; 0x44
 8002ef6:	d108      	bne.n	8002f0a <letterselect+0x6e>
		LCD_DrawDBig(x, y);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	b292      	uxth	r2, r2
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fd fbe8 	bl	80006d8 <LCD_DrawDBig>
}
 8002f08:	e17b      	b.n	8003202 <letterselect+0x366>
	else if( letter == 'E' ) {
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	2b45      	cmp	r3, #69	; 0x45
 8002f0e:	d108      	bne.n	8002f22 <letterselect+0x86>
		LCD_DrawEBig(x, y);
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	b292      	uxth	r2, r2
 8002f18:	4611      	mov	r1, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fd fc2e 	bl	800077c <LCD_DrawEBig>
}
 8002f20:	e16f      	b.n	8003202 <letterselect+0x366>
	else if( letter == 'F' ) {
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	2b46      	cmp	r3, #70	; 0x46
 8002f26:	d108      	bne.n	8002f3a <letterselect+0x9e>
		LCD_DrawFBig(x, y);
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	b292      	uxth	r2, r2
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd fc70 	bl	8000818 <LCD_DrawFBig>
}
 8002f38:	e163      	b.n	8003202 <letterselect+0x366>
	else if( letter == 'G' ) {
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	2b47      	cmp	r3, #71	; 0x47
 8002f3e:	d108      	bne.n	8002f52 <letterselect+0xb6>
		LCD_DrawGBig(x, y);
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	b292      	uxth	r2, r2
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd fcac 	bl	80008a8 <LCD_DrawGBig>
}
 8002f50:	e157      	b.n	8003202 <letterselect+0x366>
	else if( letter == 'H' ) {
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	2b48      	cmp	r3, #72	; 0x48
 8002f56:	d108      	bne.n	8002f6a <letterselect+0xce>
		LCD_DrawHBig(x, y);
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	b292      	uxth	r2, r2
 8002f60:	4611      	mov	r1, r2
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fd fcf2 	bl	800094c <LCD_DrawHBig>
}
 8002f68:	e14b      	b.n	8003202 <letterselect+0x366>
	else if( letter == 'I' ) {
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	2b49      	cmp	r3, #73	; 0x49
 8002f6e:	d108      	bne.n	8002f82 <letterselect+0xe6>
		LCD_DrawIBig(x, y);
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	b292      	uxth	r2, r2
 8002f78:	4611      	mov	r1, r2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd fd32 	bl	80009e4 <LCD_DrawIBig>
}
 8002f80:	e13f      	b.n	8003202 <letterselect+0x366>
	else if( letter == 'J' ) {
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
 8002f84:	2b4a      	cmp	r3, #74	; 0x4a
 8002f86:	d108      	bne.n	8002f9a <letterselect+0xfe>
		LCD_DrawJBig(x, y);
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	b292      	uxth	r2, r2
 8002f90:	4611      	mov	r1, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fd fd6c 	bl	8000a70 <LCD_DrawJBig>
}
 8002f98:	e133      	b.n	8003202 <letterselect+0x366>
	else if( letter == 'K' ) {
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	2b4b      	cmp	r3, #75	; 0x4b
 8002f9e:	d108      	bne.n	8002fb2 <letterselect+0x116>
		LCD_DrawKBig(x, y);
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	b292      	uxth	r2, r2
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fd fda8 	bl	8000b00 <LCD_DrawKBig>
}
 8002fb0:	e127      	b.n	8003202 <letterselect+0x366>
	else if( letter == 'L' ) {
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
 8002fb4:	2b4c      	cmp	r3, #76	; 0x4c
 8002fb6:	d108      	bne.n	8002fca <letterselect+0x12e>
		LCD_DrawLBig(x, y);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	b292      	uxth	r2, r2
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fd fe08 	bl	8000bd8 <LCD_DrawLBig>
}
 8002fc8:	e11b      	b.n	8003202 <letterselect+0x366>
	else if( letter == 'M' ) {
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	2b4d      	cmp	r3, #77	; 0x4d
 8002fce:	d108      	bne.n	8002fe2 <letterselect+0x146>
		LCD_DrawMBig(x, y);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	b292      	uxth	r2, r2
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd fe3c 	bl	8000c58 <LCD_DrawMBig>
}
 8002fe0:	e10f      	b.n	8003202 <letterselect+0x366>
	else if( letter == 'N' ) {
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	2b4e      	cmp	r3, #78	; 0x4e
 8002fe6:	d108      	bne.n	8002ffa <letterselect+0x15e>
		LCD_DrawNBig(x, y);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	b292      	uxth	r2, r2
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fd fe94 	bl	8000d20 <LCD_DrawNBig>
}
 8002ff8:	e103      	b.n	8003202 <letterselect+0x366>
	else if( letter == 'O' ) {
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	2b4f      	cmp	r3, #79	; 0x4f
 8002ffe:	d108      	bne.n	8003012 <letterselect+0x176>
		LCD_DrawOBig(x, y);
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	b29b      	uxth	r3, r3
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	b292      	uxth	r2, r2
 8003008:	4611      	mov	r1, r2
 800300a:	4618      	mov	r0, r3
 800300c:	f7fd feec 	bl	8000de8 <LCD_DrawOBig>
}
 8003010:	e0f7      	b.n	8003202 <letterselect+0x366>
	else if( letter == 'P' ) {
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	2b50      	cmp	r3, #80	; 0x50
 8003016:	d108      	bne.n	800302a <letterselect+0x18e>
		LCD_DrawPBig(x, y);
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	b29b      	uxth	r3, r3
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	b292      	uxth	r2, r2
 8003020:	4611      	mov	r1, r2
 8003022:	4618      	mov	r0, r3
 8003024:	f7fd ff26 	bl	8000e74 <LCD_DrawPBig>
}
 8003028:	e0eb      	b.n	8003202 <letterselect+0x366>
	else if( letter == 'Q' ) {
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	2b51      	cmp	r3, #81	; 0x51
 800302e:	d108      	bne.n	8003042 <letterselect+0x1a6>
		LCD_DrawQBig(x, y);
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	b29b      	uxth	r3, r3
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	b292      	uxth	r2, r2
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f7fd ff6e 	bl	8000f1c <LCD_DrawQBig>
}
 8003040:	e0df      	b.n	8003202 <letterselect+0x366>
	else if( letter == 'R' ) {
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	2b52      	cmp	r3, #82	; 0x52
 8003046:	d108      	bne.n	800305a <letterselect+0x1be>
		LCD_DrawRBig(x, y);
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	b29b      	uxth	r3, r3
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	b292      	uxth	r2, r2
 8003050:	4611      	mov	r1, r2
 8003052:	4618      	mov	r0, r3
 8003054:	f7fd ffb4 	bl	8000fc0 <LCD_DrawRBig>
}
 8003058:	e0d3      	b.n	8003202 <letterselect+0x366>
	else if( letter == 'S' ) {
 800305a:	7bfb      	ldrb	r3, [r7, #15]
 800305c:	2b53      	cmp	r3, #83	; 0x53
 800305e:	d108      	bne.n	8003072 <letterselect+0x1d6>
		LCD_DrawSBig(x, y);
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	b29b      	uxth	r3, r3
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	b292      	uxth	r2, r2
 8003068:	4611      	mov	r1, r2
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe f80e 	bl	800108c <LCD_DrawSBig>
}
 8003070:	e0c7      	b.n	8003202 <letterselect+0x366>
	else if( letter == 'T' ) {
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	2b54      	cmp	r3, #84	; 0x54
 8003076:	d108      	bne.n	800308a <letterselect+0x1ee>
		LCD_DrawTBig(x, y);
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	b29b      	uxth	r3, r3
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	b292      	uxth	r2, r2
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f7fe f85a 	bl	800113c <LCD_DrawTBig>
}
 8003088:	e0bb      	b.n	8003202 <letterselect+0x366>
	else if( letter == 'U' ) {
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	2b55      	cmp	r3, #85	; 0x55
 800308e:	d108      	bne.n	80030a2 <letterselect+0x206>
		LCD_DrawUBig(x, y);
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	b29b      	uxth	r3, r3
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	b292      	uxth	r2, r2
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f7fe f890 	bl	80011c0 <LCD_DrawUBig>
}
 80030a0:	e0af      	b.n	8003202 <letterselect+0x366>
	else if( letter == 'V' ) {
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	2b56      	cmp	r3, #86	; 0x56
 80030a6:	d108      	bne.n	80030ba <letterselect+0x21e>
		LCD_DrawVBig(x, y);
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	b292      	uxth	r2, r2
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe f8c6 	bl	8001244 <LCD_DrawVBig>
}
 80030b8:	e0a3      	b.n	8003202 <letterselect+0x366>
	else if( letter == 'W' ) {
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	2b57      	cmp	r3, #87	; 0x57
 80030be:	d108      	bne.n	80030d2 <letterselect+0x236>
		LCD_DrawWBig(x, y);
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	b292      	uxth	r2, r2
 80030c8:	4611      	mov	r1, r2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fe f938 	bl	8001340 <LCD_DrawWBig>
}
 80030d0:	e097      	b.n	8003202 <letterselect+0x366>
	else if( letter == 'X' ) {
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b58      	cmp	r3, #88	; 0x58
 80030d6:	d108      	bne.n	80030ea <letterselect+0x24e>
		LCD_DrawXBig(x, y);
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	b29b      	uxth	r3, r3
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	b292      	uxth	r2, r2
 80030e0:	4611      	mov	r1, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fe f9c6 	bl	8001474 <LCD_DrawXBig>
}
 80030e8:	e08b      	b.n	8003202 <letterselect+0x366>
	else if( letter == 'Y' ) {
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	2b59      	cmp	r3, #89	; 0x59
 80030ee:	d108      	bne.n	8003102 <letterselect+0x266>
		LCD_DrawYBig(x, y);
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	b292      	uxth	r2, r2
 80030f8:	4611      	mov	r1, r2
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe fa18 	bl	8001530 <LCD_DrawYBig>
}
 8003100:	e07f      	b.n	8003202 <letterselect+0x366>
	else if( letter == 'Z') {
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	2b5a      	cmp	r3, #90	; 0x5a
 8003106:	d108      	bne.n	800311a <letterselect+0x27e>
		LCD_DrawZBig(x, y);
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	b29b      	uxth	r3, r3
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	b292      	uxth	r2, r2
 8003110:	4611      	mov	r1, r2
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe fa72 	bl	80015fc <LCD_DrawZBig>
}
 8003118:	e073      	b.n	8003202 <letterselect+0x366>
	else if( letter == '0' ) {
 800311a:	7bfb      	ldrb	r3, [r7, #15]
 800311c:	2b30      	cmp	r3, #48	; 0x30
 800311e:	d108      	bne.n	8003132 <letterselect+0x296>
		LCD_Draw0Big(x, y);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	b29b      	uxth	r3, r3
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	b292      	uxth	r2, r2
 8003128:	4611      	mov	r1, r2
 800312a:	4618      	mov	r0, r3
 800312c:	f7fe fabe 	bl	80016ac <LCD_Draw0Big>
}
 8003130:	e067      	b.n	8003202 <letterselect+0x366>
	else if( letter == '1' ) {
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	2b31      	cmp	r3, #49	; 0x31
 8003136:	d108      	bne.n	800314a <letterselect+0x2ae>
		LCD_Draw1Big(x, y);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	b29b      	uxth	r3, r3
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	b292      	uxth	r2, r2
 8003140:	4611      	mov	r1, r2
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe faf8 	bl	8001738 <LCD_Draw1Big>
}
 8003148:	e05b      	b.n	8003202 <letterselect+0x366>
	else if( letter == '2' ) {
 800314a:	7bfb      	ldrb	r3, [r7, #15]
 800314c:	2b32      	cmp	r3, #50	; 0x32
 800314e:	d108      	bne.n	8003162 <letterselect+0x2c6>
		LCD_Draw2Big(x, y);
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	b29b      	uxth	r3, r3
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	b292      	uxth	r2, r2
 8003158:	4611      	mov	r1, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe fb2c 	bl	80017b8 <LCD_Draw2Big>
}
 8003160:	e04f      	b.n	8003202 <letterselect+0x366>
	else if( letter == '3' ) {
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	2b33      	cmp	r3, #51	; 0x33
 8003166:	d108      	bne.n	800317a <letterselect+0x2de>
		LCD_Draw3Big(x, y);
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	b29b      	uxth	r3, r3
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	b292      	uxth	r2, r2
 8003170:	4611      	mov	r1, r2
 8003172:	4618      	mov	r0, r3
 8003174:	f7fe fb72 	bl	800185c <LCD_Draw3Big>
}
 8003178:	e043      	b.n	8003202 <letterselect+0x366>
	else if( letter == '4' ) {
 800317a:	7bfb      	ldrb	r3, [r7, #15]
 800317c:	2b34      	cmp	r3, #52	; 0x34
 800317e:	d108      	bne.n	8003192 <letterselect+0x2f6>
		LCD_Draw4Big(x, y);
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	b29b      	uxth	r3, r3
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	b292      	uxth	r2, r2
 8003188:	4611      	mov	r1, r2
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe fbae 	bl	80018ec <LCD_Draw4Big>
}
 8003190:	e037      	b.n	8003202 <letterselect+0x366>
	else if( letter == '5') {
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	2b35      	cmp	r3, #53	; 0x35
 8003196:	d108      	bne.n	80031aa <letterselect+0x30e>
		LCD_Draw5Big(x, y);
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	b29b      	uxth	r3, r3
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	b292      	uxth	r2, r2
 80031a0:	4611      	mov	r1, r2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe fbee 	bl	8001984 <LCD_Draw5Big>
}
 80031a8:	e02b      	b.n	8003202 <letterselect+0x366>
	else if( letter == '6' ) {
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
 80031ac:	2b36      	cmp	r3, #54	; 0x36
 80031ae:	d108      	bne.n	80031c2 <letterselect+0x326>
		LCD_Draw6Big(x, y);
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	b292      	uxth	r2, r2
 80031b8:	4611      	mov	r1, r2
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe fc34 	bl	8001a28 <LCD_Draw6Big>
}
 80031c0:	e01f      	b.n	8003202 <letterselect+0x366>
	else if( letter == '7' ) {
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	2b37      	cmp	r3, #55	; 0x37
 80031c6:	d108      	bne.n	80031da <letterselect+0x33e>
		LCD_Draw7Big(x, y);
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	b292      	uxth	r2, r2
 80031d0:	4611      	mov	r1, r2
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fe fc76 	bl	8001ac4 <LCD_Draw7Big>
}
 80031d8:	e013      	b.n	8003202 <letterselect+0x366>
	else if( letter == '8' ) {
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	2b38      	cmp	r3, #56	; 0x38
 80031de:	d108      	bne.n	80031f2 <letterselect+0x356>
		LCD_Draw8Big(x, y);
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	b292      	uxth	r2, r2
 80031e8:	4611      	mov	r1, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fe fcc4 	bl	8001b78 <LCD_Draw8Big>
}
 80031f0:	e007      	b.n	8003202 <letterselect+0x366>
		LCD_Draw9Big(x, y);
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	b292      	uxth	r2, r2
 80031fa:	4611      	mov	r1, r2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fe fd07 	bl	8001c10 <LCD_Draw9Big>
}
 8003202:	bf00      	nop
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <type>:

void type(char const * word, int x, int y){
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < strlen(word); i++){
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	e01b      	b.n	8003256 <type+0x4a>
		letterselect(word[i], x, y);
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4413      	add	r3, r2
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff fe36 	bl	8002e9c <letterselect>
		x = (x + 18) % LCD_WIDTH;
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	f103 0212 	add.w	r2, r3, #18
 8003236:	4b0d      	ldr	r3, [pc, #52]	; (800326c <type+0x60>)
 8003238:	fb83 1302 	smull	r1, r3, r3, r2
 800323c:	4413      	add	r3, r2
 800323e:	11d9      	asrs	r1, r3, #7
 8003240:	17d3      	asrs	r3, r2, #31
 8003242:	1ac9      	subs	r1, r1, r3
 8003244:	460b      	mov	r3, r1
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	1a5b      	subs	r3, r3, r1
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < strlen(word); i++){
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	3301      	adds	r3, #1
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f7fc ffc8 	bl	80001ec <strlen>
 800325c:	4602      	mov	r2, r0
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	429a      	cmp	r2, r3
 8003262:	d8dc      	bhi.n	800321e <type+0x12>
	}
}
 8003264:	bf00      	nop
 8003266:	3718      	adds	r7, #24
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	88888889 	.word	0x88888889

08003270 <InitialScreen>:



void InitialScreen(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
	LCD_ClearScreenLtdc(0xFF);
 8003274:	20ff      	movs	r0, #255	; 0xff
 8003276:	f7ff f849 	bl	800230c <LCD_ClearScreenLtdc>
	type("WELCOME", 50, 152);
 800327a:	2298      	movs	r2, #152	; 0x98
 800327c:	2132      	movs	r1, #50	; 0x32
 800327e:	4809      	ldr	r0, [pc, #36]	; (80032a4 <InitialScreen+0x34>)
 8003280:	f7ff ffc4 	bl	800320c <type>
	type("PAMA" , 85, 294);
 8003284:	f44f 7293 	mov.w	r2, #294	; 0x126
 8003288:	2155      	movs	r1, #85	; 0x55
 800328a:	4807      	ldr	r0, [pc, #28]	; (80032a8 <InitialScreen+0x38>)
 800328c:	f7ff ffbe 	bl	800320c <type>
	HAL_Delay(3000);
 8003290:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003294:	f000 fa3e 	bl	8003714 <HAL_Delay>
	LCD_ClearScreenLtdc(0xFF);
 8003298:	20ff      	movs	r0, #255	; 0xff
 800329a:	f7ff f837 	bl	800230c <LCD_ClearScreenLtdc>
}
 800329e:	bf00      	nop
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	08006e10 	.word	0x08006e10
 80032a8:	08006e18 	.word	0x08006e18

080032ac <MenuScreen>:

void MenuScreen(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
	LCD_ClearScreenLtdc(0x04);
 80032b0:	2004      	movs	r0, #4
 80032b2:	f7ff f82b 	bl	800230c <LCD_ClearScreenLtdc>
	type("MENU", 70, 152);
 80032b6:	2298      	movs	r2, #152	; 0x98
 80032b8:	2146      	movs	r1, #70	; 0x46
 80032ba:	4805      	ldr	r0, [pc, #20]	; (80032d0 <MenuScreen+0x24>)
 80032bc:	f7ff ffa6 	bl	800320c <type>
	type("PAMA" , 85, 294);
 80032c0:	f44f 7293 	mov.w	r2, #294	; 0x126
 80032c4:	2155      	movs	r1, #85	; 0x55
 80032c6:	4803      	ldr	r0, [pc, #12]	; (80032d4 <MenuScreen+0x28>)
 80032c8:	f7ff ffa0 	bl	800320c <type>
}
 80032cc:	bf00      	nop
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	08006e20 	.word	0x08006e20
 80032d4:	08006e18 	.word	0x08006e18

080032d8 <BluetoothScreen>:

void BluetoothScreen(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
	LCD_ClearScreenLtdc(0x12);
 80032dc:	2012      	movs	r0, #18
 80032de:	f7ff f815 	bl	800230c <LCD_ClearScreenLtdc>
	type("BLUETOOTH", 40, 152);
 80032e2:	2298      	movs	r2, #152	; 0x98
 80032e4:	2128      	movs	r1, #40	; 0x28
 80032e6:	4808      	ldr	r0, [pc, #32]	; (8003308 <BluetoothScreen+0x30>)
 80032e8:	f7ff ff90 	bl	800320c <type>
	type("PAIRING", 40, 170);
 80032ec:	22aa      	movs	r2, #170	; 0xaa
 80032ee:	2128      	movs	r1, #40	; 0x28
 80032f0:	4806      	ldr	r0, [pc, #24]	; (800330c <BluetoothScreen+0x34>)
 80032f2:	f7ff ff8b 	bl	800320c <type>
	type("PAMA" , 85, 294);
 80032f6:	f44f 7293 	mov.w	r2, #294	; 0x126
 80032fa:	2155      	movs	r1, #85	; 0x55
 80032fc:	4804      	ldr	r0, [pc, #16]	; (8003310 <BluetoothScreen+0x38>)
 80032fe:	f7ff ff85 	bl	800320c <type>
}
 8003302:	bf00      	nop
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	08006e28 	.word	0x08006e28
 800330c:	08006e34 	.word	0x08006e34
 8003310:	08006e18 	.word	0x08006e18

08003314 <ScheduleScreen>:

void ScheduleScreen()
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
	LCD_ClearScreenLtdc(0x05);
 8003318:	2005      	movs	r0, #5
 800331a:	f7fe fff7 	bl	800230c <LCD_ClearScreenLtdc>
	type("SCHEDULE", 50, 152);
 800331e:	2298      	movs	r2, #152	; 0x98
 8003320:	2132      	movs	r1, #50	; 0x32
 8003322:	4805      	ldr	r0, [pc, #20]	; (8003338 <ScheduleScreen+0x24>)
 8003324:	f7ff ff72 	bl	800320c <type>
	type("PAMA", 85, 294);
 8003328:	f44f 7293 	mov.w	r2, #294	; 0x126
 800332c:	2155      	movs	r1, #85	; 0x55
 800332e:	4803      	ldr	r0, [pc, #12]	; (800333c <ScheduleScreen+0x28>)
 8003330:	f7ff ff6c 	bl	800320c <type>
}
 8003334:	bf00      	nop
 8003336:	bd80      	pop	{r7, pc}
 8003338:	08006e3c 	.word	0x08006e3c
 800333c:	08006e18 	.word	0x08006e18

08003340 <DispensedScreen>:

void DispensedScreen()
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
	LCD_ClearScreenLtdc(0x09);
 8003344:	2009      	movs	r0, #9
 8003346:	f7fe ffe1 	bl	800230c <LCD_ClearScreenLtdc>
	type("DISPENSED", 50, 152);
 800334a:	2298      	movs	r2, #152	; 0x98
 800334c:	2132      	movs	r1, #50	; 0x32
 800334e:	4805      	ldr	r0, [pc, #20]	; (8003364 <DispensedScreen+0x24>)
 8003350:	f7ff ff5c 	bl	800320c <type>
	type("PAMA" , 85, 294);
 8003354:	f44f 7293 	mov.w	r2, #294	; 0x126
 8003358:	2155      	movs	r1, #85	; 0x55
 800335a:	4803      	ldr	r0, [pc, #12]	; (8003368 <DispensedScreen+0x28>)
 800335c:	f7ff ff56 	bl	800320c <type>
}
 8003360:	bf00      	nop
 8003362:	bd80      	pop	{r7, pc}
 8003364:	08006e48 	.word	0x08006e48
 8003368:	08006e18 	.word	0x08006e18

0800336c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8003370:	4b18      	ldr	r3, [pc, #96]	; (80033d4 <MX_SPI5_Init+0x68>)
 8003372:	4a19      	ldr	r2, [pc, #100]	; (80033d8 <MX_SPI5_Init+0x6c>)
 8003374:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003376:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <MX_SPI5_Init+0x68>)
 8003378:	f44f 7282 	mov.w	r2, #260	; 0x104
 800337c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 800337e:	4b15      	ldr	r3, [pc, #84]	; (80033d4 <MX_SPI5_Init+0x68>)
 8003380:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003384:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003386:	4b13      	ldr	r3, [pc, #76]	; (80033d4 <MX_SPI5_Init+0x68>)
 8003388:	2200      	movs	r2, #0
 800338a:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800338c:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <MX_SPI5_Init+0x68>)
 800338e:	2200      	movs	r2, #0
 8003390:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003392:	4b10      	ldr	r3, [pc, #64]	; (80033d4 <MX_SPI5_Init+0x68>)
 8003394:	2200      	movs	r2, #0
 8003396:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003398:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <MX_SPI5_Init+0x68>)
 800339a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800339e:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033a0:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <MX_SPI5_Init+0x68>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <MX_SPI5_Init+0x68>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80033ac:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <MX_SPI5_Init+0x68>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033b2:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <MX_SPI5_Init+0x68>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80033b8:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <MX_SPI5_Init+0x68>)
 80033ba:	220a      	movs	r2, #10
 80033bc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80033be:	4805      	ldr	r0, [pc, #20]	; (80033d4 <MX_SPI5_Init+0x68>)
 80033c0:	f002 f86a 	bl	8005498 <HAL_SPI_Init>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <MX_SPI5_Init+0x62>
  {
    Error_Handler();
 80033ca:	f7ff fae9 	bl	80029a0 <Error_Handler>
  }

}
 80033ce:	bf00      	nop
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20013798 	.word	0x20013798
 80033d8:	40015000 	.word	0x40015000

080033dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b08a      	sub	sp, #40	; 0x28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e4:	f107 0314 	add.w	r3, r7, #20
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	60da      	str	r2, [r3, #12]
 80033f2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a19      	ldr	r2, [pc, #100]	; (8003460 <HAL_SPI_MspInit+0x84>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d12c      	bne.n	8003458 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	4b18      	ldr	r3, [pc, #96]	; (8003464 <HAL_SPI_MspInit+0x88>)
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	4a17      	ldr	r2, [pc, #92]	; (8003464 <HAL_SPI_MspInit+0x88>)
 8003408:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800340c:	6453      	str	r3, [r2, #68]	; 0x44
 800340e:	4b15      	ldr	r3, [pc, #84]	; (8003464 <HAL_SPI_MspInit+0x88>)
 8003410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	4b11      	ldr	r3, [pc, #68]	; (8003464 <HAL_SPI_MspInit+0x88>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	4a10      	ldr	r2, [pc, #64]	; (8003464 <HAL_SPI_MspInit+0x88>)
 8003424:	f043 0320 	orr.w	r3, r3, #32
 8003428:	6313      	str	r3, [r2, #48]	; 0x30
 800342a:	4b0e      	ldr	r3, [pc, #56]	; (8003464 <HAL_SPI_MspInit+0x88>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	f003 0320 	and.w	r3, r3, #32
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8003436:	f44f 7320 	mov.w	r3, #640	; 0x280
 800343a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343c:	2302      	movs	r3, #2
 800343e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003440:	2300      	movs	r3, #0
 8003442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003444:	2303      	movs	r3, #3
 8003446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003448:	2305      	movs	r3, #5
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800344c:	f107 0314 	add.w	r3, r7, #20
 8003450:	4619      	mov	r1, r3
 8003452:	4805      	ldr	r0, [pc, #20]	; (8003468 <HAL_SPI_MspInit+0x8c>)
 8003454:	f000 fab4 	bl	80039c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8003458:	bf00      	nop
 800345a:	3728      	adds	r7, #40	; 0x28
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40015000 	.word	0x40015000
 8003464:	40023800 	.word	0x40023800
 8003468:	40021400 	.word	0x40021400

0800346c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	607b      	str	r3, [r7, #4]
 8003476:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <HAL_MspInit+0x4c>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	4a0f      	ldr	r2, [pc, #60]	; (80034b8 <HAL_MspInit+0x4c>)
 800347c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003480:	6453      	str	r3, [r2, #68]	; 0x44
 8003482:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <HAL_MspInit+0x4c>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800348a:	607b      	str	r3, [r7, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	603b      	str	r3, [r7, #0]
 8003492:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <HAL_MspInit+0x4c>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	4a08      	ldr	r2, [pc, #32]	; (80034b8 <HAL_MspInit+0x4c>)
 8003498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349c:	6413      	str	r3, [r2, #64]	; 0x40
 800349e:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <HAL_MspInit+0x4c>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80034aa:	2007      	movs	r0, #7
 80034ac:	f000 fa24 	bl	80038f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034b0:	bf00      	nop
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40023800 	.word	0x40023800

080034bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	HAL_UART_Receive(&huart1, (uint8_t*)&buffer[buffer_index], 1, 10);
 80034c0:	4b0a      	ldr	r3, [pc, #40]	; (80034ec <USART1_IRQHandler+0x30>)
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	461a      	mov	r2, r3
 80034c6:	4b0a      	ldr	r3, [pc, #40]	; (80034f0 <USART1_IRQHandler+0x34>)
 80034c8:	18d1      	adds	r1, r2, r3
 80034ca:	230a      	movs	r3, #10
 80034cc:	2201      	movs	r2, #1
 80034ce:	4809      	ldr	r0, [pc, #36]	; (80034f4 <USART1_IRQHandler+0x38>)
 80034d0:	f002 fd95 	bl	8005ffe <HAL_UART_Receive>
	buffer_index++;
 80034d4:	4b05      	ldr	r3, [pc, #20]	; (80034ec <USART1_IRQHandler+0x30>)
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	3301      	adds	r3, #1
 80034da:	b29a      	uxth	r2, r3
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <USART1_IRQHandler+0x30>)
 80034de:	801a      	strh	r2, [r3, #0]
		//Process_string(schedule[0]);
		//set_alarm(mtime, mdate, apm);
		//memset(buffer, 0, sizeof(buffer));
	//}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80034e0:	4804      	ldr	r0, [pc, #16]	; (80034f4 <USART1_IRQHandler+0x38>)
 80034e2:	f002 fe33 	bl	800614c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20012c32 	.word	0x20012c32
 80034f0:	20013328 	.word	0x20013328
 80034f4:	20012cdc 	.word	0x20012cdc

080034f8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80034fc:	4802      	ldr	r0, [pc, #8]	; (8003508 <RTC_Alarm_IRQHandler+0x10>)
 80034fe:	f001 ff1d 	bl	800533c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	20012d1c 	.word	0x20012d1c

0800350c <TIM6_DAC_IRQHandler>:
/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	if(strlen(buffer)>0)
 8003510:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <TIM6_DAC_IRQHandler+0x3c>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <TIM6_DAC_IRQHandler+0x18>
		timer_count++;
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <TIM6_DAC_IRQHandler+0x40>)
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	3301      	adds	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	4b0a      	ldr	r3, [pc, #40]	; (800354c <TIM6_DAC_IRQHandler+0x40>)
 8003522:	801a      	strh	r2, [r3, #0]

	if(timer_count>200){
 8003524:	4b09      	ldr	r3, [pc, #36]	; (800354c <TIM6_DAC_IRQHandler+0x40>)
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	2bc8      	cmp	r3, #200	; 0xc8
 800352a:	d908      	bls.n	800353e <TIM6_DAC_IRQHandler+0x32>

		//Arrange_strings(buffer);
		Manage_strings();
 800352c:	f7ff fbd2 	bl	8002cd4 <Manage_strings>
		Individual_med(schedule[0],bufferarr);
 8003530:	4907      	ldr	r1, [pc, #28]	; (8003550 <TIM6_DAC_IRQHandler+0x44>)
 8003532:	4808      	ldr	r0, [pc, #32]	; (8003554 <TIM6_DAC_IRQHandler+0x48>)
 8003534:	f7ff fb80 	bl	8002c38 <Individual_med>
		Process_string(bufferarr);
 8003538:	4805      	ldr	r0, [pc, #20]	; (8003550 <TIM6_DAC_IRQHandler+0x44>)
 800353a:	f7ff fb01 	bl	8002b40 <Process_string>
		//timer_count = 0;
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800353e:	4806      	ldr	r0, [pc, #24]	; (8003558 <TIM6_DAC_IRQHandler+0x4c>)
 8003540:	f002 fa9c 	bl	8005a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003544:	bf00      	nop
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20013328 	.word	0x20013328
 800354c:	20012c30 	.word	0x20012c30
 8003550:	2001372c 	.word	0x2001372c
 8003554:	20012dac 	.word	0x20012dac
 8003558:	20012d3c 	.word	0x20012d3c

0800355c <NMI_Handler>:
/**
  * @brief This function handles Non maskable interrupt.
  */

void NMI_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003560:	e7fe      	b.n	8003560 <NMI_Handler+0x4>

08003562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003562:	b480      	push	{r7}
 8003564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003566:	e7fe      	b.n	8003566 <HardFault_Handler+0x4>

08003568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800356c:	e7fe      	b.n	800356c <MemManage_Handler+0x4>

0800356e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800356e:	b480      	push	{r7}
 8003570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003572:	e7fe      	b.n	8003572 <BusFault_Handler+0x4>

08003574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003578:	e7fe      	b.n	8003578 <UsageFault_Handler+0x4>

0800357a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800357a:	b480      	push	{r7}
 800357c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800357e:	bf00      	nop
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800358c:	bf00      	nop
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003596:	b480      	push	{r7}
 8003598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035a8:	f000 f894 	bl	80036d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035ac:	bf00      	nop
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035b4:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <SystemInit+0x28>)
 80035b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ba:	4a07      	ldr	r2, [pc, #28]	; (80035d8 <SystemInit+0x28>)
 80035bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80035c4:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <SystemInit+0x28>)
 80035c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035ca:	609a      	str	r2, [r3, #8]
#endif
}
 80035cc:	bf00      	nop
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80035dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003614 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035e0:	480d      	ldr	r0, [pc, #52]	; (8003618 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80035e2:	490e      	ldr	r1, [pc, #56]	; (800361c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80035e4:	4a0e      	ldr	r2, [pc, #56]	; (8003620 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035e8:	e002      	b.n	80035f0 <LoopCopyDataInit>

080035ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035ee:	3304      	adds	r3, #4

080035f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035f4:	d3f9      	bcc.n	80035ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035f6:	4a0b      	ldr	r2, [pc, #44]	; (8003624 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80035f8:	4c0b      	ldr	r4, [pc, #44]	; (8003628 <LoopFillZerobss+0x26>)
  movs r3, #0
 80035fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035fc:	e001      	b.n	8003602 <LoopFillZerobss>

080035fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003600:	3204      	adds	r2, #4

08003602 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003602:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003604:	d3fb      	bcc.n	80035fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003606:	f7ff ffd3 	bl	80035b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800360a:	f003 fba5 	bl	8006d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800360e:	f7ff f819 	bl	8002644 <main>
  bx  lr    
 8003612:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003614:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800361c:	20012c10 	.word	0x20012c10
  ldr r2, =_sidata
 8003620:	0800727c 	.word	0x0800727c
  ldr r2, =_sbss
 8003624:	20012c10 	.word	0x20012c10
  ldr r4, =_ebss
 8003628:	200137f4 	.word	0x200137f4

0800362c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800362c:	e7fe      	b.n	800362c <ADC_IRQHandler>
	...

08003630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003634:	4b0e      	ldr	r3, [pc, #56]	; (8003670 <HAL_Init+0x40>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a0d      	ldr	r2, [pc, #52]	; (8003670 <HAL_Init+0x40>)
 800363a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800363e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003640:	4b0b      	ldr	r3, [pc, #44]	; (8003670 <HAL_Init+0x40>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a0a      	ldr	r2, [pc, #40]	; (8003670 <HAL_Init+0x40>)
 8003646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800364a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800364c:	4b08      	ldr	r3, [pc, #32]	; (8003670 <HAL_Init+0x40>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a07      	ldr	r2, [pc, #28]	; (8003670 <HAL_Init+0x40>)
 8003652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003658:	2003      	movs	r0, #3
 800365a:	f000 f94d 	bl	80038f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800365e:	2000      	movs	r0, #0
 8003660:	f000 f808 	bl	8003674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003664:	f7ff ff02 	bl	800346c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40023c00 	.word	0x40023c00

08003674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800367c:	4b12      	ldr	r3, [pc, #72]	; (80036c8 <HAL_InitTick+0x54>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	4b12      	ldr	r3, [pc, #72]	; (80036cc <HAL_InitTick+0x58>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	4619      	mov	r1, r3
 8003686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800368a:	fbb3 f3f1 	udiv	r3, r3, r1
 800368e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003692:	4618      	mov	r0, r3
 8003694:	f000 f965 	bl	8003962 <HAL_SYSTICK_Config>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e00e      	b.n	80036c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b0f      	cmp	r3, #15
 80036a6:	d80a      	bhi.n	80036be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036a8:	2200      	movs	r2, #0
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	f04f 30ff 	mov.w	r0, #4294967295
 80036b0:	f000 f92d 	bl	800390e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036b4:	4a06      	ldr	r2, [pc, #24]	; (80036d0 <HAL_InitTick+0x5c>)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	e000      	b.n	80036c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	20012c04 	.word	0x20012c04
 80036cc:	20012c0c 	.word	0x20012c0c
 80036d0:	20012c08 	.word	0x20012c08

080036d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036d8:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <HAL_IncTick+0x20>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <HAL_IncTick+0x24>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4413      	add	r3, r2
 80036e4:	4a04      	ldr	r2, [pc, #16]	; (80036f8 <HAL_IncTick+0x24>)
 80036e6:	6013      	str	r3, [r2, #0]
}
 80036e8:	bf00      	nop
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	20012c0c 	.word	0x20012c0c
 80036f8:	200137f0 	.word	0x200137f0

080036fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003700:	4b03      	ldr	r3, [pc, #12]	; (8003710 <HAL_GetTick+0x14>)
 8003702:	681b      	ldr	r3, [r3, #0]
}
 8003704:	4618      	mov	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	200137f0 	.word	0x200137f0

08003714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800371c:	f7ff ffee 	bl	80036fc <HAL_GetTick>
 8003720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372c:	d005      	beq.n	800373a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800372e:	4b09      	ldr	r3, [pc, #36]	; (8003754 <HAL_Delay+0x40>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4413      	add	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800373a:	bf00      	nop
 800373c:	f7ff ffde 	bl	80036fc <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	429a      	cmp	r2, r3
 800374a:	d8f7      	bhi.n	800373c <HAL_Delay+0x28>
  {
  }
}
 800374c:	bf00      	nop
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	20012c0c 	.word	0x20012c0c

08003758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003768:	4b0c      	ldr	r3, [pc, #48]	; (800379c <__NVIC_SetPriorityGrouping+0x44>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003774:	4013      	ands	r3, r2
 8003776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003780:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003788:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800378a:	4a04      	ldr	r2, [pc, #16]	; (800379c <__NVIC_SetPriorityGrouping+0x44>)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	60d3      	str	r3, [r2, #12]
}
 8003790:	bf00      	nop
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	e000ed00 	.word	0xe000ed00

080037a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a4:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <__NVIC_GetPriorityGrouping+0x18>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	0a1b      	lsrs	r3, r3, #8
 80037aa:	f003 0307 	and.w	r3, r3, #7
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	e000ed00 	.word	0xe000ed00

080037bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	db0b      	blt.n	80037e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	f003 021f 	and.w	r2, r3, #31
 80037d4:	4907      	ldr	r1, [pc, #28]	; (80037f4 <__NVIC_EnableIRQ+0x38>)
 80037d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	2001      	movs	r0, #1
 80037de:	fa00 f202 	lsl.w	r2, r0, r2
 80037e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	e000e100 	.word	0xe000e100

080037f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	6039      	str	r1, [r7, #0]
 8003802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003808:	2b00      	cmp	r3, #0
 800380a:	db0a      	blt.n	8003822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	b2da      	uxtb	r2, r3
 8003810:	490c      	ldr	r1, [pc, #48]	; (8003844 <__NVIC_SetPriority+0x4c>)
 8003812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003816:	0112      	lsls	r2, r2, #4
 8003818:	b2d2      	uxtb	r2, r2
 800381a:	440b      	add	r3, r1
 800381c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003820:	e00a      	b.n	8003838 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	b2da      	uxtb	r2, r3
 8003826:	4908      	ldr	r1, [pc, #32]	; (8003848 <__NVIC_SetPriority+0x50>)
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	3b04      	subs	r3, #4
 8003830:	0112      	lsls	r2, r2, #4
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	440b      	add	r3, r1
 8003836:	761a      	strb	r2, [r3, #24]
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	e000e100 	.word	0xe000e100
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800384c:	b480      	push	{r7}
 800384e:	b089      	sub	sp, #36	; 0x24
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f1c3 0307 	rsb	r3, r3, #7
 8003866:	2b04      	cmp	r3, #4
 8003868:	bf28      	it	cs
 800386a:	2304      	movcs	r3, #4
 800386c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	3304      	adds	r3, #4
 8003872:	2b06      	cmp	r3, #6
 8003874:	d902      	bls.n	800387c <NVIC_EncodePriority+0x30>
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3b03      	subs	r3, #3
 800387a:	e000      	b.n	800387e <NVIC_EncodePriority+0x32>
 800387c:	2300      	movs	r3, #0
 800387e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003880:	f04f 32ff 	mov.w	r2, #4294967295
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43da      	mvns	r2, r3
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	401a      	ands	r2, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003894:	f04f 31ff 	mov.w	r1, #4294967295
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	fa01 f303 	lsl.w	r3, r1, r3
 800389e:	43d9      	mvns	r1, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a4:	4313      	orrs	r3, r2
         );
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3724      	adds	r7, #36	; 0x24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
	...

080038b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3b01      	subs	r3, #1
 80038c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038c4:	d301      	bcc.n	80038ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038c6:	2301      	movs	r3, #1
 80038c8:	e00f      	b.n	80038ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ca:	4a0a      	ldr	r2, [pc, #40]	; (80038f4 <SysTick_Config+0x40>)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038d2:	210f      	movs	r1, #15
 80038d4:	f04f 30ff 	mov.w	r0, #4294967295
 80038d8:	f7ff ff8e 	bl	80037f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038dc:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <SysTick_Config+0x40>)
 80038de:	2200      	movs	r2, #0
 80038e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038e2:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <SysTick_Config+0x40>)
 80038e4:	2207      	movs	r2, #7
 80038e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	e000e010 	.word	0xe000e010

080038f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff ff29 	bl	8003758 <__NVIC_SetPriorityGrouping>
}
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800390e:	b580      	push	{r7, lr}
 8003910:	b086      	sub	sp, #24
 8003912:	af00      	add	r7, sp, #0
 8003914:	4603      	mov	r3, r0
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	607a      	str	r2, [r7, #4]
 800391a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003920:	f7ff ff3e 	bl	80037a0 <__NVIC_GetPriorityGrouping>
 8003924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	6978      	ldr	r0, [r7, #20]
 800392c:	f7ff ff8e 	bl	800384c <NVIC_EncodePriority>
 8003930:	4602      	mov	r2, r0
 8003932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003936:	4611      	mov	r1, r2
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff ff5d 	bl	80037f8 <__NVIC_SetPriority>
}
 800393e:	bf00      	nop
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	4603      	mov	r3, r0
 800394e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff ff31 	bl	80037bc <__NVIC_EnableIRQ>
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff ffa2 	bl	80038b4 <SysTick_Config>
 8003970:	4603      	mov	r3, r0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d004      	beq.n	8003998 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2280      	movs	r2, #128	; 0x80
 8003992:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e00c      	b.n	80039b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2205      	movs	r2, #5
 800399c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0201 	bic.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
	...

080039c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b089      	sub	sp, #36	; 0x24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039d6:	2300      	movs	r3, #0
 80039d8:	61fb      	str	r3, [r7, #28]
 80039da:	e177      	b.n	8003ccc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039dc:	2201      	movs	r2, #1
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4013      	ands	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	f040 8166 	bne.w	8003cc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d005      	beq.n	8003a12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d130      	bne.n	8003a74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	2203      	movs	r2, #3
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	43db      	mvns	r3, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	4013      	ands	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	69ba      	ldr	r2, [r7, #24]
 8003a40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a48:	2201      	movs	r2, #1
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4013      	ands	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	091b      	lsrs	r3, r3, #4
 8003a5e:	f003 0201 	and.w	r2, r3, #1
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 0303 	and.w	r3, r3, #3
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d017      	beq.n	8003ab0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	2203      	movs	r2, #3
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 0303 	and.w	r3, r3, #3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d123      	bne.n	8003b04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	08da      	lsrs	r2, r3, #3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3208      	adds	r2, #8
 8003ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	220f      	movs	r2, #15
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	4013      	ands	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	08da      	lsrs	r2, r3, #3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3208      	adds	r2, #8
 8003afe:	69b9      	ldr	r1, [r7, #24]
 8003b00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	2203      	movs	r2, #3
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	43db      	mvns	r3, r3
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 0203 	and.w	r2, r3, #3
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 80c0 	beq.w	8003cc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	4b65      	ldr	r3, [pc, #404]	; (8003ce0 <HAL_GPIO_Init+0x320>)
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	4a64      	ldr	r2, [pc, #400]	; (8003ce0 <HAL_GPIO_Init+0x320>)
 8003b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b54:	6453      	str	r3, [r2, #68]	; 0x44
 8003b56:	4b62      	ldr	r3, [pc, #392]	; (8003ce0 <HAL_GPIO_Init+0x320>)
 8003b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b62:	4a60      	ldr	r2, [pc, #384]	; (8003ce4 <HAL_GPIO_Init+0x324>)
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	089b      	lsrs	r3, r3, #2
 8003b68:	3302      	adds	r3, #2
 8003b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	220f      	movs	r2, #15
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	4013      	ands	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a57      	ldr	r2, [pc, #348]	; (8003ce8 <HAL_GPIO_Init+0x328>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d037      	beq.n	8003bfe <HAL_GPIO_Init+0x23e>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a56      	ldr	r2, [pc, #344]	; (8003cec <HAL_GPIO_Init+0x32c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d031      	beq.n	8003bfa <HAL_GPIO_Init+0x23a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a55      	ldr	r2, [pc, #340]	; (8003cf0 <HAL_GPIO_Init+0x330>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d02b      	beq.n	8003bf6 <HAL_GPIO_Init+0x236>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a54      	ldr	r2, [pc, #336]	; (8003cf4 <HAL_GPIO_Init+0x334>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d025      	beq.n	8003bf2 <HAL_GPIO_Init+0x232>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a53      	ldr	r2, [pc, #332]	; (8003cf8 <HAL_GPIO_Init+0x338>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d01f      	beq.n	8003bee <HAL_GPIO_Init+0x22e>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a52      	ldr	r2, [pc, #328]	; (8003cfc <HAL_GPIO_Init+0x33c>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d019      	beq.n	8003bea <HAL_GPIO_Init+0x22a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a51      	ldr	r2, [pc, #324]	; (8003d00 <HAL_GPIO_Init+0x340>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d013      	beq.n	8003be6 <HAL_GPIO_Init+0x226>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a50      	ldr	r2, [pc, #320]	; (8003d04 <HAL_GPIO_Init+0x344>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d00d      	beq.n	8003be2 <HAL_GPIO_Init+0x222>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a4f      	ldr	r2, [pc, #316]	; (8003d08 <HAL_GPIO_Init+0x348>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d007      	beq.n	8003bde <HAL_GPIO_Init+0x21e>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a4e      	ldr	r2, [pc, #312]	; (8003d0c <HAL_GPIO_Init+0x34c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d101      	bne.n	8003bda <HAL_GPIO_Init+0x21a>
 8003bd6:	2309      	movs	r3, #9
 8003bd8:	e012      	b.n	8003c00 <HAL_GPIO_Init+0x240>
 8003bda:	230a      	movs	r3, #10
 8003bdc:	e010      	b.n	8003c00 <HAL_GPIO_Init+0x240>
 8003bde:	2308      	movs	r3, #8
 8003be0:	e00e      	b.n	8003c00 <HAL_GPIO_Init+0x240>
 8003be2:	2307      	movs	r3, #7
 8003be4:	e00c      	b.n	8003c00 <HAL_GPIO_Init+0x240>
 8003be6:	2306      	movs	r3, #6
 8003be8:	e00a      	b.n	8003c00 <HAL_GPIO_Init+0x240>
 8003bea:	2305      	movs	r3, #5
 8003bec:	e008      	b.n	8003c00 <HAL_GPIO_Init+0x240>
 8003bee:	2304      	movs	r3, #4
 8003bf0:	e006      	b.n	8003c00 <HAL_GPIO_Init+0x240>
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e004      	b.n	8003c00 <HAL_GPIO_Init+0x240>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	e002      	b.n	8003c00 <HAL_GPIO_Init+0x240>
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <HAL_GPIO_Init+0x240>
 8003bfe:	2300      	movs	r3, #0
 8003c00:	69fa      	ldr	r2, [r7, #28]
 8003c02:	f002 0203 	and.w	r2, r2, #3
 8003c06:	0092      	lsls	r2, r2, #2
 8003c08:	4093      	lsls	r3, r2
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c10:	4934      	ldr	r1, [pc, #208]	; (8003ce4 <HAL_GPIO_Init+0x324>)
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	089b      	lsrs	r3, r3, #2
 8003c16:	3302      	adds	r3, #2
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c1e:	4b3c      	ldr	r3, [pc, #240]	; (8003d10 <HAL_GPIO_Init+0x350>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	43db      	mvns	r3, r3
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c3a:	69ba      	ldr	r2, [r7, #24]
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c42:	4a33      	ldr	r2, [pc, #204]	; (8003d10 <HAL_GPIO_Init+0x350>)
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c48:	4b31      	ldr	r3, [pc, #196]	; (8003d10 <HAL_GPIO_Init+0x350>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	43db      	mvns	r3, r3
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	4013      	ands	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c6c:	4a28      	ldr	r2, [pc, #160]	; (8003d10 <HAL_GPIO_Init+0x350>)
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c72:	4b27      	ldr	r3, [pc, #156]	; (8003d10 <HAL_GPIO_Init+0x350>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c96:	4a1e      	ldr	r2, [pc, #120]	; (8003d10 <HAL_GPIO_Init+0x350>)
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c9c:	4b1c      	ldr	r3, [pc, #112]	; (8003d10 <HAL_GPIO_Init+0x350>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cc0:	4a13      	ldr	r2, [pc, #76]	; (8003d10 <HAL_GPIO_Init+0x350>)
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	61fb      	str	r3, [r7, #28]
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	2b0f      	cmp	r3, #15
 8003cd0:	f67f ae84 	bls.w	80039dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cd4:	bf00      	nop
 8003cd6:	3724      	adds	r7, #36	; 0x24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	40013800 	.word	0x40013800
 8003ce8:	40020000 	.word	0x40020000
 8003cec:	40020400 	.word	0x40020400
 8003cf0:	40020800 	.word	0x40020800
 8003cf4:	40020c00 	.word	0x40020c00
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	40021400 	.word	0x40021400
 8003d00:	40021800 	.word	0x40021800
 8003d04:	40021c00 	.word	0x40021c00
 8003d08:	40022000 	.word	0x40022000
 8003d0c:	40022400 	.word	0x40022400
 8003d10:	40013c00 	.word	0x40013c00

08003d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	807b      	strh	r3, [r7, #2]
 8003d20:	4613      	mov	r3, r2
 8003d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d24:	787b      	ldrb	r3, [r7, #1]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d2a:	887a      	ldrh	r2, [r7, #2]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d30:	e003      	b.n	8003d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d32:	887b      	ldrh	r3, [r7, #2]
 8003d34:	041a      	lsls	r2, r3, #16
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	619a      	str	r2, [r3, #24]
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d52:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d54:	695a      	ldr	r2, [r3, #20]
 8003d56:	88fb      	ldrh	r3, [r7, #6]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d006      	beq.n	8003d6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d5e:	4a05      	ldr	r2, [pc, #20]	; (8003d74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d60:	88fb      	ldrh	r3, [r7, #6]
 8003d62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d64:	88fb      	ldrh	r3, [r7, #6]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 f806 	bl	8003d78 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40013c00 	.word	0x40013c00

08003d78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
	...

08003d90 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U, tmp1 = 0U;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e0bf      	b.n	8003f2a <HAL_LTDC_Init+0x19a>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d106      	bne.n	8003dc4 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7fe fb36 	bl	8002430 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699a      	ldr	r2, [r3, #24]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003dda:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6999      	ldr	r1, [r3, #24]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003df0:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6899      	ldr	r1, [r3, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4b4a      	ldr	r3, [pc, #296]	; (8003f34 <HAL_LTDC_Init+0x1a4>)
 8003e0c:	400b      	ands	r3, r1
 8003e0e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	041b      	lsls	r3, r3, #16
 8003e16:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6899      	ldr	r1, [r3, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699a      	ldr	r2, [r3, #24]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68d9      	ldr	r1, [r3, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4b3e      	ldr	r3, [pc, #248]	; (8003f34 <HAL_LTDC_Init+0x1a4>)
 8003e3a:	400b      	ands	r3, r1
 8003e3c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	041b      	lsls	r3, r3, #16
 8003e44:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68d9      	ldr	r1, [r3, #12]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1a      	ldr	r2, [r3, #32]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6919      	ldr	r1, [r3, #16]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4b33      	ldr	r3, [pc, #204]	; (8003f34 <HAL_LTDC_Init+0x1a4>)
 8003e68:	400b      	ands	r3, r1
 8003e6a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e70:	041b      	lsls	r3, r3, #16
 8003e72:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6919      	ldr	r1, [r3, #16]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6959      	ldr	r1, [r3, #20]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	4b27      	ldr	r3, [pc, #156]	; (8003f34 <HAL_LTDC_Init+0x1a4>)
 8003e96:	400b      	ands	r3, r1
 8003e98:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	041b      	lsls	r3, r3, #16
 8003ea0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6959      	ldr	r1, [r3, #20]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ebe:	021b      	lsls	r3, r3, #8
 8003ec0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003ec8:	041b      	lsls	r3, r3, #16
 8003eca:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003eda:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0206 	orr.w	r2, r2, #6
 8003f06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699a      	ldr	r2, [r3, #24]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	f000f800 	.word	0xf000f800

08003f38 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8003f38:	b5b0      	push	{r4, r5, r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));	
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d101      	bne.n	8003f52 <HAL_LTDC_ConfigLayer+0x1a>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e02c      	b.n	8003fac <HAL_LTDC_ConfigLayer+0x74>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2134      	movs	r1, #52	; 0x34
 8003f68:	fb01 f303 	mul.w	r3, r1, r3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	4614      	mov	r4, r2
 8003f76:	461d      	mov	r5, r3
 8003f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f84:	682b      	ldr	r3, [r5, #0]
 8003f86:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	68b9      	ldr	r1, [r7, #8]
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 f923 	bl	80041d8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2201      	movs	r2, #1
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bdb0      	pop	{r4, r5, r7, pc}

08003fb4 <HAL_LTDC_ConfigCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigCLUT(LTDC_HandleTypeDef *hltdc, uint32_t *pCLUT, uint32_t CLUTSize, uint32_t LayerIdx)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b089      	sub	sp, #36	; 0x24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
 8003fc0:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
  uint32_t counter = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61bb      	str	r3, [r7, #24]
  uint32_t pcounter = 0U;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_LTDC_ConfigCLUT+0x28>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e059      	b.n	8004090 <HAL_LTDC_ConfigCLUT+0xdc>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  for(counter = 0U; (counter < CLUTSize); counter++)
 8003fec:	2300      	movs	r3, #0
 8003fee:	61bb      	str	r3, [r7, #24]
 8003ff0:	e041      	b.n	8004076 <HAL_LTDC_ConfigCLUT+0xc2>
  {
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2134      	movs	r1, #52	; 0x34
 8003ff8:	fb01 f303 	mul.w	r3, r1, r3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	3348      	adds	r3, #72	; 0x48
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2b06      	cmp	r3, #6
 8004004:	d114      	bne.n	8004030 <HAL_LTDC_ConfigCLUT+0x7c>
    {
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	4613      	mov	r3, r2
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	4413      	add	r3, r2
 800400e:	061a      	lsls	r2, r3, #24
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	b2db      	uxtb	r3, r3
 8004016:	431a      	orrs	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004020:	431a      	orrs	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800402a:	4313      	orrs	r3, r2
 800402c:	61fb      	str	r3, [r7, #28]
 800402e:	e010      	b.n	8004052 <HAL_LTDC_ConfigCLUT+0x9e>
    }
    else
    { 
      tmp  = ((counter << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	061a      	lsls	r2, r3, #24
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	431a      	orrs	r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004044:	431a      	orrs	r2, r3
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800404e:	4313      	orrs	r3, r2
 8004050:	61fb      	str	r3, [r7, #28]
    }
    pcounter = (uint32_t)pCLUT + sizeof(*pCLUT);
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	3304      	adds	r3, #4
 8004056:	617b      	str	r3, [r7, #20]
    pCLUT = (uint32_t *)pcounter;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	60bb      	str	r3, [r7, #8]

    /* Specifies the C-LUT address and RGB value */
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	461a      	mov	r2, r3
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	01db      	lsls	r3, r3, #7
 8004066:	4413      	add	r3, r2
 8004068:	3384      	adds	r3, #132	; 0x84
 800406a:	461a      	mov	r2, r3
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	6413      	str	r3, [r2, #64]	; 0x40
  for(counter = 0U; (counter < CLUTSize); counter++)
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	3301      	adds	r3, #1
 8004074:	61bb      	str	r3, [r7, #24]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	429a      	cmp	r2, r3
 800407c:	d3b9      	bcc.n	8003ff2 <HAL_LTDC_ConfigCLUT+0x3e>
  }
  
  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);  
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3724      	adds	r7, #36	; 0x24
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_LTDC_EnableCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_LTDC_EnableCLUT+0x18>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e026      	b.n	8004102 <HAL_LTDC_EnableCLUT+0x66>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color lookup table by setting CLUTEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	461a      	mov	r2, r3
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	01db      	lsls	r3, r3, #7
 80040ce:	4413      	add	r3, r2
 80040d0:	3384      	adds	r3, #132	; 0x84
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6812      	ldr	r2, [r2, #0]
 80040d8:	4611      	mov	r1, r2
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	01d2      	lsls	r2, r2, #7
 80040de:	440a      	add	r2, r1
 80040e0:	3284      	adds	r2, #132	; 0x84
 80040e2:	f043 0310 	orr.w	r3, r3, #16
 80040e6:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2201      	movs	r2, #1
 80040ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b086      	sub	sp, #24
 8004112:	af00      	add	r7, sp, #0
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_LTDC_SetAddress+0x1a>
 8004124:	2302      	movs	r3, #2
 8004126:	e024      	b.n	8004172 <HAL_LTDC_SetAddress+0x64>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2234      	movs	r2, #52	; 0x34
 800413c:	fb02 f303 	mul.w	r3, r2, r3
 8004140:	3338      	adds	r3, #56	; 0x38
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	4413      	add	r3, r2
 8004146:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6979      	ldr	r1, [r7, #20]
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 f840 	bl	80041d8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2201      	movs	r2, #1
 800415e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation. 
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800418a:	2b01      	cmp	r3, #1
 800418c:	d101      	bne.n	8004192 <HAL_LTDC_Reload+0x18>
 800418e:	2302      	movs	r3, #2
 8004190:	e01c      	b.n	80041cc <HAL_LTDC_Reload+0x52>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2202      	movs	r2, #2
 800419e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  
  /* Enable the Reload interrupt */  
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0208 	orr.w	r2, r2, #8
 80041b0:	635a      	str	r2, [r3, #52]	; 0x34
       
  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;        
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  
  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80041d8:	b480      	push	{r7}
 80041da:	b089      	sub	sp, #36	; 0x24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	0c1b      	lsrs	r3, r3, #16
 80041fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004200:	4413      	add	r3, r2
 8004202:	041b      	lsls	r3, r3, #16
 8004204:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	01db      	lsls	r3, r3, #7
 8004210:	4413      	add	r3, r2
 8004212:	3384      	adds	r3, #132	; 0x84
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	6812      	ldr	r2, [r2, #0]
 800421a:	4611      	mov	r1, r2
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	01d2      	lsls	r2, r2, #7
 8004220:	440a      	add	r2, r1
 8004222:	3284      	adds	r2, #132	; 0x84
 8004224:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004228:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	0c1b      	lsrs	r3, r3, #16
 8004236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800423a:	4413      	add	r3, r2
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4619      	mov	r1, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	01db      	lsls	r3, r3, #7
 8004248:	440b      	add	r3, r1
 800424a:	3384      	adds	r3, #132	; 0x84
 800424c:	4619      	mov	r1, r3
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	4313      	orrs	r3, r2
 8004252:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	68da      	ldr	r2, [r3, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004262:	4413      	add	r3, r2
 8004264:	041b      	lsls	r3, r3, #16
 8004266:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	461a      	mov	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	01db      	lsls	r3, r3, #7
 8004272:	4413      	add	r3, r2
 8004274:	3384      	adds	r3, #132	; 0x84
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	6812      	ldr	r2, [r2, #0]
 800427c:	4611      	mov	r1, r2
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	01d2      	lsls	r2, r2, #7
 8004282:	440a      	add	r2, r1
 8004284:	3284      	adds	r2, #132	; 0x84
 8004286:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800428a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800429a:	4413      	add	r3, r2
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4619      	mov	r1, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	01db      	lsls	r3, r3, #7
 80042a8:	440b      	add	r3, r1
 80042aa:	3384      	adds	r3, #132	; 0x84
 80042ac:	4619      	mov	r1, r3
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	461a      	mov	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	01db      	lsls	r3, r3, #7
 80042be:	4413      	add	r3, r2
 80042c0:	3384      	adds	r3, #132	; 0x84
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	4611      	mov	r1, r2
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	01d2      	lsls	r2, r2, #7
 80042ce:	440a      	add	r2, r1
 80042d0:	3284      	adds	r2, #132	; 0x84
 80042d2:	f023 0307 	bic.w	r3, r3, #7
 80042d6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	01db      	lsls	r3, r3, #7
 80042e2:	4413      	add	r3, r2
 80042e4:	3384      	adds	r3, #132	; 0x84
 80042e6:	461a      	mov	r2, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80042fe:	041b      	lsls	r3, r3, #16
 8004300:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	061b      	lsls	r3, r3, #24
 8004308:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	01db      	lsls	r3, r3, #7
 8004314:	4413      	add	r3, r2
 8004316:	3384      	adds	r3, #132	; 0x84
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	01db      	lsls	r3, r3, #7
 8004324:	4413      	add	r3, r2
 8004326:	3384      	adds	r3, #132	; 0x84
 8004328:	461a      	mov	r2, r3
 800432a:	2300      	movs	r3, #0
 800432c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004334:	461a      	mov	r2, r3
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	431a      	orrs	r2, r3
 800433a:	69bb      	ldr	r3, [r7, #24]
 800433c:	431a      	orrs	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4619      	mov	r1, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	01db      	lsls	r3, r3, #7
 8004348:	440b      	add	r3, r1
 800434a:	3384      	adds	r3, #132	; 0x84
 800434c:	4619      	mov	r1, r3
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	4313      	orrs	r3, r2
 8004352:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	01db      	lsls	r3, r3, #7
 800435e:	4413      	add	r3, r2
 8004360:	3384      	adds	r3, #132	; 0x84
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	4611      	mov	r1, r2
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	01d2      	lsls	r2, r2, #7
 800436e:	440a      	add	r2, r1
 8004370:	3284      	adds	r2, #132	; 0x84
 8004372:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004376:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	01db      	lsls	r3, r3, #7
 8004382:	4413      	add	r3, r2
 8004384:	3384      	adds	r3, #132	; 0x84
 8004386:	461a      	mov	r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	01db      	lsls	r3, r3, #7
 8004398:	4413      	add	r3, r2
 800439a:	3384      	adds	r3, #132	; 0x84
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	6812      	ldr	r2, [r2, #0]
 80043a2:	4611      	mov	r1, r2
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	01d2      	lsls	r2, r2, #7
 80043a8:	440a      	add	r2, r1
 80043aa:	3284      	adds	r2, #132	; 0x84
 80043ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80043b0:	f023 0307 	bic.w	r3, r3, #7
 80043b4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	69da      	ldr	r2, [r3, #28]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	68f9      	ldr	r1, [r7, #12]
 80043c0:	6809      	ldr	r1, [r1, #0]
 80043c2:	4608      	mov	r0, r1
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	01c9      	lsls	r1, r1, #7
 80043c8:	4401      	add	r1, r0
 80043ca:	3184      	adds	r1, #132	; 0x84
 80043cc:	4313      	orrs	r3, r2
 80043ce:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	461a      	mov	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	01db      	lsls	r3, r3, #7
 80043da:	4413      	add	r3, r2
 80043dc:	3384      	adds	r3, #132	; 0x84
 80043de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	01db      	lsls	r3, r3, #7
 80043ea:	4413      	add	r3, r2
 80043ec:	3384      	adds	r3, #132	; 0x84
 80043ee:	461a      	mov	r2, r3
 80043f0:	2300      	movs	r3, #0
 80043f2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	01db      	lsls	r3, r3, #7
 80043fe:	4413      	add	r3, r2
 8004400:	3384      	adds	r3, #132	; 0x84
 8004402:	461a      	mov	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d102      	bne.n	8004418 <LTDC_SetConfig+0x240>
  {
    tmp = 4U;
 8004412:	2304      	movs	r3, #4
 8004414:	61fb      	str	r3, [r7, #28]
 8004416:	e01b      	b.n	8004450 <LTDC_SetConfig+0x278>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d102      	bne.n	8004426 <LTDC_SetConfig+0x24e>
  {
    tmp = 3U;
 8004420:	2303      	movs	r3, #3
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	e014      	b.n	8004450 <LTDC_SetConfig+0x278>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b04      	cmp	r3, #4
 800442c:	d00b      	beq.n	8004446 <LTDC_SetConfig+0x26e>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004432:	2b02      	cmp	r3, #2
 8004434:	d007      	beq.n	8004446 <LTDC_SetConfig+0x26e>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800443a:	2b03      	cmp	r3, #3
 800443c:	d003      	beq.n	8004446 <LTDC_SetConfig+0x26e>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004442:	2b07      	cmp	r3, #7
 8004444:	d102      	bne.n	800444c <LTDC_SetConfig+0x274>
  {
    tmp = 2U;
 8004446:	2302      	movs	r3, #2
 8004448:	61fb      	str	r3, [r7, #28]
 800444a:	e001      	b.n	8004450 <LTDC_SetConfig+0x278>
  }
  else
  {
    tmp = 1U;
 800444c:	2301      	movs	r3, #1
 800444e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	461a      	mov	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	01db      	lsls	r3, r3, #7
 800445a:	4413      	add	r3, r2
 800445c:	3384      	adds	r3, #132	; 0x84
 800445e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	6812      	ldr	r2, [r2, #0]
 8004464:	4611      	mov	r1, r2
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	01d2      	lsls	r2, r2, #7
 800446a:	440a      	add	r2, r1
 800446c:	3284      	adds	r2, #132	; 0x84
 800446e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004472:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004478:	69fa      	ldr	r2, [r7, #28]
 800447a:	fb02 f303 	mul.w	r3, r2, r3
 800447e:	041a      	lsls	r2, r3, #16
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	6859      	ldr	r1, [r3, #4]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	1acb      	subs	r3, r1, r3
 800448a:	69f9      	ldr	r1, [r7, #28]
 800448c:	fb01 f303 	mul.w	r3, r1, r3
 8004490:	3303      	adds	r3, #3
 8004492:	68f9      	ldr	r1, [r7, #12]
 8004494:	6809      	ldr	r1, [r1, #0]
 8004496:	4608      	mov	r0, r1
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	01c9      	lsls	r1, r1, #7
 800449c:	4401      	add	r1, r0
 800449e:	3184      	adds	r1, #132	; 0x84
 80044a0:	4313      	orrs	r3, r2
 80044a2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	01db      	lsls	r3, r3, #7
 80044ae:	4413      	add	r3, r2
 80044b0:	3384      	adds	r3, #132	; 0x84
 80044b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	6812      	ldr	r2, [r2, #0]
 80044b8:	4611      	mov	r1, r2
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	01d2      	lsls	r2, r2, #7
 80044be:	440a      	add	r2, r1
 80044c0:	3284      	adds	r2, #132	; 0x84
 80044c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80044c6:	f023 0307 	bic.w	r3, r3, #7
 80044ca:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	461a      	mov	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	01db      	lsls	r3, r3, #7
 80044d6:	4413      	add	r3, r2
 80044d8:	3384      	adds	r3, #132	; 0x84
 80044da:	461a      	mov	r2, r3
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	461a      	mov	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	01db      	lsls	r3, r3, #7
 80044ec:	4413      	add	r3, r2
 80044ee:	3384      	adds	r3, #132	; 0x84
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	6812      	ldr	r2, [r2, #0]
 80044f6:	4611      	mov	r1, r2
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	01d2      	lsls	r2, r2, #7
 80044fc:	440a      	add	r2, r1
 80044fe:	3284      	adds	r2, #132	; 0x84
 8004500:	f043 0301 	orr.w	r3, r3, #1
 8004504:	6013      	str	r3, [r2, #0]
}
 8004506:	bf00      	nop
 8004508:	3724      	adds	r7, #36	; 0x24
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
	...

08004514 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800451a:	2300      	movs	r3, #0
 800451c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800451e:	2300      	movs	r3, #0
 8004520:	603b      	str	r3, [r7, #0]
 8004522:	4b20      	ldr	r3, [pc, #128]	; (80045a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	4a1f      	ldr	r2, [pc, #124]	; (80045a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800452c:	6413      	str	r3, [r2, #64]	; 0x40
 800452e:	4b1d      	ldr	r3, [pc, #116]	; (80045a4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004536:	603b      	str	r3, [r7, #0]
 8004538:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800453a:	4b1b      	ldr	r3, [pc, #108]	; (80045a8 <HAL_PWREx_EnableOverDrive+0x94>)
 800453c:	2201      	movs	r2, #1
 800453e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004540:	f7ff f8dc 	bl	80036fc <HAL_GetTick>
 8004544:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004546:	e009      	b.n	800455c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004548:	f7ff f8d8 	bl	80036fc <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004556:	d901      	bls.n	800455c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e01f      	b.n	800459c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800455c:	4b13      	ldr	r3, [pc, #76]	; (80045ac <HAL_PWREx_EnableOverDrive+0x98>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004568:	d1ee      	bne.n	8004548 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800456a:	4b11      	ldr	r3, [pc, #68]	; (80045b0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800456c:	2201      	movs	r2, #1
 800456e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004570:	f7ff f8c4 	bl	80036fc <HAL_GetTick>
 8004574:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004576:	e009      	b.n	800458c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004578:	f7ff f8c0 	bl	80036fc <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004586:	d901      	bls.n	800458c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e007      	b.n	800459c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800458c:	4b07      	ldr	r3, [pc, #28]	; (80045ac <HAL_PWREx_EnableOverDrive+0x98>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004594:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004598:	d1ee      	bne.n	8004578 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40023800 	.word	0x40023800
 80045a8:	420e0040 	.word	0x420e0040
 80045ac:	40007000 	.word	0x40007000
 80045b0:	420e0044 	.word	0x420e0044

080045b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e264      	b.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d075      	beq.n	80046be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045d2:	4ba3      	ldr	r3, [pc, #652]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 030c 	and.w	r3, r3, #12
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d00c      	beq.n	80045f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045de:	4ba0      	ldr	r3, [pc, #640]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	d112      	bne.n	8004610 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ea:	4b9d      	ldr	r3, [pc, #628]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045f6:	d10b      	bne.n	8004610 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f8:	4b99      	ldr	r3, [pc, #612]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d05b      	beq.n	80046bc <HAL_RCC_OscConfig+0x108>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d157      	bne.n	80046bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e23f      	b.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004618:	d106      	bne.n	8004628 <HAL_RCC_OscConfig+0x74>
 800461a:	4b91      	ldr	r3, [pc, #580]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a90      	ldr	r2, [pc, #576]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 8004620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004624:	6013      	str	r3, [r2, #0]
 8004626:	e01d      	b.n	8004664 <HAL_RCC_OscConfig+0xb0>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004630:	d10c      	bne.n	800464c <HAL_RCC_OscConfig+0x98>
 8004632:	4b8b      	ldr	r3, [pc, #556]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a8a      	ldr	r2, [pc, #552]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 8004638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	4b88      	ldr	r3, [pc, #544]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a87      	ldr	r2, [pc, #540]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 8004644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004648:	6013      	str	r3, [r2, #0]
 800464a:	e00b      	b.n	8004664 <HAL_RCC_OscConfig+0xb0>
 800464c:	4b84      	ldr	r3, [pc, #528]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a83      	ldr	r2, [pc, #524]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 8004652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004656:	6013      	str	r3, [r2, #0]
 8004658:	4b81      	ldr	r3, [pc, #516]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a80      	ldr	r2, [pc, #512]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 800465e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d013      	beq.n	8004694 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466c:	f7ff f846 	bl	80036fc <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004674:	f7ff f842 	bl	80036fc <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b64      	cmp	r3, #100	; 0x64
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e204      	b.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004686:	4b76      	ldr	r3, [pc, #472]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0f0      	beq.n	8004674 <HAL_RCC_OscConfig+0xc0>
 8004692:	e014      	b.n	80046be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004694:	f7ff f832 	bl	80036fc <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800469c:	f7ff f82e 	bl	80036fc <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b64      	cmp	r3, #100	; 0x64
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e1f0      	b.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ae:	4b6c      	ldr	r3, [pc, #432]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1f0      	bne.n	800469c <HAL_RCC_OscConfig+0xe8>
 80046ba:	e000      	b.n	80046be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d063      	beq.n	8004792 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046ca:	4b65      	ldr	r3, [pc, #404]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 030c 	and.w	r3, r3, #12
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00b      	beq.n	80046ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046d6:	4b62      	ldr	r3, [pc, #392]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046de:	2b08      	cmp	r3, #8
 80046e0:	d11c      	bne.n	800471c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046e2:	4b5f      	ldr	r3, [pc, #380]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d116      	bne.n	800471c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ee:	4b5c      	ldr	r3, [pc, #368]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d005      	beq.n	8004706 <HAL_RCC_OscConfig+0x152>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d001      	beq.n	8004706 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e1c4      	b.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004706:	4b56      	ldr	r3, [pc, #344]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	4952      	ldr	r1, [pc, #328]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 8004716:	4313      	orrs	r3, r2
 8004718:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800471a:	e03a      	b.n	8004792 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d020      	beq.n	8004766 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004724:	4b4f      	ldr	r3, [pc, #316]	; (8004864 <HAL_RCC_OscConfig+0x2b0>)
 8004726:	2201      	movs	r2, #1
 8004728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472a:	f7fe ffe7 	bl	80036fc <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004730:	e008      	b.n	8004744 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004732:	f7fe ffe3 	bl	80036fc <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d901      	bls.n	8004744 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e1a5      	b.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004744:	4b46      	ldr	r3, [pc, #280]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0f0      	beq.n	8004732 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004750:	4b43      	ldr	r3, [pc, #268]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	4940      	ldr	r1, [pc, #256]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 8004760:	4313      	orrs	r3, r2
 8004762:	600b      	str	r3, [r1, #0]
 8004764:	e015      	b.n	8004792 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004766:	4b3f      	ldr	r3, [pc, #252]	; (8004864 <HAL_RCC_OscConfig+0x2b0>)
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476c:	f7fe ffc6 	bl	80036fc <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004774:	f7fe ffc2 	bl	80036fc <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e184      	b.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004786:	4b36      	ldr	r3, [pc, #216]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1f0      	bne.n	8004774 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	2b00      	cmp	r3, #0
 800479c:	d030      	beq.n	8004800 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d016      	beq.n	80047d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047a6:	4b30      	ldr	r3, [pc, #192]	; (8004868 <HAL_RCC_OscConfig+0x2b4>)
 80047a8:	2201      	movs	r2, #1
 80047aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ac:	f7fe ffa6 	bl	80036fc <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047b4:	f7fe ffa2 	bl	80036fc <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e164      	b.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047c6:	4b26      	ldr	r3, [pc, #152]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 80047c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCC_OscConfig+0x200>
 80047d2:	e015      	b.n	8004800 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047d4:	4b24      	ldr	r3, [pc, #144]	; (8004868 <HAL_RCC_OscConfig+0x2b4>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047da:	f7fe ff8f 	bl	80036fc <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047e2:	f7fe ff8b 	bl	80036fc <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e14d      	b.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047f4:	4b1a      	ldr	r3, [pc, #104]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 80047f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1f0      	bne.n	80047e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 80a0 	beq.w	800494e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800480e:	2300      	movs	r3, #0
 8004810:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004812:	4b13      	ldr	r3, [pc, #76]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10f      	bne.n	800483e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800481e:	2300      	movs	r3, #0
 8004820:	60bb      	str	r3, [r7, #8]
 8004822:	4b0f      	ldr	r3, [pc, #60]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	4a0e      	ldr	r2, [pc, #56]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 8004828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800482c:	6413      	str	r3, [r2, #64]	; 0x40
 800482e:	4b0c      	ldr	r3, [pc, #48]	; (8004860 <HAL_RCC_OscConfig+0x2ac>)
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004836:	60bb      	str	r3, [r7, #8]
 8004838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800483a:	2301      	movs	r3, #1
 800483c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483e:	4b0b      	ldr	r3, [pc, #44]	; (800486c <HAL_RCC_OscConfig+0x2b8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004846:	2b00      	cmp	r3, #0
 8004848:	d121      	bne.n	800488e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800484a:	4b08      	ldr	r3, [pc, #32]	; (800486c <HAL_RCC_OscConfig+0x2b8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a07      	ldr	r2, [pc, #28]	; (800486c <HAL_RCC_OscConfig+0x2b8>)
 8004850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004854:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004856:	f7fe ff51 	bl	80036fc <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800485c:	e011      	b.n	8004882 <HAL_RCC_OscConfig+0x2ce>
 800485e:	bf00      	nop
 8004860:	40023800 	.word	0x40023800
 8004864:	42470000 	.word	0x42470000
 8004868:	42470e80 	.word	0x42470e80
 800486c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004870:	f7fe ff44 	bl	80036fc <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e106      	b.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004882:	4b85      	ldr	r3, [pc, #532]	; (8004a98 <HAL_RCC_OscConfig+0x4e4>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0f0      	beq.n	8004870 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d106      	bne.n	80048a4 <HAL_RCC_OscConfig+0x2f0>
 8004896:	4b81      	ldr	r3, [pc, #516]	; (8004a9c <HAL_RCC_OscConfig+0x4e8>)
 8004898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489a:	4a80      	ldr	r2, [pc, #512]	; (8004a9c <HAL_RCC_OscConfig+0x4e8>)
 800489c:	f043 0301 	orr.w	r3, r3, #1
 80048a0:	6713      	str	r3, [r2, #112]	; 0x70
 80048a2:	e01c      	b.n	80048de <HAL_RCC_OscConfig+0x32a>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	2b05      	cmp	r3, #5
 80048aa:	d10c      	bne.n	80048c6 <HAL_RCC_OscConfig+0x312>
 80048ac:	4b7b      	ldr	r3, [pc, #492]	; (8004a9c <HAL_RCC_OscConfig+0x4e8>)
 80048ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b0:	4a7a      	ldr	r2, [pc, #488]	; (8004a9c <HAL_RCC_OscConfig+0x4e8>)
 80048b2:	f043 0304 	orr.w	r3, r3, #4
 80048b6:	6713      	str	r3, [r2, #112]	; 0x70
 80048b8:	4b78      	ldr	r3, [pc, #480]	; (8004a9c <HAL_RCC_OscConfig+0x4e8>)
 80048ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048bc:	4a77      	ldr	r2, [pc, #476]	; (8004a9c <HAL_RCC_OscConfig+0x4e8>)
 80048be:	f043 0301 	orr.w	r3, r3, #1
 80048c2:	6713      	str	r3, [r2, #112]	; 0x70
 80048c4:	e00b      	b.n	80048de <HAL_RCC_OscConfig+0x32a>
 80048c6:	4b75      	ldr	r3, [pc, #468]	; (8004a9c <HAL_RCC_OscConfig+0x4e8>)
 80048c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ca:	4a74      	ldr	r2, [pc, #464]	; (8004a9c <HAL_RCC_OscConfig+0x4e8>)
 80048cc:	f023 0301 	bic.w	r3, r3, #1
 80048d0:	6713      	str	r3, [r2, #112]	; 0x70
 80048d2:	4b72      	ldr	r3, [pc, #456]	; (8004a9c <HAL_RCC_OscConfig+0x4e8>)
 80048d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d6:	4a71      	ldr	r2, [pc, #452]	; (8004a9c <HAL_RCC_OscConfig+0x4e8>)
 80048d8:	f023 0304 	bic.w	r3, r3, #4
 80048dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d015      	beq.n	8004912 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e6:	f7fe ff09 	bl	80036fc <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ec:	e00a      	b.n	8004904 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048ee:	f7fe ff05 	bl	80036fc <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e0c5      	b.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004904:	4b65      	ldr	r3, [pc, #404]	; (8004a9c <HAL_RCC_OscConfig+0x4e8>)
 8004906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0ee      	beq.n	80048ee <HAL_RCC_OscConfig+0x33a>
 8004910:	e014      	b.n	800493c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004912:	f7fe fef3 	bl	80036fc <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004918:	e00a      	b.n	8004930 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800491a:	f7fe feef 	bl	80036fc <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	f241 3288 	movw	r2, #5000	; 0x1388
 8004928:	4293      	cmp	r3, r2
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e0af      	b.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004930:	4b5a      	ldr	r3, [pc, #360]	; (8004a9c <HAL_RCC_OscConfig+0x4e8>)
 8004932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1ee      	bne.n	800491a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800493c:	7dfb      	ldrb	r3, [r7, #23]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d105      	bne.n	800494e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004942:	4b56      	ldr	r3, [pc, #344]	; (8004a9c <HAL_RCC_OscConfig+0x4e8>)
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	4a55      	ldr	r2, [pc, #340]	; (8004a9c <HAL_RCC_OscConfig+0x4e8>)
 8004948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800494c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 809b 	beq.w	8004a8e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004958:	4b50      	ldr	r3, [pc, #320]	; (8004a9c <HAL_RCC_OscConfig+0x4e8>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f003 030c 	and.w	r3, r3, #12
 8004960:	2b08      	cmp	r3, #8
 8004962:	d05c      	beq.n	8004a1e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	2b02      	cmp	r3, #2
 800496a:	d141      	bne.n	80049f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800496c:	4b4c      	ldr	r3, [pc, #304]	; (8004aa0 <HAL_RCC_OscConfig+0x4ec>)
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004972:	f7fe fec3 	bl	80036fc <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800497a:	f7fe febf 	bl	80036fc <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e081      	b.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800498c:	4b43      	ldr	r3, [pc, #268]	; (8004a9c <HAL_RCC_OscConfig+0x4e8>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1f0      	bne.n	800497a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	69da      	ldr	r2, [r3, #28]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	019b      	lsls	r3, r3, #6
 80049a8:	431a      	orrs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	085b      	lsrs	r3, r3, #1
 80049b0:	3b01      	subs	r3, #1
 80049b2:	041b      	lsls	r3, r3, #16
 80049b4:	431a      	orrs	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ba:	061b      	lsls	r3, r3, #24
 80049bc:	4937      	ldr	r1, [pc, #220]	; (8004a9c <HAL_RCC_OscConfig+0x4e8>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049c2:	4b37      	ldr	r3, [pc, #220]	; (8004aa0 <HAL_RCC_OscConfig+0x4ec>)
 80049c4:	2201      	movs	r2, #1
 80049c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c8:	f7fe fe98 	bl	80036fc <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049d0:	f7fe fe94 	bl	80036fc <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e056      	b.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049e2:	4b2e      	ldr	r3, [pc, #184]	; (8004a9c <HAL_RCC_OscConfig+0x4e8>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0f0      	beq.n	80049d0 <HAL_RCC_OscConfig+0x41c>
 80049ee:	e04e      	b.n	8004a8e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049f0:	4b2b      	ldr	r3, [pc, #172]	; (8004aa0 <HAL_RCC_OscConfig+0x4ec>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f6:	f7fe fe81 	bl	80036fc <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049fc:	e008      	b.n	8004a10 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049fe:	f7fe fe7d 	bl	80036fc <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e03f      	b.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a10:	4b22      	ldr	r3, [pc, #136]	; (8004a9c <HAL_RCC_OscConfig+0x4e8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1f0      	bne.n	80049fe <HAL_RCC_OscConfig+0x44a>
 8004a1c:	e037      	b.n	8004a8e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d101      	bne.n	8004a2a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e032      	b.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a2a:	4b1c      	ldr	r3, [pc, #112]	; (8004a9c <HAL_RCC_OscConfig+0x4e8>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d028      	beq.n	8004a8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d121      	bne.n	8004a8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d11a      	bne.n	8004a8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a60:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d111      	bne.n	8004a8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a70:	085b      	lsrs	r3, r3, #1
 8004a72:	3b01      	subs	r3, #1
 8004a74:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d107      	bne.n	8004a8a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a84:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d001      	beq.n	8004a8e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e000      	b.n	8004a90 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3718      	adds	r7, #24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40007000 	.word	0x40007000
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	42470060 	.word	0x42470060

08004aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e0cc      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab8:	4b68      	ldr	r3, [pc, #416]	; (8004c5c <HAL_RCC_ClockConfig+0x1b8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 030f 	and.w	r3, r3, #15
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d90c      	bls.n	8004ae0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac6:	4b65      	ldr	r3, [pc, #404]	; (8004c5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ace:	4b63      	ldr	r3, [pc, #396]	; (8004c5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 030f 	and.w	r3, r3, #15
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d001      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e0b8      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d020      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004af8:	4b59      	ldr	r3, [pc, #356]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	4a58      	ldr	r2, [pc, #352]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004afe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0308 	and.w	r3, r3, #8
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d005      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b10:	4b53      	ldr	r3, [pc, #332]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	4a52      	ldr	r2, [pc, #328]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b1c:	4b50      	ldr	r3, [pc, #320]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	494d      	ldr	r1, [pc, #308]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d044      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d107      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b42:	4b47      	ldr	r3, [pc, #284]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d119      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e07f      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d003      	beq.n	8004b62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b5e:	2b03      	cmp	r3, #3
 8004b60:	d107      	bne.n	8004b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b62:	4b3f      	ldr	r3, [pc, #252]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d109      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e06f      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b72:	4b3b      	ldr	r3, [pc, #236]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e067      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b82:	4b37      	ldr	r3, [pc, #220]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f023 0203 	bic.w	r2, r3, #3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	4934      	ldr	r1, [pc, #208]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b94:	f7fe fdb2 	bl	80036fc <HAL_GetTick>
 8004b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9a:	e00a      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b9c:	f7fe fdae 	bl	80036fc <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e04f      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb2:	4b2b      	ldr	r3, [pc, #172]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 020c 	and.w	r2, r3, #12
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d1eb      	bne.n	8004b9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bc4:	4b25      	ldr	r3, [pc, #148]	; (8004c5c <HAL_RCC_ClockConfig+0x1b8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 030f 	and.w	r3, r3, #15
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d20c      	bcs.n	8004bec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd2:	4b22      	ldr	r3, [pc, #136]	; (8004c5c <HAL_RCC_ClockConfig+0x1b8>)
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bda:	4b20      	ldr	r3, [pc, #128]	; (8004c5c <HAL_RCC_ClockConfig+0x1b8>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 030f 	and.w	r3, r3, #15
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d001      	beq.n	8004bec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e032      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d008      	beq.n	8004c0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bf8:	4b19      	ldr	r3, [pc, #100]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	4916      	ldr	r1, [pc, #88]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d009      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c16:	4b12      	ldr	r3, [pc, #72]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	490e      	ldr	r1, [pc, #56]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c2a:	f000 f821 	bl	8004c70 <HAL_RCC_GetSysClockFreq>
 8004c2e:	4601      	mov	r1, r0
 8004c30:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <HAL_RCC_ClockConfig+0x1bc>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	091b      	lsrs	r3, r3, #4
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	4a0a      	ldr	r2, [pc, #40]	; (8004c64 <HAL_RCC_ClockConfig+0x1c0>)
 8004c3c:	5cd3      	ldrb	r3, [r2, r3]
 8004c3e:	fa21 f303 	lsr.w	r3, r1, r3
 8004c42:	4a09      	ldr	r2, [pc, #36]	; (8004c68 <HAL_RCC_ClockConfig+0x1c4>)
 8004c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c46:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <HAL_RCC_ClockConfig+0x1c8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fe fd12 	bl	8003674 <HAL_InitTick>

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40023c00 	.word	0x40023c00
 8004c60:	40023800 	.word	0x40023800
 8004c64:	08007254 	.word	0x08007254
 8004c68:	20012c04 	.word	0x20012c04
 8004c6c:	20012c08 	.word	0x20012c08

08004c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	607b      	str	r3, [r7, #4]
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c86:	4b63      	ldr	r3, [pc, #396]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 030c 	and.w	r3, r3, #12
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	d007      	beq.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x32>
 8004c92:	2b08      	cmp	r3, #8
 8004c94:	d008      	beq.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x38>
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f040 80b4 	bne.w	8004e04 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c9c:	4b5e      	ldr	r3, [pc, #376]	; (8004e18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004c9e:	60bb      	str	r3, [r7, #8]
       break;
 8004ca0:	e0b3      	b.n	8004e0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ca2:	4b5e      	ldr	r3, [pc, #376]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004ca4:	60bb      	str	r3, [r7, #8]
      break;
 8004ca6:	e0b0      	b.n	8004e0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ca8:	4b5a      	ldr	r3, [pc, #360]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cb0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cb2:	4b58      	ldr	r3, [pc, #352]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d04a      	beq.n	8004d54 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cbe:	4b55      	ldr	r3, [pc, #340]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	099b      	lsrs	r3, r3, #6
 8004cc4:	f04f 0400 	mov.w	r4, #0
 8004cc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	ea03 0501 	and.w	r5, r3, r1
 8004cd4:	ea04 0602 	and.w	r6, r4, r2
 8004cd8:	4629      	mov	r1, r5
 8004cda:	4632      	mov	r2, r6
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	f04f 0400 	mov.w	r4, #0
 8004ce4:	0154      	lsls	r4, r2, #5
 8004ce6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004cea:	014b      	lsls	r3, r1, #5
 8004cec:	4619      	mov	r1, r3
 8004cee:	4622      	mov	r2, r4
 8004cf0:	1b49      	subs	r1, r1, r5
 8004cf2:	eb62 0206 	sbc.w	r2, r2, r6
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	f04f 0400 	mov.w	r4, #0
 8004cfe:	0194      	lsls	r4, r2, #6
 8004d00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d04:	018b      	lsls	r3, r1, #6
 8004d06:	1a5b      	subs	r3, r3, r1
 8004d08:	eb64 0402 	sbc.w	r4, r4, r2
 8004d0c:	f04f 0100 	mov.w	r1, #0
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	00e2      	lsls	r2, r4, #3
 8004d16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d1a:	00d9      	lsls	r1, r3, #3
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4614      	mov	r4, r2
 8004d20:	195b      	adds	r3, r3, r5
 8004d22:	eb44 0406 	adc.w	r4, r4, r6
 8004d26:	f04f 0100 	mov.w	r1, #0
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	0262      	lsls	r2, r4, #9
 8004d30:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004d34:	0259      	lsls	r1, r3, #9
 8004d36:	460b      	mov	r3, r1
 8004d38:	4614      	mov	r4, r2
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	4621      	mov	r1, r4
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f04f 0400 	mov.w	r4, #0
 8004d44:	461a      	mov	r2, r3
 8004d46:	4623      	mov	r3, r4
 8004d48:	f7fb fa58 	bl	80001fc <__aeabi_uldivmod>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	460c      	mov	r4, r1
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	e049      	b.n	8004de8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d54:	4b2f      	ldr	r3, [pc, #188]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	099b      	lsrs	r3, r3, #6
 8004d5a:	f04f 0400 	mov.w	r4, #0
 8004d5e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	ea03 0501 	and.w	r5, r3, r1
 8004d6a:	ea04 0602 	and.w	r6, r4, r2
 8004d6e:	4629      	mov	r1, r5
 8004d70:	4632      	mov	r2, r6
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	f04f 0400 	mov.w	r4, #0
 8004d7a:	0154      	lsls	r4, r2, #5
 8004d7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d80:	014b      	lsls	r3, r1, #5
 8004d82:	4619      	mov	r1, r3
 8004d84:	4622      	mov	r2, r4
 8004d86:	1b49      	subs	r1, r1, r5
 8004d88:	eb62 0206 	sbc.w	r2, r2, r6
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	f04f 0400 	mov.w	r4, #0
 8004d94:	0194      	lsls	r4, r2, #6
 8004d96:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d9a:	018b      	lsls	r3, r1, #6
 8004d9c:	1a5b      	subs	r3, r3, r1
 8004d9e:	eb64 0402 	sbc.w	r4, r4, r2
 8004da2:	f04f 0100 	mov.w	r1, #0
 8004da6:	f04f 0200 	mov.w	r2, #0
 8004daa:	00e2      	lsls	r2, r4, #3
 8004dac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004db0:	00d9      	lsls	r1, r3, #3
 8004db2:	460b      	mov	r3, r1
 8004db4:	4614      	mov	r4, r2
 8004db6:	195b      	adds	r3, r3, r5
 8004db8:	eb44 0406 	adc.w	r4, r4, r6
 8004dbc:	f04f 0100 	mov.w	r1, #0
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	02a2      	lsls	r2, r4, #10
 8004dc6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004dca:	0299      	lsls	r1, r3, #10
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4614      	mov	r4, r2
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f04f 0400 	mov.w	r4, #0
 8004dda:	461a      	mov	r2, r3
 8004ddc:	4623      	mov	r3, r4
 8004dde:	f7fb fa0d 	bl	80001fc <__aeabi_uldivmod>
 8004de2:	4603      	mov	r3, r0
 8004de4:	460c      	mov	r4, r1
 8004de6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004de8:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	0c1b      	lsrs	r3, r3, #16
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	3301      	adds	r3, #1
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e00:	60bb      	str	r3, [r7, #8]
      break;
 8004e02:	e002      	b.n	8004e0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e04:	4b04      	ldr	r3, [pc, #16]	; (8004e18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004e06:	60bb      	str	r3, [r7, #8]
      break;
 8004e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e14:	40023800 	.word	0x40023800
 8004e18:	00f42400 	.word	0x00f42400
 8004e1c:	007a1200 	.word	0x007a1200

08004e20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e24:	4b03      	ldr	r3, [pc, #12]	; (8004e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e26:	681b      	ldr	r3, [r3, #0]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	20012c04 	.word	0x20012c04

08004e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e3c:	f7ff fff0 	bl	8004e20 <HAL_RCC_GetHCLKFreq>
 8004e40:	4601      	mov	r1, r0
 8004e42:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	0a9b      	lsrs	r3, r3, #10
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	4a03      	ldr	r2, [pc, #12]	; (8004e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e4e:	5cd3      	ldrb	r3, [r2, r3]
 8004e50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	08007264 	.word	0x08007264

08004e60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e64:	f7ff ffdc 	bl	8004e20 <HAL_RCC_GetHCLKFreq>
 8004e68:	4601      	mov	r1, r0
 8004e6a:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	0b5b      	lsrs	r3, r3, #13
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	4a03      	ldr	r2, [pc, #12]	; (8004e84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e76:	5cd3      	ldrb	r3, [r2, r3]
 8004e78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	40023800 	.word	0x40023800
 8004e84:	08007264 	.word	0x08007264

08004e88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10b      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d105      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d075      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ebc:	4bad      	ldr	r3, [pc, #692]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ec2:	f7fe fc1b 	bl	80036fc <HAL_GetTick>
 8004ec6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ec8:	e008      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004eca:	f7fe fc17 	bl	80036fc <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e18b      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004edc:	4ba6      	ldr	r3, [pc, #664]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1f0      	bne.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d009      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	019a      	lsls	r2, r3, #6
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	071b      	lsls	r3, r3, #28
 8004f00:	499d      	ldr	r1, [pc, #628]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d01f      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f14:	4b98      	ldr	r3, [pc, #608]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f1a:	0f1b      	lsrs	r3, r3, #28
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	019a      	lsls	r2, r3, #6
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	061b      	lsls	r3, r3, #24
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	071b      	lsls	r3, r3, #28
 8004f34:	4990      	ldr	r1, [pc, #576]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f3c:	4b8e      	ldr	r3, [pc, #568]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f42:	f023 021f 	bic.w	r2, r3, #31
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	498a      	ldr	r1, [pc, #552]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00d      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	019a      	lsls	r2, r3, #6
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	061b      	lsls	r3, r3, #24
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	071b      	lsls	r3, r3, #28
 8004f74:	4980      	ldr	r1, [pc, #512]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f7c:	4b7d      	ldr	r3, [pc, #500]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f82:	f7fe fbbb 	bl	80036fc <HAL_GetTick>
 8004f86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f88:	e008      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f8a:	f7fe fbb7 	bl	80036fc <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e12b      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f9c:	4b76      	ldr	r3, [pc, #472]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0f0      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d105      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d079      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004fc0:	4b6e      	ldr	r3, [pc, #440]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fc6:	f7fe fb99 	bl	80036fc <HAL_GetTick>
 8004fca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004fce:	f7fe fb95 	bl	80036fc <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e109      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fe0:	4b65      	ldr	r3, [pc, #404]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fec:	d0ef      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0304 	and.w	r3, r3, #4
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d020      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ffa:	4b5f      	ldr	r3, [pc, #380]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005000:	0f1b      	lsrs	r3, r3, #28
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	019a      	lsls	r2, r3, #6
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	061b      	lsls	r3, r3, #24
 8005014:	431a      	orrs	r2, r3
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	071b      	lsls	r3, r3, #28
 800501a:	4957      	ldr	r1, [pc, #348]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800501c:	4313      	orrs	r3, r2
 800501e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005022:	4b55      	ldr	r3, [pc, #340]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005028:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	3b01      	subs	r3, #1
 8005032:	021b      	lsls	r3, r3, #8
 8005034:	4950      	ldr	r1, [pc, #320]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0308 	and.w	r3, r3, #8
 8005044:	2b00      	cmp	r3, #0
 8005046:	d01e      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005048:	4b4b      	ldr	r3, [pc, #300]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800504a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504e:	0e1b      	lsrs	r3, r3, #24
 8005050:	f003 030f 	and.w	r3, r3, #15
 8005054:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	019a      	lsls	r2, r3, #6
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	061b      	lsls	r3, r3, #24
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	071b      	lsls	r3, r3, #28
 8005068:	4943      	ldr	r1, [pc, #268]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005070:	4b41      	ldr	r3, [pc, #260]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005076:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	493e      	ldr	r1, [pc, #248]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005080:	4313      	orrs	r3, r2
 8005082:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005086:	4b3d      	ldr	r3, [pc, #244]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005088:	2201      	movs	r2, #1
 800508a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800508c:	f7fe fb36 	bl	80036fc <HAL_GetTick>
 8005090:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005092:	e008      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005094:	f7fe fb32 	bl	80036fc <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e0a6      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050a6:	4b34      	ldr	r3, [pc, #208]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050b2:	d1ef      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0320 	and.w	r3, r3, #32
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 808d 	beq.w	80051dc <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	4b2c      	ldr	r3, [pc, #176]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	4a2b      	ldr	r2, [pc, #172]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050d0:	6413      	str	r3, [r2, #64]	; 0x40
 80050d2:	4b29      	ldr	r3, [pc, #164]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80050de:	4b28      	ldr	r3, [pc, #160]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a27      	ldr	r2, [pc, #156]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80050e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050ea:	f7fe fb07 	bl	80036fc <HAL_GetTick>
 80050ee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050f0:	e008      	b.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050f2:	f7fe fb03 	bl	80036fc <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d901      	bls.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e077      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005104:	4b1e      	ldr	r3, [pc, #120]	; (8005180 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0f0      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005110:	4b19      	ldr	r3, [pc, #100]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005118:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d039      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	429a      	cmp	r2, r3
 800512c:	d032      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800512e:	4b12      	ldr	r3, [pc, #72]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005136:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005138:	4b12      	ldr	r3, [pc, #72]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800513a:	2201      	movs	r2, #1
 800513c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800513e:	4b11      	ldr	r3, [pc, #68]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005144:	4a0c      	ldr	r2, [pc, #48]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800514a:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800514c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b01      	cmp	r3, #1
 8005154:	d11e      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005156:	f7fe fad1 	bl	80036fc <HAL_GetTick>
 800515a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800515c:	e014      	b.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800515e:	f7fe facd 	bl	80036fc <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	f241 3288 	movw	r2, #5000	; 0x1388
 800516c:	4293      	cmp	r3, r2
 800516e:	d90b      	bls.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e03f      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005174:	42470068 	.word	0x42470068
 8005178:	40023800 	.word	0x40023800
 800517c:	42470070 	.word	0x42470070
 8005180:	40007000 	.word	0x40007000
 8005184:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005188:	4b1c      	ldr	r3, [pc, #112]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800518a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d0e4      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005198:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800519c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051a0:	d10d      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x336>
 80051a2:	4b16      	ldr	r3, [pc, #88]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80051b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b6:	4911      	ldr	r1, [pc, #68]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	608b      	str	r3, [r1, #8]
 80051bc:	e005      	b.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x342>
 80051be:	4b0f      	ldr	r3, [pc, #60]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	4a0e      	ldr	r2, [pc, #56]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80051c8:	6093      	str	r3, [r2, #8]
 80051ca:	4b0c      	ldr	r3, [pc, #48]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051d6:	4909      	ldr	r1, [pc, #36]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0310 	and.w	r3, r3, #16
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d004      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80051ee:	4b04      	ldr	r3, [pc, #16]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80051f0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40023800 	.word	0x40023800
 8005200:	424711e0 	.word	0x424711e0

08005204 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e083      	b.n	800531e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	7f5b      	ldrb	r3, [r3, #29]
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d105      	bne.n	800522c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f87d 	bl	8005326 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	22ca      	movs	r2, #202	; 0xca
 8005238:	625a      	str	r2, [r3, #36]	; 0x24
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2253      	movs	r2, #83	; 0x53
 8005240:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f8f2 	bl	800542c <RTC_EnterInitMode>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d008      	beq.n	8005260 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	22ff      	movs	r2, #255	; 0xff
 8005254:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2204      	movs	r2, #4
 800525a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e05e      	b.n	800531e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6812      	ldr	r2, [r2, #0]
 800526a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800526e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005272:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6899      	ldr	r1, [r3, #8]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	431a      	orrs	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	68d2      	ldr	r2, [r2, #12]
 800529a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6919      	ldr	r1, [r3, #16]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	041a      	lsls	r2, r3, #16
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052be:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 0320 	and.w	r3, r3, #32
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10e      	bne.n	80052ec <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f884 	bl	80053dc <HAL_RTC_WaitForSynchro>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d008      	beq.n	80052ec <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	22ff      	movs	r2, #255	; 0xff
 80052e0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2204      	movs	r2, #4
 80052e6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e018      	b.n	800531e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052fa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	699a      	ldr	r2, [r3, #24]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	22ff      	movs	r2, #255	; 0xff
 8005314:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800531c:	2300      	movs	r3, #0
  }
}
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <HAL_RTC_MspInit>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */
}
 800532e:	bf00      	nop
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
	...

0800533c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d012      	beq.n	8005378 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00b      	beq.n	8005378 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f831 	bl	80053c8 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	b2da      	uxtb	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005376:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d012      	beq.n	80053ac <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00b      	beq.n	80053ac <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f875 	bl	8005484 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	b2da      	uxtb	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80053aa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80053ac:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <HAL_RTC_AlarmIRQHandler+0x88>)
 80053ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80053b2:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	775a      	strb	r2, [r3, #29]
}
 80053ba:	bf00      	nop
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	40013c00 	.word	0x40013c00

080053c8 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053e4:	2300      	movs	r3, #0
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68da      	ldr	r2, [r3, #12]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80053f6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053f8:	f7fe f980 	bl	80036fc <HAL_GetTick>
 80053fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80053fe:	e009      	b.n	8005414 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005400:	f7fe f97c 	bl	80036fc <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800540e:	d901      	bls.n	8005414 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e007      	b.n	8005424 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0ee      	beq.n	8005400 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005442:	2b00      	cmp	r3, #0
 8005444:	d119      	bne.n	800547a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f04f 32ff 	mov.w	r2, #4294967295
 800544e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005450:	f7fe f954 	bl	80036fc <HAL_GetTick>
 8005454:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005456:	e009      	b.n	800546c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005458:	f7fe f950 	bl	80036fc <HAL_GetTick>
 800545c:	4602      	mov	r2, r0
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	1ad3      	subs	r3, r2, r3
 8005462:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005466:	d901      	bls.n	800546c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e007      	b.n	800547c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0ee      	beq.n	8005458 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e056      	b.n	8005558 <HAL_SPI_Init+0xc0>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d106      	bne.n	80054ca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f7fd ff89 	bl	80033dc <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2202      	movs	r2, #2
 80054ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054e0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	431a      	orrs	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005506:	431a      	orrs	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	69db      	ldr	r3, [r3, #28]
 800550c:	431a      	orrs	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	ea42 0103 	orr.w	r1, r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	0c1b      	lsrs	r3, r3, #16
 8005528:	f003 0104 	and.w	r1, r3, #4
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	69da      	ldr	r2, [r3, #28]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005546:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08a      	sub	sp, #40	; 0x28
 8005564:	af02      	add	r7, sp, #8
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	603b      	str	r3, [r7, #0]
 800556c:	4613      	mov	r3, r2
 800556e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8005570:	2300      	movs	r3, #0
 8005572:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800557e:	2b01      	cmp	r3, #1
 8005580:	d101      	bne.n	8005586 <HAL_SPI_Transmit+0x26>
 8005582:	2302      	movs	r3, #2
 8005584:	e125      	b.n	80057d2 <HAL_SPI_Transmit+0x272>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800558e:	f7fe f8b5 	bl	80036fc <HAL_GetTick>
 8005592:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b01      	cmp	r3, #1
 800559e:	d002      	beq.n	80055a6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80055a0:	2302      	movs	r3, #2
 80055a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055a4:	e10c      	b.n	80057c0 <HAL_SPI_Transmit+0x260>
  }

  if((pData == NULL ) || (Size == 0))
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <HAL_SPI_Transmit+0x52>
 80055ac:	88fb      	ldrh	r3, [r7, #6]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d102      	bne.n	80055b8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055b6:	e103      	b.n	80057c0 <HAL_SPI_Transmit+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2203      	movs	r2, #3
 80055bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	88fa      	ldrh	r2, [r7, #6]
 80055d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	88fa      	ldrh	r2, [r7, #6]
 80055d6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055fe:	d107      	bne.n	8005610 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800560e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561a:	2b40      	cmp	r3, #64	; 0x40
 800561c:	d007      	beq.n	800562e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800562c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005636:	d147      	bne.n	80056c8 <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d004      	beq.n	800564a <HAL_SPI_Transmit+0xea>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005644:	b29b      	uxth	r3, r3
 8005646:	2b01      	cmp	r3, #1
 8005648:	d138      	bne.n	80056bc <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	881a      	ldrh	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	3302      	adds	r3, #2
 8005658:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800565e:	b29b      	uxth	r3, r3
 8005660:	3b01      	subs	r3, #1
 8005662:	b29a      	uxth	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005668:	e028      	b.n	80056bc <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b02      	cmp	r3, #2
 8005676:	d10f      	bne.n	8005698 <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	881a      	ldrh	r2, [r3, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	3302      	adds	r3, #2
 8005686:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800568c:	b29b      	uxth	r3, r3
 800568e:	3b01      	subs	r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	86da      	strh	r2, [r3, #54]	; 0x36
 8005696:	e011      	b.n	80056bc <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00b      	beq.n	80056b6 <HAL_SPI_Transmit+0x156>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a4:	d00a      	beq.n	80056bc <HAL_SPI_Transmit+0x15c>
 80056a6:	f7fe f829 	bl	80036fc <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d802      	bhi.n	80056bc <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056ba:	e081      	b.n	80057c0 <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1d1      	bne.n	800566a <HAL_SPI_Transmit+0x10a>
 80056c6:	e048      	b.n	800575a <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d004      	beq.n	80056da <HAL_SPI_Transmit+0x17a>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d13a      	bne.n	8005750 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	330c      	adds	r3, #12
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	7812      	ldrb	r2, [r2, #0]
 80056e4:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	3301      	adds	r3, #1
 80056ea:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80056fa:	e029      	b.n	8005750 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b02      	cmp	r3, #2
 8005708:	d110      	bne.n	800572c <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	330c      	adds	r3, #12
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	7812      	ldrb	r2, [r2, #0]
 8005714:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	3301      	adds	r3, #1
 800571a:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005720:	b29b      	uxth	r3, r3
 8005722:	3b01      	subs	r3, #1
 8005724:	b29a      	uxth	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	86da      	strh	r2, [r3, #54]	; 0x36
 800572a:	e011      	b.n	8005750 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00b      	beq.n	800574a <HAL_SPI_Transmit+0x1ea>
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005738:	d00a      	beq.n	8005750 <HAL_SPI_Transmit+0x1f0>
 800573a:	f7fd ffdf 	bl	80036fc <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d802      	bhi.n	8005750 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800574e:	e037      	b.n	80057c0 <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1d0      	bne.n	80056fc <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2201      	movs	r2, #1
 8005762:	2102      	movs	r1, #2
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 f838 	bl	80057da <SPI_WaitFlagStateUntilTimeout>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005774:	e024      	b.n	80057c0 <HAL_SPI_Transmit+0x260>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	6839      	ldr	r1, [r7, #0]
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f000 f896 	bl	80058ac <SPI_CheckFlag_BSY>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2220      	movs	r2, #32
 800578e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005790:	e016      	b.n	80057c0 <HAL_SPI_Transmit+0x260>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10a      	bne.n	80057b0 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	617b      	str	r3, [r7, #20]
 80057ae:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <HAL_SPI_Transmit+0x25e>
  {
    errorcode = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	77fb      	strb	r3, [r7, #31]
 80057bc:	e000      	b.n	80057c0 <HAL_SPI_Transmit+0x260>
  }

error:
 80057be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3720      	adds	r7, #32
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b084      	sub	sp, #16
 80057de:	af00      	add	r7, sp, #0
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	607a      	str	r2, [r7, #4]
 80057e6:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80057e8:	e04d      	b.n	8005886 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f0:	d049      	beq.n	8005886 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d007      	beq.n	8005808 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80057f8:	f7fd ff80 	bl	80036fc <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d83e      	bhi.n	8005886 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005816:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005820:	d111      	bne.n	8005846 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800582a:	d004      	beq.n	8005836 <SPI_WaitFlagStateUntilTimeout+0x5c>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005834:	d107      	bne.n	8005846 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005844:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800584e:	d110      	bne.n	8005872 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6819      	ldr	r1, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 800585e:	400b      	ands	r3, r1
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005870:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e00e      	b.n	80058a4 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	4013      	ands	r3, r2
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	429a      	cmp	r2, r3
 8005894:	d101      	bne.n	800589a <SPI_WaitFlagStateUntilTimeout+0xc0>
 8005896:	2201      	movs	r2, #1
 8005898:	e000      	b.n	800589c <SPI_WaitFlagStateUntilTimeout+0xc2>
 800589a:	2200      	movs	r2, #0
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d1a3      	bne.n	80057ea <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af02      	add	r7, sp, #8
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2200      	movs	r2, #0
 80058c0:	2180      	movs	r1, #128	; 0x80
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f7ff ff89 	bl	80057da <SPI_WaitFlagStateUntilTimeout>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d007      	beq.n	80058de <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d2:	f043 0220 	orr.w	r2, r3, #32
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e000      	b.n	80058e0 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e041      	b.n	800597e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d106      	bne.n	8005914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f839 	bl	8005986 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3304      	adds	r3, #4
 8005924:	4619      	mov	r1, r3
 8005926:	4610      	mov	r0, r2
 8005928:	f000 f9e2 	bl	8005cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005986:	b480      	push	{r7}
 8005988:	b083      	sub	sp, #12
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
	...

0800599c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800599c:	b480      	push	{r7}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d001      	beq.n	80059b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e04e      	b.n	8005a52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68da      	ldr	r2, [r3, #12]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f042 0201 	orr.w	r2, r2, #1
 80059ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a23      	ldr	r2, [pc, #140]	; (8005a60 <HAL_TIM_Base_Start_IT+0xc4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d022      	beq.n	8005a1c <HAL_TIM_Base_Start_IT+0x80>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059de:	d01d      	beq.n	8005a1c <HAL_TIM_Base_Start_IT+0x80>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a1f      	ldr	r2, [pc, #124]	; (8005a64 <HAL_TIM_Base_Start_IT+0xc8>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d018      	beq.n	8005a1c <HAL_TIM_Base_Start_IT+0x80>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a1e      	ldr	r2, [pc, #120]	; (8005a68 <HAL_TIM_Base_Start_IT+0xcc>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d013      	beq.n	8005a1c <HAL_TIM_Base_Start_IT+0x80>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1c      	ldr	r2, [pc, #112]	; (8005a6c <HAL_TIM_Base_Start_IT+0xd0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d00e      	beq.n	8005a1c <HAL_TIM_Base_Start_IT+0x80>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1b      	ldr	r2, [pc, #108]	; (8005a70 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d009      	beq.n	8005a1c <HAL_TIM_Base_Start_IT+0x80>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a19      	ldr	r2, [pc, #100]	; (8005a74 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d004      	beq.n	8005a1c <HAL_TIM_Base_Start_IT+0x80>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a18      	ldr	r2, [pc, #96]	; (8005a78 <HAL_TIM_Base_Start_IT+0xdc>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d111      	bne.n	8005a40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b06      	cmp	r3, #6
 8005a2c:	d010      	beq.n	8005a50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f042 0201 	orr.w	r2, r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3e:	e007      	b.n	8005a50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	40010000 	.word	0x40010000
 8005a64:	40000400 	.word	0x40000400
 8005a68:	40000800 	.word	0x40000800
 8005a6c:	40000c00 	.word	0x40000c00
 8005a70:	40010400 	.word	0x40010400
 8005a74:	40014000 	.word	0x40014000
 8005a78:	40001800 	.word	0x40001800

08005a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d122      	bne.n	8005ad8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d11b      	bne.n	8005ad8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f06f 0202 	mvn.w	r2, #2
 8005aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	f003 0303 	and.w	r3, r3, #3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d003      	beq.n	8005ac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f8f8 	bl	8005cb4 <HAL_TIM_IC_CaptureCallback>
 8005ac4:	e005      	b.n	8005ad2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f8ea 	bl	8005ca0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f8fb 	bl	8005cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	f003 0304 	and.w	r3, r3, #4
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	d122      	bne.n	8005b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b04      	cmp	r3, #4
 8005af2:	d11b      	bne.n	8005b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f06f 0204 	mvn.w	r2, #4
 8005afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2202      	movs	r2, #2
 8005b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f8ce 	bl	8005cb4 <HAL_TIM_IC_CaptureCallback>
 8005b18:	e005      	b.n	8005b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f8c0 	bl	8005ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f8d1 	bl	8005cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	f003 0308 	and.w	r3, r3, #8
 8005b36:	2b08      	cmp	r3, #8
 8005b38:	d122      	bne.n	8005b80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f003 0308 	and.w	r3, r3, #8
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d11b      	bne.n	8005b80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f06f 0208 	mvn.w	r2, #8
 8005b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2204      	movs	r2, #4
 8005b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f8a4 	bl	8005cb4 <HAL_TIM_IC_CaptureCallback>
 8005b6c:	e005      	b.n	8005b7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f896 	bl	8005ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f8a7 	bl	8005cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f003 0310 	and.w	r3, r3, #16
 8005b8a:	2b10      	cmp	r3, #16
 8005b8c:	d122      	bne.n	8005bd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f003 0310 	and.w	r3, r3, #16
 8005b98:	2b10      	cmp	r3, #16
 8005b9a:	d11b      	bne.n	8005bd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f06f 0210 	mvn.w	r2, #16
 8005ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2208      	movs	r2, #8
 8005baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f87a 	bl	8005cb4 <HAL_TIM_IC_CaptureCallback>
 8005bc0:	e005      	b.n	8005bce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f86c 	bl	8005ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f87d 	bl	8005cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d10e      	bne.n	8005c00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d107      	bne.n	8005c00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f06f 0201 	mvn.w	r2, #1
 8005bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f846 	bl	8005c8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0a:	2b80      	cmp	r3, #128	; 0x80
 8005c0c:	d10e      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c18:	2b80      	cmp	r3, #128	; 0x80
 8005c1a:	d107      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f988 	bl	8005f3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c36:	2b40      	cmp	r3, #64	; 0x40
 8005c38:	d10e      	bne.n	8005c58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c44:	2b40      	cmp	r3, #64	; 0x40
 8005c46:	d107      	bne.n	8005c58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f842 	bl	8005cdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	2b20      	cmp	r3, #32
 8005c64:	d10e      	bne.n	8005c84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f003 0320 	and.w	r3, r3, #32
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d107      	bne.n	8005c84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f06f 0220 	mvn.w	r2, #32
 8005c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f952 	bl	8005f28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c84:	bf00      	nop
 8005c86:	3708      	adds	r7, #8
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a40      	ldr	r2, [pc, #256]	; (8005e04 <TIM_Base_SetConfig+0x114>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d013      	beq.n	8005d30 <TIM_Base_SetConfig+0x40>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d0e:	d00f      	beq.n	8005d30 <TIM_Base_SetConfig+0x40>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a3d      	ldr	r2, [pc, #244]	; (8005e08 <TIM_Base_SetConfig+0x118>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d00b      	beq.n	8005d30 <TIM_Base_SetConfig+0x40>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a3c      	ldr	r2, [pc, #240]	; (8005e0c <TIM_Base_SetConfig+0x11c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d007      	beq.n	8005d30 <TIM_Base_SetConfig+0x40>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a3b      	ldr	r2, [pc, #236]	; (8005e10 <TIM_Base_SetConfig+0x120>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d003      	beq.n	8005d30 <TIM_Base_SetConfig+0x40>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a3a      	ldr	r2, [pc, #232]	; (8005e14 <TIM_Base_SetConfig+0x124>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d108      	bne.n	8005d42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a2f      	ldr	r2, [pc, #188]	; (8005e04 <TIM_Base_SetConfig+0x114>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d02b      	beq.n	8005da2 <TIM_Base_SetConfig+0xb2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d50:	d027      	beq.n	8005da2 <TIM_Base_SetConfig+0xb2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a2c      	ldr	r2, [pc, #176]	; (8005e08 <TIM_Base_SetConfig+0x118>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d023      	beq.n	8005da2 <TIM_Base_SetConfig+0xb2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a2b      	ldr	r2, [pc, #172]	; (8005e0c <TIM_Base_SetConfig+0x11c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d01f      	beq.n	8005da2 <TIM_Base_SetConfig+0xb2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a2a      	ldr	r2, [pc, #168]	; (8005e10 <TIM_Base_SetConfig+0x120>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d01b      	beq.n	8005da2 <TIM_Base_SetConfig+0xb2>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a29      	ldr	r2, [pc, #164]	; (8005e14 <TIM_Base_SetConfig+0x124>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d017      	beq.n	8005da2 <TIM_Base_SetConfig+0xb2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a28      	ldr	r2, [pc, #160]	; (8005e18 <TIM_Base_SetConfig+0x128>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d013      	beq.n	8005da2 <TIM_Base_SetConfig+0xb2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a27      	ldr	r2, [pc, #156]	; (8005e1c <TIM_Base_SetConfig+0x12c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d00f      	beq.n	8005da2 <TIM_Base_SetConfig+0xb2>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a26      	ldr	r2, [pc, #152]	; (8005e20 <TIM_Base_SetConfig+0x130>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00b      	beq.n	8005da2 <TIM_Base_SetConfig+0xb2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a25      	ldr	r2, [pc, #148]	; (8005e24 <TIM_Base_SetConfig+0x134>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d007      	beq.n	8005da2 <TIM_Base_SetConfig+0xb2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a24      	ldr	r2, [pc, #144]	; (8005e28 <TIM_Base_SetConfig+0x138>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d003      	beq.n	8005da2 <TIM_Base_SetConfig+0xb2>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a23      	ldr	r2, [pc, #140]	; (8005e2c <TIM_Base_SetConfig+0x13c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d108      	bne.n	8005db4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a0a      	ldr	r2, [pc, #40]	; (8005e04 <TIM_Base_SetConfig+0x114>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d003      	beq.n	8005de8 <TIM_Base_SetConfig+0xf8>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a0c      	ldr	r2, [pc, #48]	; (8005e14 <TIM_Base_SetConfig+0x124>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d103      	bne.n	8005df0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	691a      	ldr	r2, [r3, #16]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	615a      	str	r2, [r3, #20]
}
 8005df6:	bf00      	nop
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	40010000 	.word	0x40010000
 8005e08:	40000400 	.word	0x40000400
 8005e0c:	40000800 	.word	0x40000800
 8005e10:	40000c00 	.word	0x40000c00
 8005e14:	40010400 	.word	0x40010400
 8005e18:	40014000 	.word	0x40014000
 8005e1c:	40014400 	.word	0x40014400
 8005e20:	40014800 	.word	0x40014800
 8005e24:	40001800 	.word	0x40001800
 8005e28:	40001c00 	.word	0x40001c00
 8005e2c:	40002000 	.word	0x40002000

08005e30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d101      	bne.n	8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e44:	2302      	movs	r3, #2
 8005e46:	e05a      	b.n	8005efe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a21      	ldr	r2, [pc, #132]	; (8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d022      	beq.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e94:	d01d      	beq.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a1d      	ldr	r2, [pc, #116]	; (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d018      	beq.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a1b      	ldr	r2, [pc, #108]	; (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d013      	beq.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a1a      	ldr	r2, [pc, #104]	; (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d00e      	beq.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a18      	ldr	r2, [pc, #96]	; (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d009      	beq.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a17      	ldr	r2, [pc, #92]	; (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d004      	beq.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a15      	ldr	r2, [pc, #84]	; (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d10c      	bne.n	8005eec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ed8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	40010000 	.word	0x40010000
 8005f10:	40000400 	.word	0x40000400
 8005f14:	40000800 	.word	0x40000800
 8005f18:	40000c00 	.word	0x40000c00
 8005f1c:	40010400 	.word	0x40010400
 8005f20:	40014000 	.word	0x40014000
 8005f24:	40001800 	.word	0x40001800

08005f28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e03f      	b.n	8005fe2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d106      	bne.n	8005f7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f837 	bl	8005fea <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2224      	movs	r2, #36	; 0x24
 8005f80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68da      	ldr	r2, [r3, #12]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 fb63 	bl	8006660 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	691a      	ldr	r2, [r3, #16]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	695a      	ldr	r2, [r3, #20]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68da      	ldr	r2, [r3, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3708      	adds	r7, #8
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b088      	sub	sp, #32
 8006002:	af02      	add	r7, sp, #8
 8006004:	60f8      	str	r0, [r7, #12]
 8006006:	60b9      	str	r1, [r7, #8]
 8006008:	603b      	str	r3, [r7, #0]
 800600a:	4613      	mov	r3, r2
 800600c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800600e:	2300      	movs	r3, #0
 8006010:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b20      	cmp	r3, #32
 800601c:	f040 8090 	bne.w	8006140 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d002      	beq.n	800602c <HAL_UART_Receive+0x2e>
 8006026:	88fb      	ldrh	r3, [r7, #6]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d101      	bne.n	8006030 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e088      	b.n	8006142 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006036:	2b01      	cmp	r3, #1
 8006038:	d101      	bne.n	800603e <HAL_UART_Receive+0x40>
 800603a:	2302      	movs	r3, #2
 800603c:	e081      	b.n	8006142 <HAL_UART_Receive+0x144>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2222      	movs	r2, #34	; 0x22
 8006050:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006054:	f7fd fb52 	bl	80036fc <HAL_GetTick>
 8006058:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	88fa      	ldrh	r2, [r7, #6]
 800605e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	88fa      	ldrh	r2, [r7, #6]
 8006064:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800606e:	e05c      	b.n	800612a <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006074:	b29b      	uxth	r3, r3
 8006076:	3b01      	subs	r3, #1
 8006078:	b29a      	uxth	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006086:	d12b      	bne.n	80060e0 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	2200      	movs	r2, #0
 8006090:	2120      	movs	r1, #32
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 f978 	bl	8006388 <UART_WaitOnFlagUntilTimeout>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e04f      	b.n	8006142 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10c      	bne.n	80060c8 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	3302      	adds	r3, #2
 80060c4:	60bb      	str	r3, [r7, #8]
 80060c6:	e030      	b.n	800612a <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	3301      	adds	r3, #1
 80060dc:	60bb      	str	r3, [r7, #8]
 80060de:	e024      	b.n	800612a <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2200      	movs	r2, #0
 80060e8:	2120      	movs	r1, #32
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 f94c 	bl	8006388 <UART_WaitOnFlagUntilTimeout>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e023      	b.n	8006142 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d108      	bne.n	8006114 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6859      	ldr	r1, [r3, #4]
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	60ba      	str	r2, [r7, #8]
 800610e:	b2ca      	uxtb	r2, r1
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	e00a      	b.n	800612a <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	b2da      	uxtb	r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	1c59      	adds	r1, r3, #1
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006126:	b2d2      	uxtb	r2, r2
 8006128:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800612e:	b29b      	uxth	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d19d      	bne.n	8006070 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2220      	movs	r2, #32
 8006138:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800613c:	2300      	movs	r3, #0
 800613e:	e000      	b.n	8006142 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006140:	2302      	movs	r3, #2
  }
}
 8006142:	4618      	mov	r0, r3
 8006144:	3718      	adds	r7, #24
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
	...

0800614c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b088      	sub	sp, #32
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800616c:	2300      	movs	r3, #0
 800616e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006170:	2300      	movs	r3, #0
 8006172:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	f003 030f 	and.w	r3, r3, #15
 800617a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10d      	bne.n	800619e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	f003 0320 	and.w	r3, r3, #32
 8006188:	2b00      	cmp	r3, #0
 800618a:	d008      	beq.n	800619e <HAL_UART_IRQHandler+0x52>
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f9e0 	bl	800655c <UART_Receive_IT>
      return;
 800619c:	e0d1      	b.n	8006342 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 80b0 	beq.w	8006306 <HAL_UART_IRQHandler+0x1ba>
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d105      	bne.n	80061bc <HAL_UART_IRQHandler+0x70>
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f000 80a5 	beq.w	8006306 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <HAL_UART_IRQHandler+0x90>
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d005      	beq.n	80061dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d4:	f043 0201 	orr.w	r2, r3, #1
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	f003 0304 	and.w	r3, r3, #4
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00a      	beq.n	80061fc <HAL_UART_IRQHandler+0xb0>
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d005      	beq.n	80061fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f4:	f043 0202 	orr.w	r2, r3, #2
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00a      	beq.n	800621c <HAL_UART_IRQHandler+0xd0>
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d005      	beq.n	800621c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006214:	f043 0204 	orr.w	r2, r3, #4
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	f003 0308 	and.w	r3, r3, #8
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00f      	beq.n	8006246 <HAL_UART_IRQHandler+0xfa>
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	f003 0320 	and.w	r3, r3, #32
 800622c:	2b00      	cmp	r3, #0
 800622e:	d104      	bne.n	800623a <HAL_UART_IRQHandler+0xee>
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b00      	cmp	r3, #0
 8006238:	d005      	beq.n	8006246 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800623e:	f043 0208 	orr.w	r2, r3, #8
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800624a:	2b00      	cmp	r3, #0
 800624c:	d078      	beq.n	8006340 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	f003 0320 	and.w	r3, r3, #32
 8006254:	2b00      	cmp	r3, #0
 8006256:	d007      	beq.n	8006268 <HAL_UART_IRQHandler+0x11c>
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	f003 0320 	and.w	r3, r3, #32
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f97a 	bl	800655c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006272:	2b40      	cmp	r3, #64	; 0x40
 8006274:	bf0c      	ite	eq
 8006276:	2301      	moveq	r3, #1
 8006278:	2300      	movne	r3, #0
 800627a:	b2db      	uxtb	r3, r3
 800627c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006282:	f003 0308 	and.w	r3, r3, #8
 8006286:	2b00      	cmp	r3, #0
 8006288:	d102      	bne.n	8006290 <HAL_UART_IRQHandler+0x144>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d031      	beq.n	80062f4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 f8c3 	bl	800641c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a0:	2b40      	cmp	r3, #64	; 0x40
 80062a2:	d123      	bne.n	80062ec <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	695a      	ldr	r2, [r3, #20]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062b2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d013      	beq.n	80062e4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c0:	4a21      	ldr	r2, [pc, #132]	; (8006348 <HAL_UART_IRQHandler+0x1fc>)
 80062c2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7fd fb56 	bl	800397a <HAL_DMA_Abort_IT>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d016      	beq.n	8006302 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062de:	4610      	mov	r0, r2
 80062e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e2:	e00e      	b.n	8006302 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f845 	bl	8006374 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ea:	e00a      	b.n	8006302 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f841 	bl	8006374 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f2:	e006      	b.n	8006302 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f83d 	bl	8006374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006300:	e01e      	b.n	8006340 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006302:	bf00      	nop
    return;
 8006304:	e01c      	b.n	8006340 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630c:	2b00      	cmp	r3, #0
 800630e:	d008      	beq.n	8006322 <HAL_UART_IRQHandler+0x1d6>
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f8b0 	bl	8006480 <UART_Transmit_IT>
    return;
 8006320:	e00f      	b.n	8006342 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00a      	beq.n	8006342 <HAL_UART_IRQHandler+0x1f6>
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006332:	2b00      	cmp	r3, #0
 8006334:	d005      	beq.n	8006342 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f8f8 	bl	800652c <UART_EndTransmit_IT>
    return;
 800633c:	bf00      	nop
 800633e:	e000      	b.n	8006342 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006340:	bf00      	nop
  }
}
 8006342:	3720      	adds	r7, #32
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	08006459 	.word	0x08006459

0800634c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	603b      	str	r3, [r7, #0]
 8006394:	4613      	mov	r3, r2
 8006396:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006398:	e02c      	b.n	80063f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a0:	d028      	beq.n	80063f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d007      	beq.n	80063b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80063a8:	f7fd f9a8 	bl	80036fc <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d21d      	bcs.n	80063f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	695a      	ldr	r2, [r3, #20]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 0201 	bic.w	r2, r2, #1
 80063d6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2220      	movs	r2, #32
 80063dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e00f      	b.n	8006414 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	4013      	ands	r3, r2
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	429a      	cmp	r2, r3
 8006402:	bf0c      	ite	eq
 8006404:	2301      	moveq	r3, #1
 8006406:	2300      	movne	r3, #0
 8006408:	b2db      	uxtb	r3, r3
 800640a:	461a      	mov	r2, r3
 800640c:	79fb      	ldrb	r3, [r7, #7]
 800640e:	429a      	cmp	r2, r3
 8006410:	d0c3      	beq.n	800639a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68da      	ldr	r2, [r3, #12]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006432:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	695a      	ldr	r2, [r3, #20]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 0201 	bic.w	r2, r2, #1
 8006442:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2220      	movs	r2, #32
 8006448:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006464:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f7ff ff7e 	bl	8006374 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006478:	bf00      	nop
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b21      	cmp	r3, #33	; 0x21
 8006492:	d144      	bne.n	800651e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800649c:	d11a      	bne.n	80064d4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	881b      	ldrh	r3, [r3, #0]
 80064a8:	461a      	mov	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064b2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d105      	bne.n	80064c8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	1c9a      	adds	r2, r3, #2
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	621a      	str	r2, [r3, #32]
 80064c6:	e00e      	b.n	80064e6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	621a      	str	r2, [r3, #32]
 80064d2:	e008      	b.n	80064e6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	1c59      	adds	r1, r3, #1
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	6211      	str	r1, [r2, #32]
 80064de:	781a      	ldrb	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	3b01      	subs	r3, #1
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	4619      	mov	r1, r3
 80064f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10f      	bne.n	800651a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68da      	ldr	r2, [r3, #12]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006508:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68da      	ldr	r2, [r3, #12]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006518:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800651a:	2300      	movs	r3, #0
 800651c:	e000      	b.n	8006520 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800651e:	2302      	movs	r3, #2
  }
}
 8006520:	4618      	mov	r0, r3
 8006522:	3714      	adds	r7, #20
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68da      	ldr	r2, [r3, #12]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006542:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2220      	movs	r2, #32
 8006548:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7ff fefd 	bl	800634c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3708      	adds	r7, #8
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b22      	cmp	r3, #34	; 0x22
 800656e:	d171      	bne.n	8006654 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006578:	d123      	bne.n	80065c2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10e      	bne.n	80065a6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	b29b      	uxth	r3, r3
 8006590:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006594:	b29a      	uxth	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659e:	1c9a      	adds	r2, r3, #2
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	629a      	str	r2, [r3, #40]	; 0x28
 80065a4:	e029      	b.n	80065fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	629a      	str	r2, [r3, #40]	; 0x28
 80065c0:	e01b      	b.n	80065fa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10a      	bne.n	80065e0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	6858      	ldr	r0, [r3, #4]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d4:	1c59      	adds	r1, r3, #1
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	6291      	str	r1, [r2, #40]	; 0x28
 80065da:	b2c2      	uxtb	r2, r0
 80065dc:	701a      	strb	r2, [r3, #0]
 80065de:	e00c      	b.n	80065fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ec:	1c58      	adds	r0, r3, #1
 80065ee:	6879      	ldr	r1, [r7, #4]
 80065f0:	6288      	str	r0, [r1, #40]	; 0x28
 80065f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065f6:	b2d2      	uxtb	r2, r2
 80065f8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065fe:	b29b      	uxth	r3, r3
 8006600:	3b01      	subs	r3, #1
 8006602:	b29b      	uxth	r3, r3
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	4619      	mov	r1, r3
 8006608:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800660a:	2b00      	cmp	r3, #0
 800660c:	d120      	bne.n	8006650 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68da      	ldr	r2, [r3, #12]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 0220 	bic.w	r2, r2, #32
 800661c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68da      	ldr	r2, [r3, #12]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800662c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	695a      	ldr	r2, [r3, #20]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 0201 	bic.w	r2, r2, #1
 800663c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2220      	movs	r2, #32
 8006642:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f7ff fe8a 	bl	8006360 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800664c:	2300      	movs	r3, #0
 800664e:	e002      	b.n	8006656 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006650:	2300      	movs	r3, #0
 8006652:	e000      	b.n	8006656 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006654:	2302      	movs	r3, #2
  }
}
 8006656:	4618      	mov	r0, r3
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
	...

08006660 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006664:	b085      	sub	sp, #20
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68da      	ldr	r2, [r3, #12]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	430a      	orrs	r2, r1
 800667e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	431a      	orrs	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	4313      	orrs	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80066a2:	f023 030c 	bic.w	r3, r3, #12
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	6812      	ldr	r2, [r2, #0]
 80066aa:	68f9      	ldr	r1, [r7, #12]
 80066ac:	430b      	orrs	r3, r1
 80066ae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	699a      	ldr	r2, [r3, #24]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066ce:	f040 818b 	bne.w	80069e8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4ac1      	ldr	r2, [pc, #772]	; (80069dc <UART_SetConfig+0x37c>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d005      	beq.n	80066e8 <UART_SetConfig+0x88>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4abf      	ldr	r2, [pc, #764]	; (80069e0 <UART_SetConfig+0x380>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	f040 80bd 	bne.w	8006862 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066e8:	f7fe fbba 	bl	8004e60 <HAL_RCC_GetPCLK2Freq>
 80066ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	461d      	mov	r5, r3
 80066f2:	f04f 0600 	mov.w	r6, #0
 80066f6:	46a8      	mov	r8, r5
 80066f8:	46b1      	mov	r9, r6
 80066fa:	eb18 0308 	adds.w	r3, r8, r8
 80066fe:	eb49 0409 	adc.w	r4, r9, r9
 8006702:	4698      	mov	r8, r3
 8006704:	46a1      	mov	r9, r4
 8006706:	eb18 0805 	adds.w	r8, r8, r5
 800670a:	eb49 0906 	adc.w	r9, r9, r6
 800670e:	f04f 0100 	mov.w	r1, #0
 8006712:	f04f 0200 	mov.w	r2, #0
 8006716:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800671a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800671e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006722:	4688      	mov	r8, r1
 8006724:	4691      	mov	r9, r2
 8006726:	eb18 0005 	adds.w	r0, r8, r5
 800672a:	eb49 0106 	adc.w	r1, r9, r6
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	461d      	mov	r5, r3
 8006734:	f04f 0600 	mov.w	r6, #0
 8006738:	196b      	adds	r3, r5, r5
 800673a:	eb46 0406 	adc.w	r4, r6, r6
 800673e:	461a      	mov	r2, r3
 8006740:	4623      	mov	r3, r4
 8006742:	f7f9 fd5b 	bl	80001fc <__aeabi_uldivmod>
 8006746:	4603      	mov	r3, r0
 8006748:	460c      	mov	r4, r1
 800674a:	461a      	mov	r2, r3
 800674c:	4ba5      	ldr	r3, [pc, #660]	; (80069e4 <UART_SetConfig+0x384>)
 800674e:	fba3 2302 	umull	r2, r3, r3, r2
 8006752:	095b      	lsrs	r3, r3, #5
 8006754:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	461d      	mov	r5, r3
 800675c:	f04f 0600 	mov.w	r6, #0
 8006760:	46a9      	mov	r9, r5
 8006762:	46b2      	mov	sl, r6
 8006764:	eb19 0309 	adds.w	r3, r9, r9
 8006768:	eb4a 040a 	adc.w	r4, sl, sl
 800676c:	4699      	mov	r9, r3
 800676e:	46a2      	mov	sl, r4
 8006770:	eb19 0905 	adds.w	r9, r9, r5
 8006774:	eb4a 0a06 	adc.w	sl, sl, r6
 8006778:	f04f 0100 	mov.w	r1, #0
 800677c:	f04f 0200 	mov.w	r2, #0
 8006780:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006784:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006788:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800678c:	4689      	mov	r9, r1
 800678e:	4692      	mov	sl, r2
 8006790:	eb19 0005 	adds.w	r0, r9, r5
 8006794:	eb4a 0106 	adc.w	r1, sl, r6
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	461d      	mov	r5, r3
 800679e:	f04f 0600 	mov.w	r6, #0
 80067a2:	196b      	adds	r3, r5, r5
 80067a4:	eb46 0406 	adc.w	r4, r6, r6
 80067a8:	461a      	mov	r2, r3
 80067aa:	4623      	mov	r3, r4
 80067ac:	f7f9 fd26 	bl	80001fc <__aeabi_uldivmod>
 80067b0:	4603      	mov	r3, r0
 80067b2:	460c      	mov	r4, r1
 80067b4:	461a      	mov	r2, r3
 80067b6:	4b8b      	ldr	r3, [pc, #556]	; (80069e4 <UART_SetConfig+0x384>)
 80067b8:	fba3 1302 	umull	r1, r3, r3, r2
 80067bc:	095b      	lsrs	r3, r3, #5
 80067be:	2164      	movs	r1, #100	; 0x64
 80067c0:	fb01 f303 	mul.w	r3, r1, r3
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	00db      	lsls	r3, r3, #3
 80067c8:	3332      	adds	r3, #50	; 0x32
 80067ca:	4a86      	ldr	r2, [pc, #536]	; (80069e4 <UART_SetConfig+0x384>)
 80067cc:	fba2 2303 	umull	r2, r3, r2, r3
 80067d0:	095b      	lsrs	r3, r3, #5
 80067d2:	005b      	lsls	r3, r3, #1
 80067d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067d8:	4498      	add	r8, r3
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	461d      	mov	r5, r3
 80067de:	f04f 0600 	mov.w	r6, #0
 80067e2:	46a9      	mov	r9, r5
 80067e4:	46b2      	mov	sl, r6
 80067e6:	eb19 0309 	adds.w	r3, r9, r9
 80067ea:	eb4a 040a 	adc.w	r4, sl, sl
 80067ee:	4699      	mov	r9, r3
 80067f0:	46a2      	mov	sl, r4
 80067f2:	eb19 0905 	adds.w	r9, r9, r5
 80067f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80067fa:	f04f 0100 	mov.w	r1, #0
 80067fe:	f04f 0200 	mov.w	r2, #0
 8006802:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006806:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800680a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800680e:	4689      	mov	r9, r1
 8006810:	4692      	mov	sl, r2
 8006812:	eb19 0005 	adds.w	r0, r9, r5
 8006816:	eb4a 0106 	adc.w	r1, sl, r6
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	461d      	mov	r5, r3
 8006820:	f04f 0600 	mov.w	r6, #0
 8006824:	196b      	adds	r3, r5, r5
 8006826:	eb46 0406 	adc.w	r4, r6, r6
 800682a:	461a      	mov	r2, r3
 800682c:	4623      	mov	r3, r4
 800682e:	f7f9 fce5 	bl	80001fc <__aeabi_uldivmod>
 8006832:	4603      	mov	r3, r0
 8006834:	460c      	mov	r4, r1
 8006836:	461a      	mov	r2, r3
 8006838:	4b6a      	ldr	r3, [pc, #424]	; (80069e4 <UART_SetConfig+0x384>)
 800683a:	fba3 1302 	umull	r1, r3, r3, r2
 800683e:	095b      	lsrs	r3, r3, #5
 8006840:	2164      	movs	r1, #100	; 0x64
 8006842:	fb01 f303 	mul.w	r3, r1, r3
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	00db      	lsls	r3, r3, #3
 800684a:	3332      	adds	r3, #50	; 0x32
 800684c:	4a65      	ldr	r2, [pc, #404]	; (80069e4 <UART_SetConfig+0x384>)
 800684e:	fba2 2303 	umull	r2, r3, r2, r3
 8006852:	095b      	lsrs	r3, r3, #5
 8006854:	f003 0207 	and.w	r2, r3, #7
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4442      	add	r2, r8
 800685e:	609a      	str	r2, [r3, #8]
 8006860:	e26f      	b.n	8006d42 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006862:	f7fe fae9 	bl	8004e38 <HAL_RCC_GetPCLK1Freq>
 8006866:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	461d      	mov	r5, r3
 800686c:	f04f 0600 	mov.w	r6, #0
 8006870:	46a8      	mov	r8, r5
 8006872:	46b1      	mov	r9, r6
 8006874:	eb18 0308 	adds.w	r3, r8, r8
 8006878:	eb49 0409 	adc.w	r4, r9, r9
 800687c:	4698      	mov	r8, r3
 800687e:	46a1      	mov	r9, r4
 8006880:	eb18 0805 	adds.w	r8, r8, r5
 8006884:	eb49 0906 	adc.w	r9, r9, r6
 8006888:	f04f 0100 	mov.w	r1, #0
 800688c:	f04f 0200 	mov.w	r2, #0
 8006890:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006894:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006898:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800689c:	4688      	mov	r8, r1
 800689e:	4691      	mov	r9, r2
 80068a0:	eb18 0005 	adds.w	r0, r8, r5
 80068a4:	eb49 0106 	adc.w	r1, r9, r6
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	461d      	mov	r5, r3
 80068ae:	f04f 0600 	mov.w	r6, #0
 80068b2:	196b      	adds	r3, r5, r5
 80068b4:	eb46 0406 	adc.w	r4, r6, r6
 80068b8:	461a      	mov	r2, r3
 80068ba:	4623      	mov	r3, r4
 80068bc:	f7f9 fc9e 	bl	80001fc <__aeabi_uldivmod>
 80068c0:	4603      	mov	r3, r0
 80068c2:	460c      	mov	r4, r1
 80068c4:	461a      	mov	r2, r3
 80068c6:	4b47      	ldr	r3, [pc, #284]	; (80069e4 <UART_SetConfig+0x384>)
 80068c8:	fba3 2302 	umull	r2, r3, r3, r2
 80068cc:	095b      	lsrs	r3, r3, #5
 80068ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	461d      	mov	r5, r3
 80068d6:	f04f 0600 	mov.w	r6, #0
 80068da:	46a9      	mov	r9, r5
 80068dc:	46b2      	mov	sl, r6
 80068de:	eb19 0309 	adds.w	r3, r9, r9
 80068e2:	eb4a 040a 	adc.w	r4, sl, sl
 80068e6:	4699      	mov	r9, r3
 80068e8:	46a2      	mov	sl, r4
 80068ea:	eb19 0905 	adds.w	r9, r9, r5
 80068ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80068f2:	f04f 0100 	mov.w	r1, #0
 80068f6:	f04f 0200 	mov.w	r2, #0
 80068fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006902:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006906:	4689      	mov	r9, r1
 8006908:	4692      	mov	sl, r2
 800690a:	eb19 0005 	adds.w	r0, r9, r5
 800690e:	eb4a 0106 	adc.w	r1, sl, r6
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	461d      	mov	r5, r3
 8006918:	f04f 0600 	mov.w	r6, #0
 800691c:	196b      	adds	r3, r5, r5
 800691e:	eb46 0406 	adc.w	r4, r6, r6
 8006922:	461a      	mov	r2, r3
 8006924:	4623      	mov	r3, r4
 8006926:	f7f9 fc69 	bl	80001fc <__aeabi_uldivmod>
 800692a:	4603      	mov	r3, r0
 800692c:	460c      	mov	r4, r1
 800692e:	461a      	mov	r2, r3
 8006930:	4b2c      	ldr	r3, [pc, #176]	; (80069e4 <UART_SetConfig+0x384>)
 8006932:	fba3 1302 	umull	r1, r3, r3, r2
 8006936:	095b      	lsrs	r3, r3, #5
 8006938:	2164      	movs	r1, #100	; 0x64
 800693a:	fb01 f303 	mul.w	r3, r1, r3
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	00db      	lsls	r3, r3, #3
 8006942:	3332      	adds	r3, #50	; 0x32
 8006944:	4a27      	ldr	r2, [pc, #156]	; (80069e4 <UART_SetConfig+0x384>)
 8006946:	fba2 2303 	umull	r2, r3, r2, r3
 800694a:	095b      	lsrs	r3, r3, #5
 800694c:	005b      	lsls	r3, r3, #1
 800694e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006952:	4498      	add	r8, r3
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	461d      	mov	r5, r3
 8006958:	f04f 0600 	mov.w	r6, #0
 800695c:	46a9      	mov	r9, r5
 800695e:	46b2      	mov	sl, r6
 8006960:	eb19 0309 	adds.w	r3, r9, r9
 8006964:	eb4a 040a 	adc.w	r4, sl, sl
 8006968:	4699      	mov	r9, r3
 800696a:	46a2      	mov	sl, r4
 800696c:	eb19 0905 	adds.w	r9, r9, r5
 8006970:	eb4a 0a06 	adc.w	sl, sl, r6
 8006974:	f04f 0100 	mov.w	r1, #0
 8006978:	f04f 0200 	mov.w	r2, #0
 800697c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006980:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006984:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006988:	4689      	mov	r9, r1
 800698a:	4692      	mov	sl, r2
 800698c:	eb19 0005 	adds.w	r0, r9, r5
 8006990:	eb4a 0106 	adc.w	r1, sl, r6
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	461d      	mov	r5, r3
 800699a:	f04f 0600 	mov.w	r6, #0
 800699e:	196b      	adds	r3, r5, r5
 80069a0:	eb46 0406 	adc.w	r4, r6, r6
 80069a4:	461a      	mov	r2, r3
 80069a6:	4623      	mov	r3, r4
 80069a8:	f7f9 fc28 	bl	80001fc <__aeabi_uldivmod>
 80069ac:	4603      	mov	r3, r0
 80069ae:	460c      	mov	r4, r1
 80069b0:	461a      	mov	r2, r3
 80069b2:	4b0c      	ldr	r3, [pc, #48]	; (80069e4 <UART_SetConfig+0x384>)
 80069b4:	fba3 1302 	umull	r1, r3, r3, r2
 80069b8:	095b      	lsrs	r3, r3, #5
 80069ba:	2164      	movs	r1, #100	; 0x64
 80069bc:	fb01 f303 	mul.w	r3, r1, r3
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	00db      	lsls	r3, r3, #3
 80069c4:	3332      	adds	r3, #50	; 0x32
 80069c6:	4a07      	ldr	r2, [pc, #28]	; (80069e4 <UART_SetConfig+0x384>)
 80069c8:	fba2 2303 	umull	r2, r3, r2, r3
 80069cc:	095b      	lsrs	r3, r3, #5
 80069ce:	f003 0207 	and.w	r2, r3, #7
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4442      	add	r2, r8
 80069d8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80069da:	e1b2      	b.n	8006d42 <UART_SetConfig+0x6e2>
 80069dc:	40011000 	.word	0x40011000
 80069e0:	40011400 	.word	0x40011400
 80069e4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4ad7      	ldr	r2, [pc, #860]	; (8006d4c <UART_SetConfig+0x6ec>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d005      	beq.n	80069fe <UART_SetConfig+0x39e>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4ad6      	ldr	r2, [pc, #856]	; (8006d50 <UART_SetConfig+0x6f0>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	f040 80d1 	bne.w	8006ba0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80069fe:	f7fe fa2f 	bl	8004e60 <HAL_RCC_GetPCLK2Freq>
 8006a02:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	469a      	mov	sl, r3
 8006a08:	f04f 0b00 	mov.w	fp, #0
 8006a0c:	46d0      	mov	r8, sl
 8006a0e:	46d9      	mov	r9, fp
 8006a10:	eb18 0308 	adds.w	r3, r8, r8
 8006a14:	eb49 0409 	adc.w	r4, r9, r9
 8006a18:	4698      	mov	r8, r3
 8006a1a:	46a1      	mov	r9, r4
 8006a1c:	eb18 080a 	adds.w	r8, r8, sl
 8006a20:	eb49 090b 	adc.w	r9, r9, fp
 8006a24:	f04f 0100 	mov.w	r1, #0
 8006a28:	f04f 0200 	mov.w	r2, #0
 8006a2c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a30:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006a34:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006a38:	4688      	mov	r8, r1
 8006a3a:	4691      	mov	r9, r2
 8006a3c:	eb1a 0508 	adds.w	r5, sl, r8
 8006a40:	eb4b 0609 	adc.w	r6, fp, r9
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	4619      	mov	r1, r3
 8006a4a:	f04f 0200 	mov.w	r2, #0
 8006a4e:	f04f 0300 	mov.w	r3, #0
 8006a52:	f04f 0400 	mov.w	r4, #0
 8006a56:	0094      	lsls	r4, r2, #2
 8006a58:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a5c:	008b      	lsls	r3, r1, #2
 8006a5e:	461a      	mov	r2, r3
 8006a60:	4623      	mov	r3, r4
 8006a62:	4628      	mov	r0, r5
 8006a64:	4631      	mov	r1, r6
 8006a66:	f7f9 fbc9 	bl	80001fc <__aeabi_uldivmod>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	461a      	mov	r2, r3
 8006a70:	4bb8      	ldr	r3, [pc, #736]	; (8006d54 <UART_SetConfig+0x6f4>)
 8006a72:	fba3 2302 	umull	r2, r3, r3, r2
 8006a76:	095b      	lsrs	r3, r3, #5
 8006a78:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	469b      	mov	fp, r3
 8006a80:	f04f 0c00 	mov.w	ip, #0
 8006a84:	46d9      	mov	r9, fp
 8006a86:	46e2      	mov	sl, ip
 8006a88:	eb19 0309 	adds.w	r3, r9, r9
 8006a8c:	eb4a 040a 	adc.w	r4, sl, sl
 8006a90:	4699      	mov	r9, r3
 8006a92:	46a2      	mov	sl, r4
 8006a94:	eb19 090b 	adds.w	r9, r9, fp
 8006a98:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a9c:	f04f 0100 	mov.w	r1, #0
 8006aa0:	f04f 0200 	mov.w	r2, #0
 8006aa4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006aa8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006aac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ab0:	4689      	mov	r9, r1
 8006ab2:	4692      	mov	sl, r2
 8006ab4:	eb1b 0509 	adds.w	r5, fp, r9
 8006ab8:	eb4c 060a 	adc.w	r6, ip, sl
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	f04f 0200 	mov.w	r2, #0
 8006ac6:	f04f 0300 	mov.w	r3, #0
 8006aca:	f04f 0400 	mov.w	r4, #0
 8006ace:	0094      	lsls	r4, r2, #2
 8006ad0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ad4:	008b      	lsls	r3, r1, #2
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	4623      	mov	r3, r4
 8006ada:	4628      	mov	r0, r5
 8006adc:	4631      	mov	r1, r6
 8006ade:	f7f9 fb8d 	bl	80001fc <__aeabi_uldivmod>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	460c      	mov	r4, r1
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	4b9a      	ldr	r3, [pc, #616]	; (8006d54 <UART_SetConfig+0x6f4>)
 8006aea:	fba3 1302 	umull	r1, r3, r3, r2
 8006aee:	095b      	lsrs	r3, r3, #5
 8006af0:	2164      	movs	r1, #100	; 0x64
 8006af2:	fb01 f303 	mul.w	r3, r1, r3
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	011b      	lsls	r3, r3, #4
 8006afa:	3332      	adds	r3, #50	; 0x32
 8006afc:	4a95      	ldr	r2, [pc, #596]	; (8006d54 <UART_SetConfig+0x6f4>)
 8006afe:	fba2 2303 	umull	r2, r3, r2, r3
 8006b02:	095b      	lsrs	r3, r3, #5
 8006b04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b08:	4498      	add	r8, r3
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	469b      	mov	fp, r3
 8006b0e:	f04f 0c00 	mov.w	ip, #0
 8006b12:	46d9      	mov	r9, fp
 8006b14:	46e2      	mov	sl, ip
 8006b16:	eb19 0309 	adds.w	r3, r9, r9
 8006b1a:	eb4a 040a 	adc.w	r4, sl, sl
 8006b1e:	4699      	mov	r9, r3
 8006b20:	46a2      	mov	sl, r4
 8006b22:	eb19 090b 	adds.w	r9, r9, fp
 8006b26:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b2a:	f04f 0100 	mov.w	r1, #0
 8006b2e:	f04f 0200 	mov.w	r2, #0
 8006b32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b3e:	4689      	mov	r9, r1
 8006b40:	4692      	mov	sl, r2
 8006b42:	eb1b 0509 	adds.w	r5, fp, r9
 8006b46:	eb4c 060a 	adc.w	r6, ip, sl
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	f04f 0200 	mov.w	r2, #0
 8006b54:	f04f 0300 	mov.w	r3, #0
 8006b58:	f04f 0400 	mov.w	r4, #0
 8006b5c:	0094      	lsls	r4, r2, #2
 8006b5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b62:	008b      	lsls	r3, r1, #2
 8006b64:	461a      	mov	r2, r3
 8006b66:	4623      	mov	r3, r4
 8006b68:	4628      	mov	r0, r5
 8006b6a:	4631      	mov	r1, r6
 8006b6c:	f7f9 fb46 	bl	80001fc <__aeabi_uldivmod>
 8006b70:	4603      	mov	r3, r0
 8006b72:	460c      	mov	r4, r1
 8006b74:	461a      	mov	r2, r3
 8006b76:	4b77      	ldr	r3, [pc, #476]	; (8006d54 <UART_SetConfig+0x6f4>)
 8006b78:	fba3 1302 	umull	r1, r3, r3, r2
 8006b7c:	095b      	lsrs	r3, r3, #5
 8006b7e:	2164      	movs	r1, #100	; 0x64
 8006b80:	fb01 f303 	mul.w	r3, r1, r3
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	011b      	lsls	r3, r3, #4
 8006b88:	3332      	adds	r3, #50	; 0x32
 8006b8a:	4a72      	ldr	r2, [pc, #456]	; (8006d54 <UART_SetConfig+0x6f4>)
 8006b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b90:	095b      	lsrs	r3, r3, #5
 8006b92:	f003 020f 	and.w	r2, r3, #15
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4442      	add	r2, r8
 8006b9c:	609a      	str	r2, [r3, #8]
 8006b9e:	e0d0      	b.n	8006d42 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ba0:	f7fe f94a 	bl	8004e38 <HAL_RCC_GetPCLK1Freq>
 8006ba4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	469a      	mov	sl, r3
 8006baa:	f04f 0b00 	mov.w	fp, #0
 8006bae:	46d0      	mov	r8, sl
 8006bb0:	46d9      	mov	r9, fp
 8006bb2:	eb18 0308 	adds.w	r3, r8, r8
 8006bb6:	eb49 0409 	adc.w	r4, r9, r9
 8006bba:	4698      	mov	r8, r3
 8006bbc:	46a1      	mov	r9, r4
 8006bbe:	eb18 080a 	adds.w	r8, r8, sl
 8006bc2:	eb49 090b 	adc.w	r9, r9, fp
 8006bc6:	f04f 0100 	mov.w	r1, #0
 8006bca:	f04f 0200 	mov.w	r2, #0
 8006bce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006bd2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006bd6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006bda:	4688      	mov	r8, r1
 8006bdc:	4691      	mov	r9, r2
 8006bde:	eb1a 0508 	adds.w	r5, sl, r8
 8006be2:	eb4b 0609 	adc.w	r6, fp, r9
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	4619      	mov	r1, r3
 8006bec:	f04f 0200 	mov.w	r2, #0
 8006bf0:	f04f 0300 	mov.w	r3, #0
 8006bf4:	f04f 0400 	mov.w	r4, #0
 8006bf8:	0094      	lsls	r4, r2, #2
 8006bfa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006bfe:	008b      	lsls	r3, r1, #2
 8006c00:	461a      	mov	r2, r3
 8006c02:	4623      	mov	r3, r4
 8006c04:	4628      	mov	r0, r5
 8006c06:	4631      	mov	r1, r6
 8006c08:	f7f9 faf8 	bl	80001fc <__aeabi_uldivmod>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	460c      	mov	r4, r1
 8006c10:	461a      	mov	r2, r3
 8006c12:	4b50      	ldr	r3, [pc, #320]	; (8006d54 <UART_SetConfig+0x6f4>)
 8006c14:	fba3 2302 	umull	r2, r3, r3, r2
 8006c18:	095b      	lsrs	r3, r3, #5
 8006c1a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	469b      	mov	fp, r3
 8006c22:	f04f 0c00 	mov.w	ip, #0
 8006c26:	46d9      	mov	r9, fp
 8006c28:	46e2      	mov	sl, ip
 8006c2a:	eb19 0309 	adds.w	r3, r9, r9
 8006c2e:	eb4a 040a 	adc.w	r4, sl, sl
 8006c32:	4699      	mov	r9, r3
 8006c34:	46a2      	mov	sl, r4
 8006c36:	eb19 090b 	adds.w	r9, r9, fp
 8006c3a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c3e:	f04f 0100 	mov.w	r1, #0
 8006c42:	f04f 0200 	mov.w	r2, #0
 8006c46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c52:	4689      	mov	r9, r1
 8006c54:	4692      	mov	sl, r2
 8006c56:	eb1b 0509 	adds.w	r5, fp, r9
 8006c5a:	eb4c 060a 	adc.w	r6, ip, sl
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	4619      	mov	r1, r3
 8006c64:	f04f 0200 	mov.w	r2, #0
 8006c68:	f04f 0300 	mov.w	r3, #0
 8006c6c:	f04f 0400 	mov.w	r4, #0
 8006c70:	0094      	lsls	r4, r2, #2
 8006c72:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c76:	008b      	lsls	r3, r1, #2
 8006c78:	461a      	mov	r2, r3
 8006c7a:	4623      	mov	r3, r4
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	4631      	mov	r1, r6
 8006c80:	f7f9 fabc 	bl	80001fc <__aeabi_uldivmod>
 8006c84:	4603      	mov	r3, r0
 8006c86:	460c      	mov	r4, r1
 8006c88:	461a      	mov	r2, r3
 8006c8a:	4b32      	ldr	r3, [pc, #200]	; (8006d54 <UART_SetConfig+0x6f4>)
 8006c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c90:	095b      	lsrs	r3, r3, #5
 8006c92:	2164      	movs	r1, #100	; 0x64
 8006c94:	fb01 f303 	mul.w	r3, r1, r3
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	011b      	lsls	r3, r3, #4
 8006c9c:	3332      	adds	r3, #50	; 0x32
 8006c9e:	4a2d      	ldr	r2, [pc, #180]	; (8006d54 <UART_SetConfig+0x6f4>)
 8006ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca4:	095b      	lsrs	r3, r3, #5
 8006ca6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006caa:	4498      	add	r8, r3
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	469b      	mov	fp, r3
 8006cb0:	f04f 0c00 	mov.w	ip, #0
 8006cb4:	46d9      	mov	r9, fp
 8006cb6:	46e2      	mov	sl, ip
 8006cb8:	eb19 0309 	adds.w	r3, r9, r9
 8006cbc:	eb4a 040a 	adc.w	r4, sl, sl
 8006cc0:	4699      	mov	r9, r3
 8006cc2:	46a2      	mov	sl, r4
 8006cc4:	eb19 090b 	adds.w	r9, r9, fp
 8006cc8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ccc:	f04f 0100 	mov.w	r1, #0
 8006cd0:	f04f 0200 	mov.w	r2, #0
 8006cd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cdc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ce0:	4689      	mov	r9, r1
 8006ce2:	4692      	mov	sl, r2
 8006ce4:	eb1b 0509 	adds.w	r5, fp, r9
 8006ce8:	eb4c 060a 	adc.w	r6, ip, sl
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	f04f 0200 	mov.w	r2, #0
 8006cf6:	f04f 0300 	mov.w	r3, #0
 8006cfa:	f04f 0400 	mov.w	r4, #0
 8006cfe:	0094      	lsls	r4, r2, #2
 8006d00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d04:	008b      	lsls	r3, r1, #2
 8006d06:	461a      	mov	r2, r3
 8006d08:	4623      	mov	r3, r4
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	4631      	mov	r1, r6
 8006d0e:	f7f9 fa75 	bl	80001fc <__aeabi_uldivmod>
 8006d12:	4603      	mov	r3, r0
 8006d14:	460c      	mov	r4, r1
 8006d16:	461a      	mov	r2, r3
 8006d18:	4b0e      	ldr	r3, [pc, #56]	; (8006d54 <UART_SetConfig+0x6f4>)
 8006d1a:	fba3 1302 	umull	r1, r3, r3, r2
 8006d1e:	095b      	lsrs	r3, r3, #5
 8006d20:	2164      	movs	r1, #100	; 0x64
 8006d22:	fb01 f303 	mul.w	r3, r1, r3
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	011b      	lsls	r3, r3, #4
 8006d2a:	3332      	adds	r3, #50	; 0x32
 8006d2c:	4a09      	ldr	r2, [pc, #36]	; (8006d54 <UART_SetConfig+0x6f4>)
 8006d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d32:	095b      	lsrs	r3, r3, #5
 8006d34:	f003 020f 	and.w	r2, r3, #15
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4442      	add	r2, r8
 8006d3e:	609a      	str	r2, [r3, #8]
}
 8006d40:	e7ff      	b.n	8006d42 <UART_SetConfig+0x6e2>
 8006d42:	bf00      	nop
 8006d44:	3714      	adds	r7, #20
 8006d46:	46bd      	mov	sp, r7
 8006d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d4c:	40011000 	.word	0x40011000
 8006d50:	40011400 	.word	0x40011400
 8006d54:	51eb851f 	.word	0x51eb851f

08006d58 <__libc_init_array>:
 8006d58:	b570      	push	{r4, r5, r6, lr}
 8006d5a:	4e0d      	ldr	r6, [pc, #52]	; (8006d90 <__libc_init_array+0x38>)
 8006d5c:	4c0d      	ldr	r4, [pc, #52]	; (8006d94 <__libc_init_array+0x3c>)
 8006d5e:	1ba4      	subs	r4, r4, r6
 8006d60:	10a4      	asrs	r4, r4, #2
 8006d62:	2500      	movs	r5, #0
 8006d64:	42a5      	cmp	r5, r4
 8006d66:	d109      	bne.n	8006d7c <__libc_init_array+0x24>
 8006d68:	4e0b      	ldr	r6, [pc, #44]	; (8006d98 <__libc_init_array+0x40>)
 8006d6a:	4c0c      	ldr	r4, [pc, #48]	; (8006d9c <__libc_init_array+0x44>)
 8006d6c:	f000 f844 	bl	8006df8 <_init>
 8006d70:	1ba4      	subs	r4, r4, r6
 8006d72:	10a4      	asrs	r4, r4, #2
 8006d74:	2500      	movs	r5, #0
 8006d76:	42a5      	cmp	r5, r4
 8006d78:	d105      	bne.n	8006d86 <__libc_init_array+0x2e>
 8006d7a:	bd70      	pop	{r4, r5, r6, pc}
 8006d7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d80:	4798      	blx	r3
 8006d82:	3501      	adds	r5, #1
 8006d84:	e7ee      	b.n	8006d64 <__libc_init_array+0xc>
 8006d86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d8a:	4798      	blx	r3
 8006d8c:	3501      	adds	r5, #1
 8006d8e:	e7f2      	b.n	8006d76 <__libc_init_array+0x1e>
 8006d90:	08007274 	.word	0x08007274
 8006d94:	08007274 	.word	0x08007274
 8006d98:	08007274 	.word	0x08007274
 8006d9c:	08007278 	.word	0x08007278

08006da0 <memset>:
 8006da0:	4402      	add	r2, r0
 8006da2:	4603      	mov	r3, r0
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d100      	bne.n	8006daa <memset+0xa>
 8006da8:	4770      	bx	lr
 8006daa:	f803 1b01 	strb.w	r1, [r3], #1
 8006dae:	e7f9      	b.n	8006da4 <memset+0x4>

08006db0 <strcat>:
 8006db0:	b510      	push	{r4, lr}
 8006db2:	4603      	mov	r3, r0
 8006db4:	781a      	ldrb	r2, [r3, #0]
 8006db6:	1c5c      	adds	r4, r3, #1
 8006db8:	b93a      	cbnz	r2, 8006dca <strcat+0x1a>
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dc0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006dc4:	2a00      	cmp	r2, #0
 8006dc6:	d1f9      	bne.n	8006dbc <strcat+0xc>
 8006dc8:	bd10      	pop	{r4, pc}
 8006dca:	4623      	mov	r3, r4
 8006dcc:	e7f2      	b.n	8006db4 <strcat+0x4>

08006dce <strncpy>:
 8006dce:	b570      	push	{r4, r5, r6, lr}
 8006dd0:	3901      	subs	r1, #1
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	b902      	cbnz	r2, 8006dd8 <strncpy+0xa>
 8006dd6:	bd70      	pop	{r4, r5, r6, pc}
 8006dd8:	4623      	mov	r3, r4
 8006dda:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8006dde:	f803 5b01 	strb.w	r5, [r3], #1
 8006de2:	1e56      	subs	r6, r2, #1
 8006de4:	b92d      	cbnz	r5, 8006df2 <strncpy+0x24>
 8006de6:	4414      	add	r4, r2
 8006de8:	42a3      	cmp	r3, r4
 8006dea:	d0f4      	beq.n	8006dd6 <strncpy+0x8>
 8006dec:	f803 5b01 	strb.w	r5, [r3], #1
 8006df0:	e7fa      	b.n	8006de8 <strncpy+0x1a>
 8006df2:	461c      	mov	r4, r3
 8006df4:	4632      	mov	r2, r6
 8006df6:	e7ed      	b.n	8006dd4 <strncpy+0x6>

08006df8 <_init>:
 8006df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfa:	bf00      	nop
 8006dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dfe:	bc08      	pop	{r3}
 8006e00:	469e      	mov	lr, r3
 8006e02:	4770      	bx	lr

08006e04 <_fini>:
 8006e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e06:	bf00      	nop
 8006e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e0a:	bc08      	pop	{r3}
 8006e0c:	469e      	mov	lr, r3
 8006e0e:	4770      	bx	lr
